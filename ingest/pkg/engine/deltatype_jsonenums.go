// Code generated by jsonenums -type=DeltaType; DO NOT EDIT.

package engine

import (
	"encoding/json"
	"fmt"
)

var (
	_DeltaTypeNameToValue = map[string]DeltaType{
		"DeltaDeleted":    DeltaDeleted,
		"DeltaUnmodified": DeltaUnmodified,
		"DeltaAdded":      DeltaAdded,
		"DeltaModified":   DeltaModified,
		"DeltaRenamed":    DeltaRenamed,
		"DeltaCopied":     DeltaCopied,
		"DeltaIgnored":    DeltaIgnored,
		"DeltaUntracked":  DeltaUntracked,
		"DeltaTypeChange": DeltaTypeChange,
		"DeltaUnreadable": DeltaUnreadable,
		"DeltaConflicted": DeltaConflicted,
		"DeltaOther":      DeltaOther,
	}

	_DeltaTypeValueToName = map[DeltaType]string{
		DeltaDeleted:    "DeltaDeleted",
		DeltaUnmodified: "DeltaUnmodified",
		DeltaAdded:      "DeltaAdded",
		DeltaModified:   "DeltaModified",
		DeltaRenamed:    "DeltaRenamed",
		DeltaCopied:     "DeltaCopied",
		DeltaIgnored:    "DeltaIgnored",
		DeltaUntracked:  "DeltaUntracked",
		DeltaTypeChange: "DeltaTypeChange",
		DeltaUnreadable: "DeltaUnreadable",
		DeltaConflicted: "DeltaConflicted",
		DeltaOther:      "DeltaOther",
	}
)

func init() {
	var v DeltaType
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_DeltaTypeNameToValue = map[string]DeltaType{
			interface{}(DeltaDeleted).(fmt.Stringer).String():    DeltaDeleted,
			interface{}(DeltaUnmodified).(fmt.Stringer).String(): DeltaUnmodified,
			interface{}(DeltaAdded).(fmt.Stringer).String():      DeltaAdded,
			interface{}(DeltaModified).(fmt.Stringer).String():   DeltaModified,
			interface{}(DeltaRenamed).(fmt.Stringer).String():    DeltaRenamed,
			interface{}(DeltaCopied).(fmt.Stringer).String():     DeltaCopied,
			interface{}(DeltaIgnored).(fmt.Stringer).String():    DeltaIgnored,
			interface{}(DeltaUntracked).(fmt.Stringer).String():  DeltaUntracked,
			interface{}(DeltaTypeChange).(fmt.Stringer).String(): DeltaTypeChange,
			interface{}(DeltaUnreadable).(fmt.Stringer).String(): DeltaUnreadable,
			interface{}(DeltaConflicted).(fmt.Stringer).String(): DeltaConflicted,
			interface{}(DeltaOther).(fmt.Stringer).String():      DeltaOther,
		}
	}
}

// MarshalJSON is generated so DeltaType satisfies json.Marshaler.
func (r DeltaType) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _DeltaTypeValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid DeltaType: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so DeltaType satisfies json.Unmarshaler.
func (r *DeltaType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("DeltaType should be a string, got %s", data)
	}
	v, ok := _DeltaTypeNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid DeltaType %q", s)
	}
	*r = v
	return nil
}
