// Code generated by jsonenums -type=Reason; DO NOT EDIT.

package insights

import (
	"encoding/json"
	"fmt"
)

var (
	_ReasonNameToValue = map[string]Reason{
		"DevFirstCommit":         DevFirstCommit,
		"ManyDevelopers":         ManyDevelopers,
		"FirstModification":      FirstModification,
		"CommitLargeFiles":       CommitLargeFiles,
		"DevNewToRepository":     DevNewToRepository,
		"DevNewToSubsystem":      DevNewToSubsystem,
		"DevIsLastModifier":      DevIsLastModifier,
		"DevExpert":              DevExpert,
		"FilesDevNew":            FilesDevNew,
		"FilesDevExpert":         FilesDevExpert,
		"FilesFrequentlyChanged": FilesFrequentlyChanged,
		"FilesFrequentlyFixed":   FilesFrequentlyFixed,
		"FilesFrequentlyBuggy":   FilesFrequentlyBuggy,
		"FilesAbandoned":         FilesAbandoned,
		"FilesRecentlyModified":  FilesRecentlyModified,
		"CommitScattered":        CommitScattered,
		"CommitIsLargest":        CommitIsLargest,
		"CommitIsLargestAdd":     CommitIsLargestAdd,
		"CommitIsLargestDelete":  CommitIsLargestDelete,
	}

	_ReasonValueToName = map[Reason]string{
		DevFirstCommit:         "DevFirstCommit",
		ManyDevelopers:         "ManyDevelopers",
		FirstModification:      "FirstModification",
		CommitLargeFiles:       "CommitLargeFiles",
		DevNewToRepository:     "DevNewToRepository",
		DevNewToSubsystem:      "DevNewToSubsystem",
		DevIsLastModifier:      "DevIsLastModifier",
		DevExpert:              "DevExpert",
		FilesDevNew:            "FilesDevNew",
		FilesDevExpert:         "FilesDevExpert",
		FilesFrequentlyChanged: "FilesFrequentlyChanged",
		FilesFrequentlyFixed:   "FilesFrequentlyFixed",
		FilesFrequentlyBuggy:   "FilesFrequentlyBuggy",
		FilesAbandoned:         "FilesAbandoned",
		FilesRecentlyModified:  "FilesRecentlyModified",
		CommitScattered:        "CommitScattered",
		CommitIsLargest:        "CommitIsLargest",
		CommitIsLargestAdd:     "CommitIsLargestAdd",
		CommitIsLargestDelete:  "CommitIsLargestDelete",
	}
)

func init() {
	var v Reason
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_ReasonNameToValue = map[string]Reason{
			interface{}(DevFirstCommit).(fmt.Stringer).String():         DevFirstCommit,
			interface{}(ManyDevelopers).(fmt.Stringer).String():         ManyDevelopers,
			interface{}(FirstModification).(fmt.Stringer).String():      FirstModification,
			interface{}(CommitLargeFiles).(fmt.Stringer).String():       CommitLargeFiles,
			interface{}(DevNewToRepository).(fmt.Stringer).String():     DevNewToRepository,
			interface{}(DevNewToSubsystem).(fmt.Stringer).String():      DevNewToSubsystem,
			interface{}(DevIsLastModifier).(fmt.Stringer).String():      DevIsLastModifier,
			interface{}(DevExpert).(fmt.Stringer).String():              DevExpert,
			interface{}(FilesDevNew).(fmt.Stringer).String():            FilesDevNew,
			interface{}(FilesDevExpert).(fmt.Stringer).String():         FilesDevExpert,
			interface{}(FilesFrequentlyChanged).(fmt.Stringer).String(): FilesFrequentlyChanged,
			interface{}(FilesFrequentlyFixed).(fmt.Stringer).String():   FilesFrequentlyFixed,
			interface{}(FilesFrequentlyBuggy).(fmt.Stringer).String():   FilesFrequentlyBuggy,
			interface{}(FilesAbandoned).(fmt.Stringer).String():         FilesAbandoned,
			interface{}(FilesRecentlyModified).(fmt.Stringer).String():  FilesRecentlyModified,
			interface{}(CommitScattered).(fmt.Stringer).String():        CommitScattered,
			interface{}(CommitIsLargest).(fmt.Stringer).String():        CommitIsLargest,
			interface{}(CommitIsLargestAdd).(fmt.Stringer).String():     CommitIsLargestAdd,
			interface{}(CommitIsLargestDelete).(fmt.Stringer).String():  CommitIsLargestDelete,
		}
	}
}

// MarshalJSON is generated so Reason satisfies json.Marshaler.
func (r Reason) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _ReasonValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Reason: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Reason satisfies json.Unmarshaler.
func (r *Reason) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Reason should be a string, got %s", data)
	}
	v, ok := _ReasonNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Reason %q", s)
	}
	*r = v
	return nil
}
