// Code generated by jsonenums -type=FileType; DO NOT EDIT.

package classify

import (
	"encoding/json"
	"fmt"
)

var (
	_FileTypeNameToValue = map[string]FileType{
		"FileBinary":        FileBinary,
		"FileConfiguration": FileConfiguration,
		"FileDocumentation": FileDocumentation,
		"FileCode":          FileCode,
		"FileGenerated":     FileGenerated,
		"FileDependency":    FileDependency,
		"FileTests":         FileTests,
		"FileSymlink":       FileSymlink,
	}

	_FileTypeValueToName = map[FileType]string{
		FileBinary:        "FileBinary",
		FileConfiguration: "FileConfiguration",
		FileDocumentation: "FileDocumentation",
		FileCode:          "FileCode",
		FileGenerated:     "FileGenerated",
		FileDependency:    "FileDependency",
		FileTests:         "FileTests",
		FileSymlink:       "FileSymlink",
	}
)

func init() {
	var v FileType
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_FileTypeNameToValue = map[string]FileType{
			interface{}(FileBinary).(fmt.Stringer).String():        FileBinary,
			interface{}(FileConfiguration).(fmt.Stringer).String(): FileConfiguration,
			interface{}(FileDocumentation).(fmt.Stringer).String(): FileDocumentation,
			interface{}(FileCode).(fmt.Stringer).String():          FileCode,
			interface{}(FileGenerated).(fmt.Stringer).String():     FileGenerated,
			interface{}(FileDependency).(fmt.Stringer).String():    FileDependency,
			interface{}(FileTests).(fmt.Stringer).String():         FileTests,
			interface{}(FileSymlink).(fmt.Stringer).String():       FileSymlink,
		}
	}
}

// MarshalJSON is generated so FileType satisfies json.Marshaler.
func (r FileType) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _FileTypeValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid FileType: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so FileType satisfies json.Unmarshaler.
func (r *FileType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("FileType should be a string, got %s", data)
	}
	v, ok := _FileTypeNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid FileType %q", s)
	}
	*r = v
	return nil
}
