// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/repofuel/repofuel/accounts/pkg/permission"
	"github.com/repofuel/repofuel/pkg/common"
	"github.com/repofuel/repofuel/pkg/metrics"
	"github.com/repofuel/repofuel/ingest/graph/marshals"
	"github.com/repofuel/repofuel/ingest/graph/model"
	"github.com/repofuel/repofuel/ingest/internal/entity"
	"github.com/repofuel/repofuel/ingest/pkg/classify"
	"github.com/repofuel/repofuel/ingest/pkg/engine"
	"github.com/repofuel/repofuel/ingest/pkg/identifier"
	"github.com/repofuel/repofuel/ingest/pkg/insights"
	"github.com/repofuel/repofuel/ingest/pkg/invoke"
	"github.com/repofuel/repofuel/ingest/pkg/manage"
	"github.com/repofuel/repofuel/ingest/pkg/status"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Activity() ActivityResolver
	Commit() CommitResolver
	CommitFile() CommitFileResolver
	Feedback() FeedbackResolver
	Mutation() MutationResolver
	Organization() OrganizationResolver
	PullRequest() PullRequestResolver
	PullRequestSource() PullRequestSourceResolver
	Query() QueryResolver
	Repository() RepositoryResolver
	RepositorySource() RepositorySourceResolver
	Subscription() SubscriptionResolver
	User() UserResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Activity struct {
		CommitsAnalyzedCount          func(childComplexity int, period *model.Period, frequency entity.Frequency) int
		CommitsAnalyzedTotalCount     func(childComplexity int, period *model.Period) int
		CommitsPredictCount           func(childComplexity int, period *model.Period, frequency entity.Frequency) int
		CommitsPredictTotalCount      func(childComplexity int, period *model.Period) int
		JobsCount                     func(childComplexity int, period *model.Period, frequency entity.Frequency) int
		JobsTotalCount                func(childComplexity int, period *model.Period) int
		OrganizationsCount            func(childComplexity int, period *model.Period, frequency entity.Frequency) int
		OrganizationsTotalCount       func(childComplexity int, period *model.Period) int
		PullRequestAnalyzedCount      func(childComplexity int, period *model.Period, frequency entity.Frequency) int
		PullRequestAnalyzedTotalCount func(childComplexity int, period *model.Period) int
		RepositoriesCount             func(childComplexity int, period *model.Period, frequency entity.Frequency) int
		RepositoriesTotalCount        func(childComplexity int, period *model.Period) int
		ViewsTotalCount               func(childComplexity int, period *model.Period) int
		VisitCount                    func(childComplexity int, period *model.Period, frequency entity.Frequency) int
		VisitorsTotalCount            func(childComplexity int, period *model.Period) int
	}

	AddPublicRepositoryPayload struct {
		Errors     func(childComplexity int) int
		Repository func(childComplexity int) int
	}

	AvgOverTime struct {
		Avg  func(childComplexity int) int
		Date func(childComplexity int) int
	}

	AvgOverTimeConnection struct {
		Nodes func(childComplexity int) int
	}

	Branch struct {
		CloneURL func(childComplexity int) int
		Name     func(childComplexity int) int
		SHA      func(childComplexity int) int
	}

	BugIndicators struct {
		Diffusion  func(childComplexity int) int
		Experience func(childComplexity int) int
		History    func(childComplexity int) int
		Size       func(childComplexity int) int
	}

	ChangeMeasures struct {
		AGE     func(childComplexity int) int
		EXP     func(childComplexity int) int
		Entropy func(childComplexity int) int
		HA      func(childComplexity int) int
		HD      func(childComplexity int) int
		LA      func(childComplexity int) int
		LD      func(childComplexity int) int
		LT      func(childComplexity int) int
		ND      func(childComplexity int) int
		NDEV    func(childComplexity int) int
		NF      func(childComplexity int) int
		NS      func(childComplexity int) int
		NUC     func(childComplexity int) int
		REXP    func(childComplexity int) int
		SEXP    func(childComplexity int) int
	}

	ChecksConfig struct {
		Enable func(childComplexity int) int
	}

	Commit struct {
		Analysis    func(childComplexity int) int
		Author      func(childComplexity int) int
		DeletedTags func(childComplexity int) int
		Files       func(childComplexity int) int
		Fix         func(childComplexity int) int
		Fixed       func(childComplexity int) int
		Fixes       func(childComplexity int, first *int, after *string, last *int, before *string, direction *entity.OrderDirection) int
		Hash        func(childComplexity int) int
		ID          func(childComplexity int) int
		Issues      func(childComplexity int) int
		Message     func(childComplexity int) int
		Metrics     func(childComplexity int) int
		Repository  func(childComplexity int) int
		Tags        func(childComplexity int) int
	}

	CommitAnalysis struct {
		BugPotential func(childComplexity int) int
		Indicators   func(childComplexity int) int
		Insights     func(childComplexity int) int
	}

	CommitConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	CommitEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	CommitFile struct {
		Action    func(childComplexity int) int
		Fix       func(childComplexity int) int
		Fixing    func(childComplexity int) int
		Insights  func(childComplexity int) int
		Language  func(childComplexity int) int
		Metrics   func(childComplexity int) int
		OldPath   func(childComplexity int) int
		Path      func(childComplexity int) int
		Subsystem func(childComplexity int) int
		Type      func(childComplexity int) int
	}

	CountOverTime struct {
		Count func(childComplexity int) int
		Date  func(childComplexity int) int
	}

	CountOverTimeConnection struct {
		Nodes func(childComplexity int) int
	}

	DeleteCommitTagPayload struct {
		Commit func(childComplexity int) int
	}

	DeleteRepositoryPayload struct {
		Repository func(childComplexity int) int
	}

	Developer struct {
		Email func(childComplexity int) int
		Name  func(childComplexity int) int
	}

	Feedback struct {
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Message   func(childComplexity int) int
		Sender    func(childComplexity int) int
		Target    func(childComplexity int) int
	}

	FeedbackConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	FeedbackEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	FileMeasures struct {
		AGE  func(childComplexity int) int
		HA   func(childComplexity int) int
		HD   func(childComplexity int) int
		LA   func(childComplexity int) int
		LD   func(childComplexity int) int
		LT   func(childComplexity int) int
		NDEV func(childComplexity int) int
		NUC  func(childComplexity int) int
	}

	Insight struct {
		Color       func(childComplexity int) int
		Description func(childComplexity int) int
		Icon        func(childComplexity int) int
		Name        func(childComplexity int) int
	}

	Issue struct {
		Bug       func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		Fetched   func(childComplexity int) int
		Id        func(childComplexity int) int
	}

	Job struct {
		CreatedAt func(childComplexity int) int
		Error     func(childComplexity int) int
		ID        func(childComplexity int) int
		Invoker   func(childComplexity int) int
		StatusLog func(childComplexity int) int
	}

	JobConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	JobEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	JobLogEntry struct {
		StartedAt  func(childComplexity int) int
		Status     func(childComplexity int) int
		StatusText func(childComplexity int) int
	}

	MonitorRepositoryPayload struct {
		Repository func(childComplexity int) int
	}

	Mutation struct {
		AddPublicRepository      func(childComplexity int, input model.AddPublicRepositoryInput) int
		DeleteCommitTag          func(childComplexity int, input model.DeleteCommitTagInput) int
		DeleteRepository         func(childComplexity int, id string) int
		MonitorRepository        func(childComplexity int, id string) int
		SendCommitFeedback       func(childComplexity int, input model.SendCommitFeedbackInput) int
		StopRepositoryMonitoring func(childComplexity int, id string) int
		UpdateRepository         func(childComplexity int, input model.UpdateRepositoryInput) int
	}

	Organization struct {
		AvatarURL           func(childComplexity int) int
		CreatedAt           func(childComplexity int) int
		ID                  func(childComplexity int) int
		Owner               func(childComplexity int) int
		ProviderSCM         func(childComplexity int) int
		ProviderSetupURL    func(childComplexity int) int
		Repositories        func(childComplexity int, first *int, after *string, last *int, before *string, direction *entity.OrderDirection) int
		UpdatedAt           func(childComplexity int) int
		ViewerCanAdminister func(childComplexity int) int
	}

	OrganizationConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	OrganizationEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Owner struct {
		ID   func(childComplexity int) int
		Slug func(childComplexity int) int
	}

	PageInfo struct {
		EndCursor       func(childComplexity int) int
		HasNextPage     func(childComplexity int) int
		HasPreviousPage func(childComplexity int) int
		StartCursor     func(childComplexity int) int
	}

	Progress struct {
		Current func(childComplexity int) int
		Status  func(childComplexity int) int
		Total   func(childComplexity int) int
	}

	ProgressEvent struct {
		Progress func(childComplexity int) int
		Target   func(childComplexity int) int
	}

	PullRequest struct {
		Commits   func(childComplexity int, first *int, after *string, last *int, before *string, direction *entity.OrderDirection) int
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Progress  func(childComplexity int) int
		Source    func(childComplexity int) int
		Status    func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	PullRequestConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	PullRequestEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	PullRequestSource struct {
		Base      func(childComplexity int) int
		Body      func(childComplexity int) int
		Closed    func(childComplexity int) int
		ClosedAt  func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		Head      func(childComplexity int) int
		ID        func(childComplexity int) int
		Merged    func(childComplexity int) int
		MergedAt  func(childComplexity int) int
		Number    func(childComplexity int) int
		Title     func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	Query struct {
		Activity      func(childComplexity int) int
		Feedback      func(childComplexity int, first *int, after *string, last *int, before *string, direction *entity.OrderDirection) int
		Node          func(childComplexity int, id string) int
		Organization  func(childComplexity int, provider string, owner string) int
		Organizations func(childComplexity int, first *int, after *string, last *int, before *string, direction *entity.OrderDirection) int
		Repositories  func(childComplexity int, first *int, after *string, last *int, before *string, direction *entity.OrderDirection) int
		Repository    func(childComplexity int, provider string, owner string, name string) int
		Viewer        func(childComplexity int) int
	}

	Repository struct {
		AvgCommitFilesOverTime func(childComplexity int) int
		AvgEntropyOverTime     func(childComplexity int) int
		Branches               func(childComplexity int) int
		BranchesCount          func(childComplexity int) int
		BuggyCommitsCount      func(childComplexity int) int
		BuggyCommitsOverTime   func(childComplexity int) int
		ChecksConfig           func(childComplexity int) int
		CollaboratorsCount     func(childComplexity int) int
		Commit                 func(childComplexity int, hash string) int
		CommitPredictionsCount func(childComplexity int) int
		Commits                func(childComplexity int, first *int, after *string, last *int, before *string, direction *entity.OrderDirection, filters *entity.CommitFilters) int
		CommitsCount           func(childComplexity int) int
		CommitsOverTime        func(childComplexity int) int
		Confidence             func(childComplexity int) int
		ContributorsCount      func(childComplexity int) int
		CreatedAt              func(childComplexity int) int
		DatabaseID             func(childComplexity int) int
		DeveloperEmails        func(childComplexity int) int
		DeveloperNames         func(childComplexity int) int
		FixCommitsCount        func(childComplexity int) int
		ID                     func(childComplexity int) int
		Jobs                   func(childComplexity int, first *int, after *string, last *int, before *string, direction *entity.OrderDirection) int
		MonitorCount           func(childComplexity int) int
		Name                   func(childComplexity int) int
		Owner                  func(childComplexity int) int
		PredictionStatus       func(childComplexity int) int
		Progress               func(childComplexity int) int
		ProviderSCM            func(childComplexity int) int
		PullRequest            func(childComplexity int, number int) int
		PullRequests           func(childComplexity int, first *int, after *string, last *int, before *string, direction *entity.OrderDirection) int
		Source                 func(childComplexity int) int
		Status                 func(childComplexity int) int
		TagsCount              func(childComplexity int) int
		UpdatedAt              func(childComplexity int) int
		ViewerCanAdminister    func(childComplexity int) int
		ViewerIsMonitor        func(childComplexity int) int
	}

	RepositoryConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	RepositoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	RepositorySource struct {
		CreatedAt     func(childComplexity int) int
		DefaultBranch func(childComplexity int) int
		Description   func(childComplexity int) int
		ID            func(childComplexity int) int
		Private       func(childComplexity int) int
		RepoName      func(childComplexity int) int
		URL           func(childComplexity int) int
	}

	Signature struct {
		Email func(childComplexity int) int
		Name  func(childComplexity int) int
		When  func(childComplexity int) int
	}

	StopRepositoryMonitoringPayload struct {
		Repository func(childComplexity int) int
	}

	Subscription struct {
		ChangeProgress func(childComplexity int, ids []string) int
	}

	TagCount struct {
		Count func(childComplexity int) int
		Tag   func(childComplexity int) int
	}

	TagsCountConnection struct {
		Nodes func(childComplexity int) int
	}

	UpdateRepositoryPayload struct {
		Errors     func(childComplexity int) int
		Repository func(childComplexity int) int
	}

	User struct {
		AvatarURL    func(childComplexity int) int
		FirstName    func(childComplexity int) int
		ID           func(childComplexity int) int
		LastName     func(childComplexity int) int
		Providers    func(childComplexity int) int
		Repositories func(childComplexity int, first *int, after *string, last *int, before *string, direction *entity.OrderDirection, ownerAffiliations []entity.RepositoryAffiliation) int
		Role         func(childComplexity int) int
		Username     func(childComplexity int) int
	}

	UserProviderInfo struct {
		AvatarURL func(childComplexity int) int
		FullName  func(childComplexity int) int
		HomePage  func(childComplexity int) int
		ID        func(childComplexity int) int
		Location  func(childComplexity int) int
		Provider  func(childComplexity int) int
		Username  func(childComplexity int) int
	}

	VisitOverTime struct {
		Date     func(childComplexity int) int
		Views    func(childComplexity int) int
		Visitors func(childComplexity int) int
	}

	VisitOverTimeConnection struct {
		Nodes func(childComplexity int) int
	}
}

type ActivityResolver interface {
	RepositoriesTotalCount(ctx context.Context, obj *model.Activity, period *model.Period) (int, error)
	RepositoriesCount(ctx context.Context, obj *model.Activity, period *model.Period, frequency entity.Frequency) (*model.CountOverTimeConnection, error)
	OrganizationsTotalCount(ctx context.Context, obj *model.Activity, period *model.Period) (int, error)
	OrganizationsCount(ctx context.Context, obj *model.Activity, period *model.Period, frequency entity.Frequency) (*model.CountOverTimeConnection, error)
	CommitsAnalyzedTotalCount(ctx context.Context, obj *model.Activity, period *model.Period) (int, error)
	CommitsAnalyzedCount(ctx context.Context, obj *model.Activity, period *model.Period, frequency entity.Frequency) (*model.CountOverTimeConnection, error)
	CommitsPredictTotalCount(ctx context.Context, obj *model.Activity, period *model.Period) (int, error)
	CommitsPredictCount(ctx context.Context, obj *model.Activity, period *model.Period, frequency entity.Frequency) (*model.CountOverTimeConnection, error)
	JobsTotalCount(ctx context.Context, obj *model.Activity, period *model.Period) (int, error)
	JobsCount(ctx context.Context, obj *model.Activity, period *model.Period, frequency entity.Frequency) (*model.CountOverTimeConnection, error)
	PullRequestAnalyzedTotalCount(ctx context.Context, obj *model.Activity, period *model.Period) (int, error)
	PullRequestAnalyzedCount(ctx context.Context, obj *model.Activity, period *model.Period, frequency entity.Frequency) (*model.CountOverTimeConnection, error)
	ViewsTotalCount(ctx context.Context, obj *model.Activity, period *model.Period) (int, error)
	VisitorsTotalCount(ctx context.Context, obj *model.Activity, period *model.Period) (int, error)
	VisitCount(ctx context.Context, obj *model.Activity, period *model.Period, frequency entity.Frequency) (*model.VisitOverTimeConnection, error)
}
type CommitResolver interface {
	Hash(ctx context.Context, obj *entity.Commit) (string, error)

	Tags(ctx context.Context, obj *entity.Commit) ([]string, error)
	DeletedTags(ctx context.Context, obj *entity.Commit) ([]string, error)

	Fixes(ctx context.Context, obj *entity.Commit, first *int, after *string, last *int, before *string, direction *entity.OrderDirection) (entity.CommitConnection, error)

	Repository(ctx context.Context, obj *entity.Commit) (*entity.Repository, error)
}
type CommitFileResolver interface {
	Type(ctx context.Context, obj *entity.File) (*string, error)

	Fixing(ctx context.Context, obj *entity.File) ([]*entity.Commit, error)
}
type FeedbackResolver interface {
	Sender(ctx context.Context, obj *entity.Feedback) (*model.User, error)

	Target(ctx context.Context, obj *entity.Feedback) (*entity.Commit, error)
}
type MutationResolver interface {
	UpdateRepository(ctx context.Context, input model.UpdateRepositoryInput) (*model.UpdateRepositoryPayload, error)
	SendCommitFeedback(ctx context.Context, input model.SendCommitFeedbackInput) (*entity.Feedback, error)
	AddPublicRepository(ctx context.Context, input model.AddPublicRepositoryInput) (*model.AddPublicRepositoryPayload, error)
	StopRepositoryMonitoring(ctx context.Context, id string) (*model.StopRepositoryMonitoringPayload, error)
	MonitorRepository(ctx context.Context, id string) (*model.MonitorRepositoryPayload, error)
	DeleteRepository(ctx context.Context, id string) (*model.DeleteRepositoryPayload, error)
	DeleteCommitTag(ctx context.Context, input model.DeleteCommitTagInput) (*model.DeleteCommitTagPayload, error)
}
type OrganizationResolver interface {
	ProviderSetupURL(ctx context.Context, obj *entity.Organization) (*string, error)
	Repositories(ctx context.Context, obj *entity.Organization, first *int, after *string, last *int, before *string, direction *entity.OrderDirection) (entity.RepositoryConnection, error)
	ViewerCanAdminister(ctx context.Context, obj *entity.Organization) (bool, error)
}
type PullRequestResolver interface {
	Progress(ctx context.Context, obj *entity.PullRequest) (*manage.Progress, error)

	Commits(ctx context.Context, obj *entity.PullRequest, first *int, after *string, last *int, before *string, direction *entity.OrderDirection) (entity.CommitConnection, error)
}
type PullRequestSourceResolver interface {
	Head(ctx context.Context, obj *common.PullRequest) (*entity.Branch, error)
	Base(ctx context.Context, obj *common.PullRequest) (*entity.Branch, error)
}
type QueryResolver interface {
	Viewer(ctx context.Context) (*model.User, error)
	Repository(ctx context.Context, provider string, owner string, name string) (*entity.Repository, error)
	Repositories(ctx context.Context, first *int, after *string, last *int, before *string, direction *entity.OrderDirection) (entity.RepositoryConnection, error)
	Organizations(ctx context.Context, first *int, after *string, last *int, before *string, direction *entity.OrderDirection) (entity.OrganizationConnection, error)
	Organization(ctx context.Context, provider string, owner string) (*entity.Organization, error)
	Node(ctx context.Context, id string) (model.Node, error)
	Activity(ctx context.Context) (*model.Activity, error)
	Feedback(ctx context.Context, first *int, after *string, last *int, before *string, direction *entity.OrderDirection) (entity.FeedbackConnection, error)
}
type RepositoryResolver interface {
	DatabaseID(ctx context.Context, obj *entity.Repository) (string, error)
	Name(ctx context.Context, obj *entity.Repository) (string, error)

	Commit(ctx context.Context, obj *entity.Repository, hash string) (*entity.Commit, error)
	PullRequest(ctx context.Context, obj *entity.Repository, number int) (*entity.PullRequest, error)

	Progress(ctx context.Context, obj *entity.Repository) (*manage.Progress, error)

	ViewerIsMonitor(ctx context.Context, obj *entity.Repository) (bool, error)
	MonitorCount(ctx context.Context, obj *entity.Repository) (int, error)
	Commits(ctx context.Context, obj *entity.Repository, first *int, after *string, last *int, before *string, direction *entity.OrderDirection, filters *entity.CommitFilters) (entity.CommitConnection, error)
	PullRequests(ctx context.Context, obj *entity.Repository, first *int, after *string, last *int, before *string, direction *entity.OrderDirection) (entity.PullRequestConnection, error)
	Jobs(ctx context.Context, obj *entity.Repository, first *int, after *string, last *int, before *string, direction *entity.OrderDirection) (entity.JobConnection, error)
	Branches(ctx context.Context, obj *entity.Repository) ([]*entity.Branch, error)
	DeveloperEmails(ctx context.Context, obj *entity.Repository) ([]string, error)
	DeveloperNames(ctx context.Context, obj *entity.Repository) ([]string, error)

	PredictionStatus(ctx context.Context, obj *entity.Repository) (*int, error)

	CommitPredictionsCount(ctx context.Context, obj *entity.Repository) (*int, error)
	BuggyCommitsCount(ctx context.Context, obj *entity.Repository) (*int, error)
	FixCommitsCount(ctx context.Context, obj *entity.Repository) (*int, error)
	BranchesCount(ctx context.Context, obj *entity.Repository) (*int, error)
	ContributorsCount(ctx context.Context, obj *entity.Repository) (*int, error)

	BuggyCommitsOverTime(ctx context.Context, obj *entity.Repository) (*model.CountOverTimeConnection, error)
	CommitsOverTime(ctx context.Context, obj *entity.Repository) (*model.CountOverTimeConnection, error)
	TagsCount(ctx context.Context, obj *entity.Repository) (*model.TagsCountConnection, error)
	AvgEntropyOverTime(ctx context.Context, obj *entity.Repository) (*model.AvgOverTimeConnection, error)
	AvgCommitFilesOverTime(ctx context.Context, obj *entity.Repository) (*model.AvgOverTimeConnection, error)
	ViewerCanAdminister(ctx context.Context, obj *entity.Repository) (bool, error)
}
type RepositorySourceResolver interface {
	URL(ctx context.Context, obj *common.Repository) (string, error)
}
type SubscriptionResolver interface {
	ChangeProgress(ctx context.Context, ids []string) (<-chan *manage.ProgressObservable, error)
}
type UserResolver interface {
	Repositories(ctx context.Context, obj *model.User, first *int, after *string, last *int, before *string, direction *entity.OrderDirection, ownerAffiliations []entity.RepositoryAffiliation) (entity.RepositoryConnection, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Activity.commitsAnalyzedCount":
		if e.complexity.Activity.CommitsAnalyzedCount == nil {
			break
		}

		args, err := ec.field_Activity_commitsAnalyzedCount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Activity.CommitsAnalyzedCount(childComplexity, args["period"].(*model.Period), args["frequency"].(entity.Frequency)), true

	case "Activity.commitsAnalyzedTotalCount":
		if e.complexity.Activity.CommitsAnalyzedTotalCount == nil {
			break
		}

		args, err := ec.field_Activity_commitsAnalyzedTotalCount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Activity.CommitsAnalyzedTotalCount(childComplexity, args["period"].(*model.Period)), true

	case "Activity.commitsPredictCount":
		if e.complexity.Activity.CommitsPredictCount == nil {
			break
		}

		args, err := ec.field_Activity_commitsPredictCount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Activity.CommitsPredictCount(childComplexity, args["period"].(*model.Period), args["frequency"].(entity.Frequency)), true

	case "Activity.commitsPredictTotalCount":
		if e.complexity.Activity.CommitsPredictTotalCount == nil {
			break
		}

		args, err := ec.field_Activity_commitsPredictTotalCount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Activity.CommitsPredictTotalCount(childComplexity, args["period"].(*model.Period)), true

	case "Activity.jobsCount":
		if e.complexity.Activity.JobsCount == nil {
			break
		}

		args, err := ec.field_Activity_jobsCount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Activity.JobsCount(childComplexity, args["period"].(*model.Period), args["frequency"].(entity.Frequency)), true

	case "Activity.jobsTotalCount":
		if e.complexity.Activity.JobsTotalCount == nil {
			break
		}

		args, err := ec.field_Activity_jobsTotalCount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Activity.JobsTotalCount(childComplexity, args["period"].(*model.Period)), true

	case "Activity.organizationsCount":
		if e.complexity.Activity.OrganizationsCount == nil {
			break
		}

		args, err := ec.field_Activity_organizationsCount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Activity.OrganizationsCount(childComplexity, args["period"].(*model.Period), args["frequency"].(entity.Frequency)), true

	case "Activity.organizationsTotalCount":
		if e.complexity.Activity.OrganizationsTotalCount == nil {
			break
		}

		args, err := ec.field_Activity_organizationsTotalCount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Activity.OrganizationsTotalCount(childComplexity, args["period"].(*model.Period)), true

	case "Activity.pullRequestAnalyzedCount":
		if e.complexity.Activity.PullRequestAnalyzedCount == nil {
			break
		}

		args, err := ec.field_Activity_pullRequestAnalyzedCount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Activity.PullRequestAnalyzedCount(childComplexity, args["period"].(*model.Period), args["frequency"].(entity.Frequency)), true

	case "Activity.pullRequestAnalyzedTotalCount":
		if e.complexity.Activity.PullRequestAnalyzedTotalCount == nil {
			break
		}

		args, err := ec.field_Activity_pullRequestAnalyzedTotalCount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Activity.PullRequestAnalyzedTotalCount(childComplexity, args["period"].(*model.Period)), true

	case "Activity.repositoriesCount":
		if e.complexity.Activity.RepositoriesCount == nil {
			break
		}

		args, err := ec.field_Activity_repositoriesCount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Activity.RepositoriesCount(childComplexity, args["period"].(*model.Period), args["frequency"].(entity.Frequency)), true

	case "Activity.repositoriesTotalCount":
		if e.complexity.Activity.RepositoriesTotalCount == nil {
			break
		}

		args, err := ec.field_Activity_repositoriesTotalCount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Activity.RepositoriesTotalCount(childComplexity, args["period"].(*model.Period)), true

	case "Activity.viewsTotalCount":
		if e.complexity.Activity.ViewsTotalCount == nil {
			break
		}

		args, err := ec.field_Activity_viewsTotalCount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Activity.ViewsTotalCount(childComplexity, args["period"].(*model.Period)), true

	case "Activity.visitCount":
		if e.complexity.Activity.VisitCount == nil {
			break
		}

		args, err := ec.field_Activity_visitCount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Activity.VisitCount(childComplexity, args["period"].(*model.Period), args["frequency"].(entity.Frequency)), true

	case "Activity.visitorsTotalCount":
		if e.complexity.Activity.VisitorsTotalCount == nil {
			break
		}

		args, err := ec.field_Activity_visitorsTotalCount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Activity.VisitorsTotalCount(childComplexity, args["period"].(*model.Period)), true

	case "AddPublicRepositoryPayload.errors":
		if e.complexity.AddPublicRepositoryPayload.Errors == nil {
			break
		}

		return e.complexity.AddPublicRepositoryPayload.Errors(childComplexity), true

	case "AddPublicRepositoryPayload.repository":
		if e.complexity.AddPublicRepositoryPayload.Repository == nil {
			break
		}

		return e.complexity.AddPublicRepositoryPayload.Repository(childComplexity), true

	case "AvgOverTime.avg":
		if e.complexity.AvgOverTime.Avg == nil {
			break
		}

		return e.complexity.AvgOverTime.Avg(childComplexity), true

	case "AvgOverTime.date":
		if e.complexity.AvgOverTime.Date == nil {
			break
		}

		return e.complexity.AvgOverTime.Date(childComplexity), true

	case "AvgOverTimeConnection.nodes":
		if e.complexity.AvgOverTimeConnection.Nodes == nil {
			break
		}

		return e.complexity.AvgOverTimeConnection.Nodes(childComplexity), true

	case "Branch.cloneURL":
		if e.complexity.Branch.CloneURL == nil {
			break
		}

		return e.complexity.Branch.CloneURL(childComplexity), true

	case "Branch.name":
		if e.complexity.Branch.Name == nil {
			break
		}

		return e.complexity.Branch.Name(childComplexity), true

	case "Branch.sha":
		if e.complexity.Branch.SHA == nil {
			break
		}

		return e.complexity.Branch.SHA(childComplexity), true

	case "BugIndicators.diffusion":
		if e.complexity.BugIndicators.Diffusion == nil {
			break
		}

		return e.complexity.BugIndicators.Diffusion(childComplexity), true

	case "BugIndicators.experience":
		if e.complexity.BugIndicators.Experience == nil {
			break
		}

		return e.complexity.BugIndicators.Experience(childComplexity), true

	case "BugIndicators.history":
		if e.complexity.BugIndicators.History == nil {
			break
		}

		return e.complexity.BugIndicators.History(childComplexity), true

	case "BugIndicators.size":
		if e.complexity.BugIndicators.Size == nil {
			break
		}

		return e.complexity.BugIndicators.Size(childComplexity), true

	case "ChangeMeasures.age":
		if e.complexity.ChangeMeasures.AGE == nil {
			break
		}

		return e.complexity.ChangeMeasures.AGE(childComplexity), true

	case "ChangeMeasures.exp":
		if e.complexity.ChangeMeasures.EXP == nil {
			break
		}

		return e.complexity.ChangeMeasures.EXP(childComplexity), true

	case "ChangeMeasures.entropy":
		if e.complexity.ChangeMeasures.Entropy == nil {
			break
		}

		return e.complexity.ChangeMeasures.Entropy(childComplexity), true

	case "ChangeMeasures.ha":
		if e.complexity.ChangeMeasures.HA == nil {
			break
		}

		return e.complexity.ChangeMeasures.HA(childComplexity), true

	case "ChangeMeasures.hd":
		if e.complexity.ChangeMeasures.HD == nil {
			break
		}

		return e.complexity.ChangeMeasures.HD(childComplexity), true

	case "ChangeMeasures.la":
		if e.complexity.ChangeMeasures.LA == nil {
			break
		}

		return e.complexity.ChangeMeasures.LA(childComplexity), true

	case "ChangeMeasures.ld":
		if e.complexity.ChangeMeasures.LD == nil {
			break
		}

		return e.complexity.ChangeMeasures.LD(childComplexity), true

	case "ChangeMeasures.lt":
		if e.complexity.ChangeMeasures.LT == nil {
			break
		}

		return e.complexity.ChangeMeasures.LT(childComplexity), true

	case "ChangeMeasures.nd":
		if e.complexity.ChangeMeasures.ND == nil {
			break
		}

		return e.complexity.ChangeMeasures.ND(childComplexity), true

	case "ChangeMeasures.ndev":
		if e.complexity.ChangeMeasures.NDEV == nil {
			break
		}

		return e.complexity.ChangeMeasures.NDEV(childComplexity), true

	case "ChangeMeasures.nf":
		if e.complexity.ChangeMeasures.NF == nil {
			break
		}

		return e.complexity.ChangeMeasures.NF(childComplexity), true

	case "ChangeMeasures.ns":
		if e.complexity.ChangeMeasures.NS == nil {
			break
		}

		return e.complexity.ChangeMeasures.NS(childComplexity), true

	case "ChangeMeasures.nuc":
		if e.complexity.ChangeMeasures.NUC == nil {
			break
		}

		return e.complexity.ChangeMeasures.NUC(childComplexity), true

	case "ChangeMeasures.rexp":
		if e.complexity.ChangeMeasures.REXP == nil {
			break
		}

		return e.complexity.ChangeMeasures.REXP(childComplexity), true

	case "ChangeMeasures.sexp":
		if e.complexity.ChangeMeasures.SEXP == nil {
			break
		}

		return e.complexity.ChangeMeasures.SEXP(childComplexity), true

	case "ChecksConfig.enable":
		if e.complexity.ChecksConfig.Enable == nil {
			break
		}

		return e.complexity.ChecksConfig.Enable(childComplexity), true

	case "Commit.analysis":
		if e.complexity.Commit.Analysis == nil {
			break
		}

		return e.complexity.Commit.Analysis(childComplexity), true

	case "Commit.author":
		if e.complexity.Commit.Author == nil {
			break
		}

		return e.complexity.Commit.Author(childComplexity), true

	case "Commit.deletedTags":
		if e.complexity.Commit.DeletedTags == nil {
			break
		}

		return e.complexity.Commit.DeletedTags(childComplexity), true

	case "Commit.files":
		if e.complexity.Commit.Files == nil {
			break
		}

		return e.complexity.Commit.Files(childComplexity), true

	case "Commit.fix":
		if e.complexity.Commit.Fix == nil {
			break
		}

		return e.complexity.Commit.Fix(childComplexity), true

	case "Commit.fixed":
		if e.complexity.Commit.Fixed == nil {
			break
		}

		return e.complexity.Commit.Fixed(childComplexity), true

	case "Commit.fixes":
		if e.complexity.Commit.Fixes == nil {
			break
		}

		args, err := ec.field_Commit_fixes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Commit.Fixes(childComplexity, args["first"].(*int), args["after"].(*string), args["last"].(*int), args["before"].(*string), args["direction"].(*entity.OrderDirection)), true

	case "Commit.hash":
		if e.complexity.Commit.Hash == nil {
			break
		}

		return e.complexity.Commit.Hash(childComplexity), true

	case "Commit.id":
		if e.complexity.Commit.ID == nil {
			break
		}

		return e.complexity.Commit.ID(childComplexity), true

	case "Commit.issues":
		if e.complexity.Commit.Issues == nil {
			break
		}

		return e.complexity.Commit.Issues(childComplexity), true

	case "Commit.message":
		if e.complexity.Commit.Message == nil {
			break
		}

		return e.complexity.Commit.Message(childComplexity), true

	case "Commit.metrics":
		if e.complexity.Commit.Metrics == nil {
			break
		}

		return e.complexity.Commit.Metrics(childComplexity), true

	case "Commit.repository":
		if e.complexity.Commit.Repository == nil {
			break
		}

		return e.complexity.Commit.Repository(childComplexity), true

	case "Commit.tags":
		if e.complexity.Commit.Tags == nil {
			break
		}

		return e.complexity.Commit.Tags(childComplexity), true

	case "CommitAnalysis.bugPotential":
		if e.complexity.CommitAnalysis.BugPotential == nil {
			break
		}

		return e.complexity.CommitAnalysis.BugPotential(childComplexity), true

	case "CommitAnalysis.indicators":
		if e.complexity.CommitAnalysis.Indicators == nil {
			break
		}

		return e.complexity.CommitAnalysis.Indicators(childComplexity), true

	case "CommitAnalysis.insights":
		if e.complexity.CommitAnalysis.Insights == nil {
			break
		}

		return e.complexity.CommitAnalysis.Insights(childComplexity), true

	case "CommitConnection.edges":
		if e.complexity.CommitConnection.Edges == nil {
			break
		}

		return e.complexity.CommitConnection.Edges(childComplexity), true

	case "CommitConnection.nodes":
		if e.complexity.CommitConnection.Nodes == nil {
			break
		}

		return e.complexity.CommitConnection.Nodes(childComplexity), true

	case "CommitConnection.pageInfo":
		if e.complexity.CommitConnection.PageInfo == nil {
			break
		}

		return e.complexity.CommitConnection.PageInfo(childComplexity), true

	case "CommitConnection.totalCount":
		if e.complexity.CommitConnection.TotalCount == nil {
			break
		}

		return e.complexity.CommitConnection.TotalCount(childComplexity), true

	case "CommitEdge.cursor":
		if e.complexity.CommitEdge.Cursor == nil {
			break
		}

		return e.complexity.CommitEdge.Cursor(childComplexity), true

	case "CommitEdge.node":
		if e.complexity.CommitEdge.Node == nil {
			break
		}

		return e.complexity.CommitEdge.Node(childComplexity), true

	case "CommitFile.action":
		if e.complexity.CommitFile.Action == nil {
			break
		}

		return e.complexity.CommitFile.Action(childComplexity), true

	case "CommitFile.fix":
		if e.complexity.CommitFile.Fix == nil {
			break
		}

		return e.complexity.CommitFile.Fix(childComplexity), true

	case "CommitFile.fixing":
		if e.complexity.CommitFile.Fixing == nil {
			break
		}

		return e.complexity.CommitFile.Fixing(childComplexity), true

	case "CommitFile.insights":
		if e.complexity.CommitFile.Insights == nil {
			break
		}

		return e.complexity.CommitFile.Insights(childComplexity), true

	case "CommitFile.language":
		if e.complexity.CommitFile.Language == nil {
			break
		}

		return e.complexity.CommitFile.Language(childComplexity), true

	case "CommitFile.metrics":
		if e.complexity.CommitFile.Metrics == nil {
			break
		}

		return e.complexity.CommitFile.Metrics(childComplexity), true

	case "CommitFile.oldPath":
		if e.complexity.CommitFile.OldPath == nil {
			break
		}

		return e.complexity.CommitFile.OldPath(childComplexity), true

	case "CommitFile.path":
		if e.complexity.CommitFile.Path == nil {
			break
		}

		return e.complexity.CommitFile.Path(childComplexity), true

	case "CommitFile.subsystem":
		if e.complexity.CommitFile.Subsystem == nil {
			break
		}

		return e.complexity.CommitFile.Subsystem(childComplexity), true

	case "CommitFile.type":
		if e.complexity.CommitFile.Type == nil {
			break
		}

		return e.complexity.CommitFile.Type(childComplexity), true

	case "CountOverTime.count":
		if e.complexity.CountOverTime.Count == nil {
			break
		}

		return e.complexity.CountOverTime.Count(childComplexity), true

	case "CountOverTime.date":
		if e.complexity.CountOverTime.Date == nil {
			break
		}

		return e.complexity.CountOverTime.Date(childComplexity), true

	case "CountOverTimeConnection.nodes":
		if e.complexity.CountOverTimeConnection.Nodes == nil {
			break
		}

		return e.complexity.CountOverTimeConnection.Nodes(childComplexity), true

	case "DeleteCommitTagPayload.commit":
		if e.complexity.DeleteCommitTagPayload.Commit == nil {
			break
		}

		return e.complexity.DeleteCommitTagPayload.Commit(childComplexity), true

	case "DeleteRepositoryPayload.repository":
		if e.complexity.DeleteRepositoryPayload.Repository == nil {
			break
		}

		return e.complexity.DeleteRepositoryPayload.Repository(childComplexity), true

	case "Developer.email":
		if e.complexity.Developer.Email == nil {
			break
		}

		return e.complexity.Developer.Email(childComplexity), true

	case "Developer.name":
		if e.complexity.Developer.Name == nil {
			break
		}

		return e.complexity.Developer.Name(childComplexity), true

	case "Feedback.createdAt":
		if e.complexity.Feedback.CreatedAt == nil {
			break
		}

		return e.complexity.Feedback.CreatedAt(childComplexity), true

	case "Feedback.id":
		if e.complexity.Feedback.ID == nil {
			break
		}

		return e.complexity.Feedback.ID(childComplexity), true

	case "Feedback.message":
		if e.complexity.Feedback.Message == nil {
			break
		}

		return e.complexity.Feedback.Message(childComplexity), true

	case "Feedback.sender":
		if e.complexity.Feedback.Sender == nil {
			break
		}

		return e.complexity.Feedback.Sender(childComplexity), true

	case "Feedback.target":
		if e.complexity.Feedback.Target == nil {
			break
		}

		return e.complexity.Feedback.Target(childComplexity), true

	case "FeedbackConnection.edges":
		if e.complexity.FeedbackConnection.Edges == nil {
			break
		}

		return e.complexity.FeedbackConnection.Edges(childComplexity), true

	case "FeedbackConnection.nodes":
		if e.complexity.FeedbackConnection.Nodes == nil {
			break
		}

		return e.complexity.FeedbackConnection.Nodes(childComplexity), true

	case "FeedbackConnection.pageInfo":
		if e.complexity.FeedbackConnection.PageInfo == nil {
			break
		}

		return e.complexity.FeedbackConnection.PageInfo(childComplexity), true

	case "FeedbackConnection.totalCount":
		if e.complexity.FeedbackConnection.TotalCount == nil {
			break
		}

		return e.complexity.FeedbackConnection.TotalCount(childComplexity), true

	case "FeedbackEdge.cursor":
		if e.complexity.FeedbackEdge.Cursor == nil {
			break
		}

		return e.complexity.FeedbackEdge.Cursor(childComplexity), true

	case "FeedbackEdge.node":
		if e.complexity.FeedbackEdge.Node == nil {
			break
		}

		return e.complexity.FeedbackEdge.Node(childComplexity), true

	case "FileMeasures.age":
		if e.complexity.FileMeasures.AGE == nil {
			break
		}

		return e.complexity.FileMeasures.AGE(childComplexity), true

	case "FileMeasures.ha":
		if e.complexity.FileMeasures.HA == nil {
			break
		}

		return e.complexity.FileMeasures.HA(childComplexity), true

	case "FileMeasures.hd":
		if e.complexity.FileMeasures.HD == nil {
			break
		}

		return e.complexity.FileMeasures.HD(childComplexity), true

	case "FileMeasures.la":
		if e.complexity.FileMeasures.LA == nil {
			break
		}

		return e.complexity.FileMeasures.LA(childComplexity), true

	case "FileMeasures.ld":
		if e.complexity.FileMeasures.LD == nil {
			break
		}

		return e.complexity.FileMeasures.LD(childComplexity), true

	case "FileMeasures.lt":
		if e.complexity.FileMeasures.LT == nil {
			break
		}

		return e.complexity.FileMeasures.LT(childComplexity), true

	case "FileMeasures.ndev":
		if e.complexity.FileMeasures.NDEV == nil {
			break
		}

		return e.complexity.FileMeasures.NDEV(childComplexity), true

	case "FileMeasures.nuc":
		if e.complexity.FileMeasures.NUC == nil {
			break
		}

		return e.complexity.FileMeasures.NUC(childComplexity), true

	case "Insight.color":
		if e.complexity.Insight.Color == nil {
			break
		}

		return e.complexity.Insight.Color(childComplexity), true

	case "Insight.description":
		if e.complexity.Insight.Description == nil {
			break
		}

		return e.complexity.Insight.Description(childComplexity), true

	case "Insight.icon":
		if e.complexity.Insight.Icon == nil {
			break
		}

		return e.complexity.Insight.Icon(childComplexity), true

	case "Insight.name":
		if e.complexity.Insight.Name == nil {
			break
		}

		return e.complexity.Insight.Name(childComplexity), true

	case "Issue.bug":
		if e.complexity.Issue.Bug == nil {
			break
		}

		return e.complexity.Issue.Bug(childComplexity), true

	case "Issue.createdAt":
		if e.complexity.Issue.CreatedAt == nil {
			break
		}

		return e.complexity.Issue.CreatedAt(childComplexity), true

	case "Issue.fetched":
		if e.complexity.Issue.Fetched == nil {
			break
		}

		return e.complexity.Issue.Fetched(childComplexity), true

	case "Issue.id":
		if e.complexity.Issue.Id == nil {
			break
		}

		return e.complexity.Issue.Id(childComplexity), true

	case "Job.createdAt":
		if e.complexity.Job.CreatedAt == nil {
			break
		}

		return e.complexity.Job.CreatedAt(childComplexity), true

	case "Job.error":
		if e.complexity.Job.Error == nil {
			break
		}

		return e.complexity.Job.Error(childComplexity), true

	case "Job.id":
		if e.complexity.Job.ID == nil {
			break
		}

		return e.complexity.Job.ID(childComplexity), true

	case "Job.invoker":
		if e.complexity.Job.Invoker == nil {
			break
		}

		return e.complexity.Job.Invoker(childComplexity), true

	case "Job.statusLog":
		if e.complexity.Job.StatusLog == nil {
			break
		}

		return e.complexity.Job.StatusLog(childComplexity), true

	case "JobConnection.edges":
		if e.complexity.JobConnection.Edges == nil {
			break
		}

		return e.complexity.JobConnection.Edges(childComplexity), true

	case "JobConnection.nodes":
		if e.complexity.JobConnection.Nodes == nil {
			break
		}

		return e.complexity.JobConnection.Nodes(childComplexity), true

	case "JobConnection.pageInfo":
		if e.complexity.JobConnection.PageInfo == nil {
			break
		}

		return e.complexity.JobConnection.PageInfo(childComplexity), true

	case "JobConnection.totalCount":
		if e.complexity.JobConnection.TotalCount == nil {
			break
		}

		return e.complexity.JobConnection.TotalCount(childComplexity), true

	case "JobEdge.cursor":
		if e.complexity.JobEdge.Cursor == nil {
			break
		}

		return e.complexity.JobEdge.Cursor(childComplexity), true

	case "JobEdge.node":
		if e.complexity.JobEdge.Node == nil {
			break
		}

		return e.complexity.JobEdge.Node(childComplexity), true

	case "JobLogEntry.startedAt":
		if e.complexity.JobLogEntry.StartedAt == nil {
			break
		}

		return e.complexity.JobLogEntry.StartedAt(childComplexity), true

	case "JobLogEntry.status":
		if e.complexity.JobLogEntry.Status == nil {
			break
		}

		return e.complexity.JobLogEntry.Status(childComplexity), true

	case "JobLogEntry.statusText":
		if e.complexity.JobLogEntry.StatusText == nil {
			break
		}

		return e.complexity.JobLogEntry.StatusText(childComplexity), true

	case "MonitorRepositoryPayload.repository":
		if e.complexity.MonitorRepositoryPayload.Repository == nil {
			break
		}

		return e.complexity.MonitorRepositoryPayload.Repository(childComplexity), true

	case "Mutation.addPublicRepository":
		if e.complexity.Mutation.AddPublicRepository == nil {
			break
		}

		args, err := ec.field_Mutation_addPublicRepository_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddPublicRepository(childComplexity, args["input"].(model.AddPublicRepositoryInput)), true

	case "Mutation.deleteCommitTag":
		if e.complexity.Mutation.DeleteCommitTag == nil {
			break
		}

		args, err := ec.field_Mutation_deleteCommitTag_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteCommitTag(childComplexity, args["input"].(model.DeleteCommitTagInput)), true

	case "Mutation.deleteRepository":
		if e.complexity.Mutation.DeleteRepository == nil {
			break
		}

		args, err := ec.field_Mutation_deleteRepository_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRepository(childComplexity, args["id"].(string)), true

	case "Mutation.monitorRepository":
		if e.complexity.Mutation.MonitorRepository == nil {
			break
		}

		args, err := ec.field_Mutation_monitorRepository_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.MonitorRepository(childComplexity, args["id"].(string)), true

	case "Mutation.sendCommitFeedback":
		if e.complexity.Mutation.SendCommitFeedback == nil {
			break
		}

		args, err := ec.field_Mutation_sendCommitFeedback_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SendCommitFeedback(childComplexity, args["input"].(model.SendCommitFeedbackInput)), true

	case "Mutation.stopRepositoryMonitoring":
		if e.complexity.Mutation.StopRepositoryMonitoring == nil {
			break
		}

		args, err := ec.field_Mutation_stopRepositoryMonitoring_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.StopRepositoryMonitoring(childComplexity, args["id"].(string)), true

	case "Mutation.updateRepository":
		if e.complexity.Mutation.UpdateRepository == nil {
			break
		}

		args, err := ec.field_Mutation_updateRepository_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRepository(childComplexity, args["input"].(model.UpdateRepositoryInput)), true

	case "Organization.avatarURL":
		if e.complexity.Organization.AvatarURL == nil {
			break
		}

		return e.complexity.Organization.AvatarURL(childComplexity), true

	case "Organization.createdAt":
		if e.complexity.Organization.CreatedAt == nil {
			break
		}

		return e.complexity.Organization.CreatedAt(childComplexity), true

	case "Organization.id":
		if e.complexity.Organization.ID == nil {
			break
		}

		return e.complexity.Organization.ID(childComplexity), true

	case "Organization.owner":
		if e.complexity.Organization.Owner == nil {
			break
		}

		return e.complexity.Organization.Owner(childComplexity), true

	case "Organization.providerSCM":
		if e.complexity.Organization.ProviderSCM == nil {
			break
		}

		return e.complexity.Organization.ProviderSCM(childComplexity), true

	case "Organization.providerSetupURL":
		if e.complexity.Organization.ProviderSetupURL == nil {
			break
		}

		return e.complexity.Organization.ProviderSetupURL(childComplexity), true

	case "Organization.repositories":
		if e.complexity.Organization.Repositories == nil {
			break
		}

		args, err := ec.field_Organization_repositories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.Repositories(childComplexity, args["first"].(*int), args["after"].(*string), args["last"].(*int), args["before"].(*string), args["direction"].(*entity.OrderDirection)), true

	case "Organization.updatedAt":
		if e.complexity.Organization.UpdatedAt == nil {
			break
		}

		return e.complexity.Organization.UpdatedAt(childComplexity), true

	case "Organization.viewerCanAdminister":
		if e.complexity.Organization.ViewerCanAdminister == nil {
			break
		}

		return e.complexity.Organization.ViewerCanAdminister(childComplexity), true

	case "OrganizationConnection.edges":
		if e.complexity.OrganizationConnection.Edges == nil {
			break
		}

		return e.complexity.OrganizationConnection.Edges(childComplexity), true

	case "OrganizationConnection.nodes":
		if e.complexity.OrganizationConnection.Nodes == nil {
			break
		}

		return e.complexity.OrganizationConnection.Nodes(childComplexity), true

	case "OrganizationConnection.pageInfo":
		if e.complexity.OrganizationConnection.PageInfo == nil {
			break
		}

		return e.complexity.OrganizationConnection.PageInfo(childComplexity), true

	case "OrganizationConnection.totalCount":
		if e.complexity.OrganizationConnection.TotalCount == nil {
			break
		}

		return e.complexity.OrganizationConnection.TotalCount(childComplexity), true

	case "OrganizationEdge.cursor":
		if e.complexity.OrganizationEdge.Cursor == nil {
			break
		}

		return e.complexity.OrganizationEdge.Cursor(childComplexity), true

	case "OrganizationEdge.node":
		if e.complexity.OrganizationEdge.Node == nil {
			break
		}

		return e.complexity.OrganizationEdge.Node(childComplexity), true

	case "Owner.id":
		if e.complexity.Owner.ID == nil {
			break
		}

		return e.complexity.Owner.ID(childComplexity), true

	case "Owner.slug":
		if e.complexity.Owner.Slug == nil {
			break
		}

		return e.complexity.Owner.Slug(childComplexity), true

	case "PageInfo.endCursor":
		if e.complexity.PageInfo.EndCursor == nil {
			break
		}

		return e.complexity.PageInfo.EndCursor(childComplexity), true

	case "PageInfo.hasNextPage":
		if e.complexity.PageInfo.HasNextPage == nil {
			break
		}

		return e.complexity.PageInfo.HasNextPage(childComplexity), true

	case "PageInfo.hasPreviousPage":
		if e.complexity.PageInfo.HasPreviousPage == nil {
			break
		}

		return e.complexity.PageInfo.HasPreviousPage(childComplexity), true

	case "PageInfo.startCursor":
		if e.complexity.PageInfo.StartCursor == nil {
			break
		}

		return e.complexity.PageInfo.StartCursor(childComplexity), true

	case "Progress.current":
		if e.complexity.Progress.Current == nil {
			break
		}

		return e.complexity.Progress.Current(childComplexity), true

	case "Progress.status":
		if e.complexity.Progress.Status == nil {
			break
		}

		return e.complexity.Progress.Status(childComplexity), true

	case "Progress.total":
		if e.complexity.Progress.Total == nil {
			break
		}

		return e.complexity.Progress.Total(childComplexity), true

	case "ProgressEvent.progress":
		if e.complexity.ProgressEvent.Progress == nil {
			break
		}

		return e.complexity.ProgressEvent.Progress(childComplexity), true

	case "ProgressEvent.target":
		if e.complexity.ProgressEvent.Target == nil {
			break
		}

		return e.complexity.ProgressEvent.Target(childComplexity), true

	case "PullRequest.commits":
		if e.complexity.PullRequest.Commits == nil {
			break
		}

		args, err := ec.field_PullRequest_commits_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.PullRequest.Commits(childComplexity, args["first"].(*int), args["after"].(*string), args["last"].(*int), args["before"].(*string), args["direction"].(*entity.OrderDirection)), true

	case "PullRequest.createdAt":
		if e.complexity.PullRequest.CreatedAt == nil {
			break
		}

		return e.complexity.PullRequest.CreatedAt(childComplexity), true

	case "PullRequest.id":
		if e.complexity.PullRequest.ID == nil {
			break
		}

		return e.complexity.PullRequest.ID(childComplexity), true

	case "PullRequest.progress":
		if e.complexity.PullRequest.Progress == nil {
			break
		}

		return e.complexity.PullRequest.Progress(childComplexity), true

	case "PullRequest.source":
		if e.complexity.PullRequest.Source == nil {
			break
		}

		return e.complexity.PullRequest.Source(childComplexity), true

	case "PullRequest.status":
		if e.complexity.PullRequest.Status == nil {
			break
		}

		return e.complexity.PullRequest.Status(childComplexity), true

	case "PullRequest.updatedAt":
		if e.complexity.PullRequest.UpdatedAt == nil {
			break
		}

		return e.complexity.PullRequest.UpdatedAt(childComplexity), true

	case "PullRequestConnection.edges":
		if e.complexity.PullRequestConnection.Edges == nil {
			break
		}

		return e.complexity.PullRequestConnection.Edges(childComplexity), true

	case "PullRequestConnection.nodes":
		if e.complexity.PullRequestConnection.Nodes == nil {
			break
		}

		return e.complexity.PullRequestConnection.Nodes(childComplexity), true

	case "PullRequestConnection.pageInfo":
		if e.complexity.PullRequestConnection.PageInfo == nil {
			break
		}

		return e.complexity.PullRequestConnection.PageInfo(childComplexity), true

	case "PullRequestConnection.totalCount":
		if e.complexity.PullRequestConnection.TotalCount == nil {
			break
		}

		return e.complexity.PullRequestConnection.TotalCount(childComplexity), true

	case "PullRequestEdge.cursor":
		if e.complexity.PullRequestEdge.Cursor == nil {
			break
		}

		return e.complexity.PullRequestEdge.Cursor(childComplexity), true

	case "PullRequestEdge.node":
		if e.complexity.PullRequestEdge.Node == nil {
			break
		}

		return e.complexity.PullRequestEdge.Node(childComplexity), true

	case "PullRequestSource.base":
		if e.complexity.PullRequestSource.Base == nil {
			break
		}

		return e.complexity.PullRequestSource.Base(childComplexity), true

	case "PullRequestSource.body":
		if e.complexity.PullRequestSource.Body == nil {
			break
		}

		return e.complexity.PullRequestSource.Body(childComplexity), true

	case "PullRequestSource.closed":
		if e.complexity.PullRequestSource.Closed == nil {
			break
		}

		return e.complexity.PullRequestSource.Closed(childComplexity), true

	case "PullRequestSource.closedAt":
		if e.complexity.PullRequestSource.ClosedAt == nil {
			break
		}

		return e.complexity.PullRequestSource.ClosedAt(childComplexity), true

	case "PullRequestSource.createdAt":
		if e.complexity.PullRequestSource.CreatedAt == nil {
			break
		}

		return e.complexity.PullRequestSource.CreatedAt(childComplexity), true

	case "PullRequestSource.head":
		if e.complexity.PullRequestSource.Head == nil {
			break
		}

		return e.complexity.PullRequestSource.Head(childComplexity), true

	case "PullRequestSource.id":
		if e.complexity.PullRequestSource.ID == nil {
			break
		}

		return e.complexity.PullRequestSource.ID(childComplexity), true

	case "PullRequestSource.merged":
		if e.complexity.PullRequestSource.Merged == nil {
			break
		}

		return e.complexity.PullRequestSource.Merged(childComplexity), true

	case "PullRequestSource.mergedAt":
		if e.complexity.PullRequestSource.MergedAt == nil {
			break
		}

		return e.complexity.PullRequestSource.MergedAt(childComplexity), true

	case "PullRequestSource.number":
		if e.complexity.PullRequestSource.Number == nil {
			break
		}

		return e.complexity.PullRequestSource.Number(childComplexity), true

	case "PullRequestSource.title":
		if e.complexity.PullRequestSource.Title == nil {
			break
		}

		return e.complexity.PullRequestSource.Title(childComplexity), true

	case "PullRequestSource.updatedAt":
		if e.complexity.PullRequestSource.UpdatedAt == nil {
			break
		}

		return e.complexity.PullRequestSource.UpdatedAt(childComplexity), true

	case "Query.activity":
		if e.complexity.Query.Activity == nil {
			break
		}

		return e.complexity.Query.Activity(childComplexity), true

	case "Query.feedback":
		if e.complexity.Query.Feedback == nil {
			break
		}

		args, err := ec.field_Query_feedback_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Feedback(childComplexity, args["first"].(*int), args["after"].(*string), args["last"].(*int), args["before"].(*string), args["direction"].(*entity.OrderDirection)), true

	case "Query.node":
		if e.complexity.Query.Node == nil {
			break
		}

		args, err := ec.field_Query_node_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Node(childComplexity, args["id"].(string)), true

	case "Query.organization":
		if e.complexity.Query.Organization == nil {
			break
		}

		args, err := ec.field_Query_organization_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Organization(childComplexity, args["provider"].(string), args["owner"].(string)), true

	case "Query.organizations":
		if e.complexity.Query.Organizations == nil {
			break
		}

		args, err := ec.field_Query_organizations_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Organizations(childComplexity, args["first"].(*int), args["after"].(*string), args["last"].(*int), args["before"].(*string), args["direction"].(*entity.OrderDirection)), true

	case "Query.repositories":
		if e.complexity.Query.Repositories == nil {
			break
		}

		args, err := ec.field_Query_repositories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Repositories(childComplexity, args["first"].(*int), args["after"].(*string), args["last"].(*int), args["before"].(*string), args["direction"].(*entity.OrderDirection)), true

	case "Query.repository":
		if e.complexity.Query.Repository == nil {
			break
		}

		args, err := ec.field_Query_repository_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Repository(childComplexity, args["provider"].(string), args["owner"].(string), args["name"].(string)), true

	case "Query.viewer":
		if e.complexity.Query.Viewer == nil {
			break
		}

		return e.complexity.Query.Viewer(childComplexity), true

	case "Repository.avgCommitFilesOverTime":
		if e.complexity.Repository.AvgCommitFilesOverTime == nil {
			break
		}

		return e.complexity.Repository.AvgCommitFilesOverTime(childComplexity), true

	case "Repository.avgEntropyOverTime":
		if e.complexity.Repository.AvgEntropyOverTime == nil {
			break
		}

		return e.complexity.Repository.AvgEntropyOverTime(childComplexity), true

	case "Repository.branches":
		if e.complexity.Repository.Branches == nil {
			break
		}

		return e.complexity.Repository.Branches(childComplexity), true

	case "Repository.branchesCount":
		if e.complexity.Repository.BranchesCount == nil {
			break
		}

		return e.complexity.Repository.BranchesCount(childComplexity), true

	case "Repository.buggyCommitsCount":
		if e.complexity.Repository.BuggyCommitsCount == nil {
			break
		}

		return e.complexity.Repository.BuggyCommitsCount(childComplexity), true

	case "Repository.buggyCommitsOverTime":
		if e.complexity.Repository.BuggyCommitsOverTime == nil {
			break
		}

		return e.complexity.Repository.BuggyCommitsOverTime(childComplexity), true

	case "Repository.checksConfig":
		if e.complexity.Repository.ChecksConfig == nil {
			break
		}

		return e.complexity.Repository.ChecksConfig(childComplexity), true

	case "Repository.collaboratorsCount":
		if e.complexity.Repository.CollaboratorsCount == nil {
			break
		}

		return e.complexity.Repository.CollaboratorsCount(childComplexity), true

	case "Repository.commit":
		if e.complexity.Repository.Commit == nil {
			break
		}

		args, err := ec.field_Repository_commit_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Repository.Commit(childComplexity, args["hash"].(string)), true

	case "Repository.commitPredictionsCount":
		if e.complexity.Repository.CommitPredictionsCount == nil {
			break
		}

		return e.complexity.Repository.CommitPredictionsCount(childComplexity), true

	case "Repository.commits":
		if e.complexity.Repository.Commits == nil {
			break
		}

		args, err := ec.field_Repository_commits_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Repository.Commits(childComplexity, args["first"].(*int), args["after"].(*string), args["last"].(*int), args["before"].(*string), args["direction"].(*entity.OrderDirection), args["filters"].(*entity.CommitFilters)), true

	case "Repository.commitsCount":
		if e.complexity.Repository.CommitsCount == nil {
			break
		}

		return e.complexity.Repository.CommitsCount(childComplexity), true

	case "Repository.commitsOverTime":
		if e.complexity.Repository.CommitsOverTime == nil {
			break
		}

		return e.complexity.Repository.CommitsOverTime(childComplexity), true

	case "Repository.Confidence":
		if e.complexity.Repository.Confidence == nil {
			break
		}

		return e.complexity.Repository.Confidence(childComplexity), true

	case "Repository.contributorsCount":
		if e.complexity.Repository.ContributorsCount == nil {
			break
		}

		return e.complexity.Repository.ContributorsCount(childComplexity), true

	case "Repository.createdAt":
		if e.complexity.Repository.CreatedAt == nil {
			break
		}

		return e.complexity.Repository.CreatedAt(childComplexity), true

	case "Repository.databaseId":
		if e.complexity.Repository.DatabaseID == nil {
			break
		}

		return e.complexity.Repository.DatabaseID(childComplexity), true

	case "Repository.developerEmails":
		if e.complexity.Repository.DeveloperEmails == nil {
			break
		}

		return e.complexity.Repository.DeveloperEmails(childComplexity), true

	case "Repository.developerNames":
		if e.complexity.Repository.DeveloperNames == nil {
			break
		}

		return e.complexity.Repository.DeveloperNames(childComplexity), true

	case "Repository.fixCommitsCount":
		if e.complexity.Repository.FixCommitsCount == nil {
			break
		}

		return e.complexity.Repository.FixCommitsCount(childComplexity), true

	case "Repository.id":
		if e.complexity.Repository.ID == nil {
			break
		}

		return e.complexity.Repository.ID(childComplexity), true

	case "Repository.jobs":
		if e.complexity.Repository.Jobs == nil {
			break
		}

		args, err := ec.field_Repository_jobs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Repository.Jobs(childComplexity, args["first"].(*int), args["after"].(*string), args["last"].(*int), args["before"].(*string), args["direction"].(*entity.OrderDirection)), true

	case "Repository.monitorCount":
		if e.complexity.Repository.MonitorCount == nil {
			break
		}

		return e.complexity.Repository.MonitorCount(childComplexity), true

	case "Repository.name":
		if e.complexity.Repository.Name == nil {
			break
		}

		return e.complexity.Repository.Name(childComplexity), true

	case "Repository.owner":
		if e.complexity.Repository.Owner == nil {
			break
		}

		return e.complexity.Repository.Owner(childComplexity), true

	case "Repository.PredictionStatus":
		if e.complexity.Repository.PredictionStatus == nil {
			break
		}

		return e.complexity.Repository.PredictionStatus(childComplexity), true

	case "Repository.progress":
		if e.complexity.Repository.Progress == nil {
			break
		}

		return e.complexity.Repository.Progress(childComplexity), true

	case "Repository.providerSCM":
		if e.complexity.Repository.ProviderSCM == nil {
			break
		}

		return e.complexity.Repository.ProviderSCM(childComplexity), true

	case "Repository.pullRequest":
		if e.complexity.Repository.PullRequest == nil {
			break
		}

		args, err := ec.field_Repository_pullRequest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Repository.PullRequest(childComplexity, args["number"].(int)), true

	case "Repository.pullRequests":
		if e.complexity.Repository.PullRequests == nil {
			break
		}

		args, err := ec.field_Repository_pullRequests_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Repository.PullRequests(childComplexity, args["first"].(*int), args["after"].(*string), args["last"].(*int), args["before"].(*string), args["direction"].(*entity.OrderDirection)), true

	case "Repository.source":
		if e.complexity.Repository.Source == nil {
			break
		}

		return e.complexity.Repository.Source(childComplexity), true

	case "Repository.status":
		if e.complexity.Repository.Status == nil {
			break
		}

		return e.complexity.Repository.Status(childComplexity), true

	case "Repository.tagsCount":
		if e.complexity.Repository.TagsCount == nil {
			break
		}

		return e.complexity.Repository.TagsCount(childComplexity), true

	case "Repository.updatedAt":
		if e.complexity.Repository.UpdatedAt == nil {
			break
		}

		return e.complexity.Repository.UpdatedAt(childComplexity), true

	case "Repository.viewerCanAdminister":
		if e.complexity.Repository.ViewerCanAdminister == nil {
			break
		}

		return e.complexity.Repository.ViewerCanAdminister(childComplexity), true

	case "Repository.viewerIsMonitor":
		if e.complexity.Repository.ViewerIsMonitor == nil {
			break
		}

		return e.complexity.Repository.ViewerIsMonitor(childComplexity), true

	case "RepositoryConnection.edges":
		if e.complexity.RepositoryConnection.Edges == nil {
			break
		}

		return e.complexity.RepositoryConnection.Edges(childComplexity), true

	case "RepositoryConnection.nodes":
		if e.complexity.RepositoryConnection.Nodes == nil {
			break
		}

		return e.complexity.RepositoryConnection.Nodes(childComplexity), true

	case "RepositoryConnection.pageInfo":
		if e.complexity.RepositoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.RepositoryConnection.PageInfo(childComplexity), true

	case "RepositoryConnection.totalCount":
		if e.complexity.RepositoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.RepositoryConnection.TotalCount(childComplexity), true

	case "RepositoryEdge.cursor":
		if e.complexity.RepositoryEdge.Cursor == nil {
			break
		}

		return e.complexity.RepositoryEdge.Cursor(childComplexity), true

	case "RepositoryEdge.node":
		if e.complexity.RepositoryEdge.Node == nil {
			break
		}

		return e.complexity.RepositoryEdge.Node(childComplexity), true

	case "RepositorySource.createdAt":
		if e.complexity.RepositorySource.CreatedAt == nil {
			break
		}

		return e.complexity.RepositorySource.CreatedAt(childComplexity), true

	case "RepositorySource.defaultBranch":
		if e.complexity.RepositorySource.DefaultBranch == nil {
			break
		}

		return e.complexity.RepositorySource.DefaultBranch(childComplexity), true

	case "RepositorySource.description":
		if e.complexity.RepositorySource.Description == nil {
			break
		}

		return e.complexity.RepositorySource.Description(childComplexity), true

	case "RepositorySource.id":
		if e.complexity.RepositorySource.ID == nil {
			break
		}

		return e.complexity.RepositorySource.ID(childComplexity), true

	case "RepositorySource.private":
		if e.complexity.RepositorySource.Private == nil {
			break
		}

		return e.complexity.RepositorySource.Private(childComplexity), true

	case "RepositorySource.repoName":
		if e.complexity.RepositorySource.RepoName == nil {
			break
		}

		return e.complexity.RepositorySource.RepoName(childComplexity), true

	case "RepositorySource.url":
		if e.complexity.RepositorySource.URL == nil {
			break
		}

		return e.complexity.RepositorySource.URL(childComplexity), true

	case "Signature.email":
		if e.complexity.Signature.Email == nil {
			break
		}

		return e.complexity.Signature.Email(childComplexity), true

	case "Signature.name":
		if e.complexity.Signature.Name == nil {
			break
		}

		return e.complexity.Signature.Name(childComplexity), true

	case "Signature.date":
		if e.complexity.Signature.When == nil {
			break
		}

		return e.complexity.Signature.When(childComplexity), true

	case "StopRepositoryMonitoringPayload.repository":
		if e.complexity.StopRepositoryMonitoringPayload.Repository == nil {
			break
		}

		return e.complexity.StopRepositoryMonitoringPayload.Repository(childComplexity), true

	case "Subscription.changeProgress":
		if e.complexity.Subscription.ChangeProgress == nil {
			break
		}

		args, err := ec.field_Subscription_changeProgress_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.ChangeProgress(childComplexity, args["ids"].([]string)), true

	case "TagCount.count":
		if e.complexity.TagCount.Count == nil {
			break
		}

		return e.complexity.TagCount.Count(childComplexity), true

	case "TagCount.tag":
		if e.complexity.TagCount.Tag == nil {
			break
		}

		return e.complexity.TagCount.Tag(childComplexity), true

	case "TagsCountConnection.nodes":
		if e.complexity.TagsCountConnection.Nodes == nil {
			break
		}

		return e.complexity.TagsCountConnection.Nodes(childComplexity), true

	case "UpdateRepositoryPayload.errors":
		if e.complexity.UpdateRepositoryPayload.Errors == nil {
			break
		}

		return e.complexity.UpdateRepositoryPayload.Errors(childComplexity), true

	case "UpdateRepositoryPayload.repository":
		if e.complexity.UpdateRepositoryPayload.Repository == nil {
			break
		}

		return e.complexity.UpdateRepositoryPayload.Repository(childComplexity), true

	case "User.avatarUrl":
		if e.complexity.User.AvatarURL == nil {
			break
		}

		return e.complexity.User.AvatarURL(childComplexity), true

	case "User.firstName":
		if e.complexity.User.FirstName == nil {
			break
		}

		return e.complexity.User.FirstName(childComplexity), true

	case "User.id":
		if e.complexity.User.ID == nil {
			break
		}

		return e.complexity.User.ID(childComplexity), true

	case "User.lastName":
		if e.complexity.User.LastName == nil {
			break
		}

		return e.complexity.User.LastName(childComplexity), true

	case "User.providers":
		if e.complexity.User.Providers == nil {
			break
		}

		return e.complexity.User.Providers(childComplexity), true

	case "User.repositories":
		if e.complexity.User.Repositories == nil {
			break
		}

		args, err := ec.field_User_repositories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.User.Repositories(childComplexity, args["first"].(*int), args["after"].(*string), args["last"].(*int), args["before"].(*string), args["direction"].(*entity.OrderDirection), args["ownerAffiliations"].([]entity.RepositoryAffiliation)), true

	case "User.role":
		if e.complexity.User.Role == nil {
			break
		}

		return e.complexity.User.Role(childComplexity), true

	case "User.username":
		if e.complexity.User.Username == nil {
			break
		}

		return e.complexity.User.Username(childComplexity), true

	case "UserProviderInfo.avatarURL":
		if e.complexity.UserProviderInfo.AvatarURL == nil {
			break
		}

		return e.complexity.UserProviderInfo.AvatarURL(childComplexity), true

	case "UserProviderInfo.fullName":
		if e.complexity.UserProviderInfo.FullName == nil {
			break
		}

		return e.complexity.UserProviderInfo.FullName(childComplexity), true

	case "UserProviderInfo.homePage":
		if e.complexity.UserProviderInfo.HomePage == nil {
			break
		}

		return e.complexity.UserProviderInfo.HomePage(childComplexity), true

	case "UserProviderInfo.id":
		if e.complexity.UserProviderInfo.ID == nil {
			break
		}

		return e.complexity.UserProviderInfo.ID(childComplexity), true

	case "UserProviderInfo.location":
		if e.complexity.UserProviderInfo.Location == nil {
			break
		}

		return e.complexity.UserProviderInfo.Location(childComplexity), true

	case "UserProviderInfo.provider":
		if e.complexity.UserProviderInfo.Provider == nil {
			break
		}

		return e.complexity.UserProviderInfo.Provider(childComplexity), true

	case "UserProviderInfo.username":
		if e.complexity.UserProviderInfo.Username == nil {
			break
		}

		return e.complexity.UserProviderInfo.Username(childComplexity), true

	case "VisitOverTime.date":
		if e.complexity.VisitOverTime.Date == nil {
			break
		}

		return e.complexity.VisitOverTime.Date(childComplexity), true

	case "VisitOverTime.views":
		if e.complexity.VisitOverTime.Views == nil {
			break
		}

		return e.complexity.VisitOverTime.Views(childComplexity), true

	case "VisitOverTime.visitors":
		if e.complexity.VisitOverTime.Visitors == nil {
			break
		}

		return e.complexity.VisitOverTime.Visitors(childComplexity), true

	case "VisitOverTimeConnection.nodes":
		if e.complexity.VisitOverTimeConnection.Nodes == nil {
			break
		}

		return e.complexity.VisitOverTimeConnection.Nodes(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Subscription:
		next := ec._Subscription(ctx, rc.Operation.SelectionSet)

		var buf bytes.Buffer
		return func(ctx context.Context) *graphql.Response {
			buf.Reset()
			data := next()

			if data == nil {
				return nil
			}
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "graph/schema.graphql", Input: `directive @goModel(
  model: String
  models: [String!]
) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
directive @goField(
  forceResolver: Boolean
  name: String
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

scalar DateTime

enum Role {
  SITE_ADMIN
  SERVICE
}

enum Tag {
  Code
  NoneCode
  Fix
  Bug
  Add
  Update
  Feature
  Tests
  Documentations
  Refactor
  License
  Build
  CI
  TechnicalDebt
  Style
  Release
  Dependencies
  GeneratedCode
  PerformanceImprovements
  Reverts
  MiscellaneousChores
}

enum PredictionStatus {
  UnknownState
  LastModel
  Ok
  LowTrainingData
  ClassUnbalanced
  LowModelQuality
  FailDataPreparing
  FailTraining
  FailPredicting
}

enum Stage {
  QUEUED
  ADDED
  CLONING
  CLONED
  FETCHING
  FETCHED
  INGESTING
  INGESTED
  ANALYZING
  ANALYZED
  PREDICTING
  PREDICTED
  READY
  FAILED
  CANCELED
  WATCHED
  RECOVERED
  PROGRESSING
}

enum DeltaType {
  DELETED
  UNMODIFIED
  ADDED
  MODIFIED
  RENAMED
  COPIED
  IGNORED
  UNTRACKED
  TYPECHANGE
  UNREADABLE
  CONFLICTED
  OTHER
}

enum OrderDirection {
  ASC
  DESC
}

enum RepositoryAffiliation {
  OWNER
  COLLABORATOR
  MONITOR
}

interface Node {
  id: ID!
}

type Query {
  viewer: User!
  repository(provider: String!, owner: String!, name: String!): Repository
  repositories(
    first: Int
    after: String
    last: Int
    before: String
    direction: OrderDirection
  ): RepositoryConnection!
  organizations(
    first: Int
    after: String
    last: Int
    before: String
    direction: OrderDirection
  ): OrganizationConnection!

  organization(provider: String!, owner: String!): Organization
  node(id: ID!): Node
  activity: Activity
  feedback(
    first: Int
    after: String
    last: Int
    before: String
    direction: OrderDirection
  ): FeedbackConnection
}

type FeedbackConnection {
  edges: [FeedbackEdge]
  pageInfo: PageInfo!
  totalCount: Int!
  nodes: [Feedback]
}

type FeedbackEdge {
  cursor: String!
  node: Feedback
}

enum Period {
  DAY
  WEEK
  MONTH
  YEAR
  ALL_TIME
}

enum Frequency {
  DAILY
  MONTHLY
  YEARLY
}

#todo: Deprecate this type
type Activity {
  repositoriesTotalCount(period: Period): Int!
  repositoriesCount(
    period: Period
    frequency: Frequency!
  ): CountOverTimeConnection
  organizationsTotalCount(period: Period): Int!
  organizationsCount(
    period: Period
    frequency: Frequency!
  ): CountOverTimeConnection
  #    usersTotalCount: Int!
  #    usersCount: CountOverTimeConnection
  commitsAnalyzedTotalCount(period: Period): Int!
  commitsAnalyzedCount(
    period: Period
    frequency: Frequency!
  ): CountOverTimeConnection
  commitsPredictTotalCount(period: Period): Int!
  commitsPredictCount(
    period: Period
    frequency: Frequency!
  ): CountOverTimeConnection
  jobsTotalCount(period: Period): Int!
  jobsCount(period: Period, frequency: Frequency!): CountOverTimeConnection
  pullRequestAnalyzedTotalCount(period: Period): Int!
  pullRequestAnalyzedCount(
    period: Period
    frequency: Frequency!
  ): CountOverTimeConnection

  viewsTotalCount(period: Period): Int!
  visitorsTotalCount(period: Period): Int!
  visitCount(period: Period, frequency: Frequency!): VisitOverTimeConnection
}

type Subscription {
  changeProgress(ids: [ID!]!): ProgressEvent!
}

type UserProviderInfo {
  provider: String!
  id: String!
  username: String
  fullName: String
  avatarURL: String
  location: String
  homePage: String
}

type User implements Node {
  id: ID!
  username: String
  firstName: String
  lastName: String
  avatarUrl: String
  role: Role
  providers: [UserProviderInfo]

  repositories(
    first: Int
    after: String
    last: Int
    before: String
    direction: OrderDirection
    ownerAffiliations: [RepositoryAffiliation!]
  ): RepositoryConnection!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

#todo: should be a interface
type Owner {
  id: ID! #fixme: the id is not global
  slug: String!
}

type Organization implements Node {
  id: ID!
  owner: Owner!
  providerSCM: String!
  avatarURL: String
  providerSetupURL: String
  repositories(
    first: Int
    after: String
    last: Int
    before: String
    direction: OrderDirection
  ): RepositoryConnection!
  viewerCanAdminister: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Repository implements Node & Progressable {
  id: ID!
  databaseId: String! # todo: reconsedr if we want to expose it
  name: String!
  status: Stage!
  providerSCM: String!
  source: RepositorySource!
  commit(hash: String!): Commit
  pullRequest(number: Int!): PullRequest
  owner: Owner!
  progress: Progress
  checksConfig: ChecksConfig
  viewerIsMonitor: Boolean!
  monitorCount: Int!

  commits(
    first: Int
    after: String
    last: Int
    before: String
    direction: OrderDirection
    filters: CommitFilters
  ): CommitConnection!
  pullRequests(
    first: Int
    after: String
    last: Int
    before: String
    direction: OrderDirection
  ): PullRequestConnection!
  jobs(
    first: Int
    after: String
    last: Int
    before: String
    direction: OrderDirection
  ): JobConnection!

  branches: [Branch!]!
  developerEmails: [String!] #todo: should be replaced with developer connection
  developerNames: [String!] #todo: should be replaced with developer connection
  Confidence: Float
  #    PredictionStatus: PredictionStatus #todo: should be used instad on int
  PredictionStatus: Int

  commitsCount: Int
  commitPredictionsCount: Int
  buggyCommitsCount: Int
  fixCommitsCount: Int
  branchesCount: Int
  contributorsCount: Int
  collaboratorsCount: Int
  buggyCommitsOverTime: CountOverTimeConnection
  commitsOverTime: CountOverTimeConnection
  tagsCount: TagsCountConnection
  avgEntropyOverTime: AvgOverTimeConnection
  avgCommitFilesOverTime: AvgOverTimeConnection

  """
  Indicates whether the viewer has admin permissions on this repository.
  """
  viewerCanAdminister: Boolean!

  createdAt: DateTime!
  updatedAt: DateTime!
}

type ChecksConfig {
  enable: Boolean!
}

type RepositorySource {
  id: String!
  repoName: String!
  url: String!
  defaultBranch: String!
  description: String
  private: Boolean!
  createdAt: DateTime!
}

interface Progressable {
  id: ID!
  status: Stage!
  progress: Progress
}

type ProgressEvent {
  target: ID!
  progress: Progress!
}

type Progress {
  status: Stage!
  total: Int
  current: Int
}

type RepositoryConnection {
  edges: [RepositoryEdge]
  pageInfo: PageInfo!
  totalCount: Int!
  nodes: [Repository]
}

type RepositoryEdge {
  cursor: String!
  node: Repository
}

type OrganizationConnection {
  edges: [OrganizationEdge]
  pageInfo: PageInfo!
  totalCount: Int!
  nodes: [Organization]
}

type OrganizationEdge {
  cursor: String!
  node: Organization
}

#todo: inline the fillters
input CommitFilters {
  branch: String
  developerName: String
  minRisk: Float
  maxRisk: Float
}

type Developer {
  name: String!
  email: String!
}

type TagsCountConnection {
  nodes: [TagCount!]
}

type TagCount {
  tag: Tag!
  count: Int!
}

type VisitOverTimeConnection {
  nodes: [VisitOverTime!]
}

type VisitOverTime {
  date: String!
  visitors: Int!
  views: Int!
}

type AvgOverTimeConnection {
  nodes: [AvgOverTime!]
}

type AvgOverTime {
  date: String!
  avg: Float!
}

type CountOverTimeConnection {
  nodes: [CountOverTime!]
}

type CountOverTime {
  date: String!
  count: Int!
}

type CommitConnection {
  edges: [CommitEdge]
  pageInfo: PageInfo!
  totalCount: Int!
  nodes: [Commit]
}

type CommitEdge {
  cursor: String!
  node: Commit
}

type PullRequestConnection {
  edges: [PullRequestEdge]
  pageInfo: PageInfo!
  totalCount: Int!
  nodes: [PullRequest]
}

type PullRequestEdge {
  cursor: String!
  node: PullRequest
}

type PullRequest implements Node & Progressable {
  id: ID!
  status: Stage!
  progress: Progress
  source: PullRequestSource!
  commits(
    first: Int
    after: String
    last: Int
    before: String
    direction: OrderDirection
  ): CommitConnection!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum PullRequestState {
  #A pull request that is still open.
  OPEN
  # A pull request that has been closed without being merged.
  CLOSED
  # A pull request that has been closed by being merged
  MERGED
}

type PullRequestSource {
  id: String
  number: Int!
  title: String!
  body: String
  closed: Boolean!
  closedAt: DateTime
  mergedAt: DateTime
  merged: Boolean!
  head: Branch
  base: Branch
  #    state: PullRequestState # todo
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Branch {
  name: String!
  sha: String!
  cloneURL: String
}

type Commit implements Node {
  id: ID!
  hash: String!
  author: Signature!
  message: String!
  metrics: ChangeMeasures
  analysis: CommitAnalysis
  tags: [String!]!
  deletedTags: [String!]!
  files: [CommitFile!]! #todo: we could use connections
  fix: Boolean!
  fixed: Boolean!
  fixes(
    first: Int
    after: String
    last: Int
    before: String
    direction: OrderDirection
  ): CommitConnection
  issues: [Issue!] #todo: we could use connections
  repository: Repository!
}

type CommitAnalysis {
  bugPotential: Float!
  indicators: BugIndicators!
  insights: [Insight!]
}

type Issue {
  id: String! #todo: refactor the code to use node ID! and implement the node interface
  bug: Boolean!
  fetched: Boolean!
  createdAt: DateTime
}

type Insight {
  icon: String
  name: String!
  description: String
  color: String
}

type CommitFile {
  path: String!
  oldPath: String
  subsystem: String!
  fix: Boolean!
  action: DeltaType!
  type: String
  language: String
  fixing: [Commit!]
  metrics: FileMeasures
  insights: [Insight!]
}

type FileMeasures {
  la: Float!
  ld: Float!
  ha: Float!
  hd: Float!
  lt: Float!
  ndev: Float!
  age: Float!
  nuc: Float!
}

type Signature {
  name: String!
  email: String!
  date: DateTime!
}

type ChangeMeasures {
  "Number of modified subsystems."
  ns: Float!
  "Number of modified directories."
  nd: Float!
  "Number of modified files."
  nf: Float!
  "Entropy (distribution) of the changes."
  entropy: Float!
  "Lines added."
  la: Float!
  "Lines deleted."
  ld: Float!
  ha: Float!
  hd: Float!
  "Total lines."
  lt: Float!
  "Number of developers contributing."
  ndev: Float!
  "Age from last change."
  age: Float!
  "Number of unique changes."
  nuc: Float!
  "Developer experience."
  exp: Float!
  "Recent developer experience."
  rexp: Float!
  "Subsystem developer experience."
  sexp: Float!
}

type BugIndicators {
  experience: Float
  history: Float
  size: Float
  diffusion: Float
}

type JobConnection {
  edges: [JobEdge]
  pageInfo: PageInfo!
  totalCount: Int!
  nodes: [Job]
}

type JobEdge {
  cursor: String!
  node: Job
}

enum JobInvoker {
  REPOSITORY_ADD
  REPOSITORY_PUSH
  REPOSITORY_RECOVER
  REPOSITORY_REFRESH
  REPOSITORY_ADMIN_TRIGGER

  PULL_REQUEST_ADD
  PULL_REQUEST_UPDATE
  PULL_REQUEST_RECOVER
  PULL_REQUEST_REFRESH
  PULL_REQUEST_ADMIN_TRIGGER
}

type JobLogEntry {
  status: Stage!
  statusText: String!
  startedAt: DateTime!
}

type Job {
  id: ID!
  invoker: JobInvoker!
  #    repository: Repository
  statusLog: [JobLogEntry!] #todo: Implement local connection for empeded arrays
  error: String
  createdAt: DateTime!
}

type Feedback {
  id: ID!
  # todo: add the sender
  sender: User!
  message: String!
  target: Commit
  createdAt: DateTime!
}

type Mutation {
  updateRepository(input: UpdateRepositoryInput!): UpdateRepositoryPayload
  sendCommitFeedback(input: SendCommitFeedbackInput!): Feedback
  addPublicRepository(
    input: AddPublicRepositoryInput!
  ): AddPublicRepositoryPayload
  stopRepositoryMonitoring(id: ID!): StopRepositoryMonitoringPayload
  monitorRepository(id: ID!): MonitorRepositoryPayload
  deleteRepository(id: ID!): DeleteRepositoryPayload
  deleteCommitTag(input: DeleteCommitTagInput!): DeleteCommitTagPayload
}

type UpdateRepositoryPayload {
  repository: Repository
  errors: [String!]!
}

input UpdateRepositoryInput {
  id: ID!
  checksConfig: ChecksConfigInput
}

input ChecksConfigInput {
  enable: Boolean!
}

input SendCommitFeedbackInput {
  commitID: ID!
  message: String!
}

input AddPublicRepositoryInput {
  provider: String!
  nameWithOwner: String!
}

type AddPublicRepositoryPayload {
  repository: Repository
  errors: [String!]!
}

type DeleteRepositoryPayload {
  repository: Repository
}

type StopRepositoryMonitoringPayload {
  repository: Repository
}

type MonitorRepositoryPayload {
  repository: Repository
}

input DeleteCommitTagInput {
  commitID: ID!
  tag: Tag!
}

type DeleteCommitTagPayload {
  commit: Commit
}
`, BuiltIn: false},
	{Name: "federation/directives.graphql", Input: `
scalar _Any
scalar _FieldSet

directive @external on FIELD_DEFINITION
directive @requires(fields: _FieldSet!) on FIELD_DEFINITION
directive @provides(fields: _FieldSet!) on FIELD_DEFINITION
directive @key(fields: _FieldSet!) on OBJECT | INTERFACE
directive @extends on OBJECT
`, BuiltIn: true},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Activity_commitsAnalyzedCount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.Period
	if tmp, ok := rawArgs["period"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("period"))
		arg0, err = ec.unmarshalOPeriod2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋgraphᚋmodelᚐPeriod(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["period"] = arg0
	var arg1 entity.Frequency
	if tmp, ok := rawArgs["frequency"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("frequency"))
		arg1, err = ec.unmarshalNFrequency2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐFrequency(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["frequency"] = arg1
	return args, nil
}

func (ec *executionContext) field_Activity_commitsAnalyzedTotalCount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.Period
	if tmp, ok := rawArgs["period"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("period"))
		arg0, err = ec.unmarshalOPeriod2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋgraphᚋmodelᚐPeriod(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["period"] = arg0
	return args, nil
}

func (ec *executionContext) field_Activity_commitsPredictCount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.Period
	if tmp, ok := rawArgs["period"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("period"))
		arg0, err = ec.unmarshalOPeriod2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋgraphᚋmodelᚐPeriod(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["period"] = arg0
	var arg1 entity.Frequency
	if tmp, ok := rawArgs["frequency"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("frequency"))
		arg1, err = ec.unmarshalNFrequency2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐFrequency(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["frequency"] = arg1
	return args, nil
}

func (ec *executionContext) field_Activity_commitsPredictTotalCount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.Period
	if tmp, ok := rawArgs["period"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("period"))
		arg0, err = ec.unmarshalOPeriod2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋgraphᚋmodelᚐPeriod(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["period"] = arg0
	return args, nil
}

func (ec *executionContext) field_Activity_jobsCount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.Period
	if tmp, ok := rawArgs["period"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("period"))
		arg0, err = ec.unmarshalOPeriod2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋgraphᚋmodelᚐPeriod(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["period"] = arg0
	var arg1 entity.Frequency
	if tmp, ok := rawArgs["frequency"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("frequency"))
		arg1, err = ec.unmarshalNFrequency2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐFrequency(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["frequency"] = arg1
	return args, nil
}

func (ec *executionContext) field_Activity_jobsTotalCount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.Period
	if tmp, ok := rawArgs["period"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("period"))
		arg0, err = ec.unmarshalOPeriod2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋgraphᚋmodelᚐPeriod(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["period"] = arg0
	return args, nil
}

func (ec *executionContext) field_Activity_organizationsCount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.Period
	if tmp, ok := rawArgs["period"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("period"))
		arg0, err = ec.unmarshalOPeriod2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋgraphᚋmodelᚐPeriod(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["period"] = arg0
	var arg1 entity.Frequency
	if tmp, ok := rawArgs["frequency"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("frequency"))
		arg1, err = ec.unmarshalNFrequency2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐFrequency(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["frequency"] = arg1
	return args, nil
}

func (ec *executionContext) field_Activity_organizationsTotalCount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.Period
	if tmp, ok := rawArgs["period"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("period"))
		arg0, err = ec.unmarshalOPeriod2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋgraphᚋmodelᚐPeriod(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["period"] = arg0
	return args, nil
}

func (ec *executionContext) field_Activity_pullRequestAnalyzedCount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.Period
	if tmp, ok := rawArgs["period"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("period"))
		arg0, err = ec.unmarshalOPeriod2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋgraphᚋmodelᚐPeriod(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["period"] = arg0
	var arg1 entity.Frequency
	if tmp, ok := rawArgs["frequency"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("frequency"))
		arg1, err = ec.unmarshalNFrequency2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐFrequency(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["frequency"] = arg1
	return args, nil
}

func (ec *executionContext) field_Activity_pullRequestAnalyzedTotalCount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.Period
	if tmp, ok := rawArgs["period"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("period"))
		arg0, err = ec.unmarshalOPeriod2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋgraphᚋmodelᚐPeriod(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["period"] = arg0
	return args, nil
}

func (ec *executionContext) field_Activity_repositoriesCount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.Period
	if tmp, ok := rawArgs["period"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("period"))
		arg0, err = ec.unmarshalOPeriod2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋgraphᚋmodelᚐPeriod(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["period"] = arg0
	var arg1 entity.Frequency
	if tmp, ok := rawArgs["frequency"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("frequency"))
		arg1, err = ec.unmarshalNFrequency2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐFrequency(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["frequency"] = arg1
	return args, nil
}

func (ec *executionContext) field_Activity_repositoriesTotalCount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.Period
	if tmp, ok := rawArgs["period"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("period"))
		arg0, err = ec.unmarshalOPeriod2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋgraphᚋmodelᚐPeriod(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["period"] = arg0
	return args, nil
}

func (ec *executionContext) field_Activity_viewsTotalCount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.Period
	if tmp, ok := rawArgs["period"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("period"))
		arg0, err = ec.unmarshalOPeriod2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋgraphᚋmodelᚐPeriod(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["period"] = arg0
	return args, nil
}

func (ec *executionContext) field_Activity_visitCount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.Period
	if tmp, ok := rawArgs["period"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("period"))
		arg0, err = ec.unmarshalOPeriod2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋgraphᚋmodelᚐPeriod(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["period"] = arg0
	var arg1 entity.Frequency
	if tmp, ok := rawArgs["frequency"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("frequency"))
		arg1, err = ec.unmarshalNFrequency2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐFrequency(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["frequency"] = arg1
	return args, nil
}

func (ec *executionContext) field_Activity_visitorsTotalCount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.Period
	if tmp, ok := rawArgs["period"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("period"))
		arg0, err = ec.unmarshalOPeriod2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋgraphᚋmodelᚐPeriod(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["period"] = arg0
	return args, nil
}

func (ec *executionContext) field_Commit_fixes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg3
	var arg4 *entity.OrderDirection
	if tmp, ok := rawArgs["direction"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
		arg4, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐOrderDirection(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["direction"] = arg4
	return args, nil
}

func (ec *executionContext) field_Mutation_addPublicRepository_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.AddPublicRepositoryInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNAddPublicRepositoryInput2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋgraphᚋmodelᚐAddPublicRepositoryInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteCommitTag_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DeleteCommitTagInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNDeleteCommitTagInput2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋgraphᚋmodelᚐDeleteCommitTagInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteRepository_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_monitorRepository_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_sendCommitFeedback_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.SendCommitFeedbackInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNSendCommitFeedbackInput2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋgraphᚋmodelᚐSendCommitFeedbackInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_stopRepositoryMonitoring_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateRepository_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateRepositoryInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateRepositoryInput2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋgraphᚋmodelᚐUpdateRepositoryInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Organization_repositories_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg3
	var arg4 *entity.OrderDirection
	if tmp, ok := rawArgs["direction"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
		arg4, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐOrderDirection(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["direction"] = arg4
	return args, nil
}

func (ec *executionContext) field_PullRequest_commits_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg3
	var arg4 *entity.OrderDirection
	if tmp, ok := rawArgs["direction"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
		arg4, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐOrderDirection(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["direction"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_feedback_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg3
	var arg4 *entity.OrderDirection
	if tmp, ok := rawArgs["direction"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
		arg4, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐOrderDirection(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["direction"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_node_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_organization_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["provider"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provider"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["provider"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["owner"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("owner"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["owner"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_organizations_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg3
	var arg4 *entity.OrderDirection
	if tmp, ok := rawArgs["direction"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
		arg4, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐOrderDirection(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["direction"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_repositories_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg3
	var arg4 *entity.OrderDirection
	if tmp, ok := rawArgs["direction"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
		arg4, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐOrderDirection(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["direction"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_repository_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["provider"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provider"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["provider"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["owner"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("owner"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["owner"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg2
	return args, nil
}

func (ec *executionContext) field_Repository_commit_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["hash"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hash"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["hash"] = arg0
	return args, nil
}

func (ec *executionContext) field_Repository_commits_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg3
	var arg4 *entity.OrderDirection
	if tmp, ok := rawArgs["direction"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
		arg4, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐOrderDirection(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["direction"] = arg4
	var arg5 *entity.CommitFilters
	if tmp, ok := rawArgs["filters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
		arg5, err = ec.unmarshalOCommitFilters2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐCommitFilters(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filters"] = arg5
	return args, nil
}

func (ec *executionContext) field_Repository_jobs_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg3
	var arg4 *entity.OrderDirection
	if tmp, ok := rawArgs["direction"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
		arg4, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐOrderDirection(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["direction"] = arg4
	return args, nil
}

func (ec *executionContext) field_Repository_pullRequest_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["number"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("number"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["number"] = arg0
	return args, nil
}

func (ec *executionContext) field_Repository_pullRequests_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg3
	var arg4 *entity.OrderDirection
	if tmp, ok := rawArgs["direction"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
		arg4, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐOrderDirection(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["direction"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_changeProgress_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		arg0, err = ec.unmarshalNID2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ids"] = arg0
	return args, nil
}

func (ec *executionContext) field_User_repositories_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg3
	var arg4 *entity.OrderDirection
	if tmp, ok := rawArgs["direction"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
		arg4, err = ec.unmarshalOOrderDirection2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐOrderDirection(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["direction"] = arg4
	var arg5 []entity.RepositoryAffiliation
	if tmp, ok := rawArgs["ownerAffiliations"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerAffiliations"))
		arg5, err = ec.unmarshalORepositoryAffiliation2ᚕgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐRepositoryAffiliationᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ownerAffiliations"] = arg5
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Activity_repositoriesTotalCount(ctx context.Context, field graphql.CollectedField, obj *model.Activity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Activity",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Activity_repositoriesTotalCount_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Activity().RepositoriesTotalCount(rctx, obj, args["period"].(*model.Period))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Activity_repositoriesCount(ctx context.Context, field graphql.CollectedField, obj *model.Activity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Activity",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Activity_repositoriesCount_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Activity().RepositoriesCount(rctx, obj, args["period"].(*model.Period), args["frequency"].(entity.Frequency))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CountOverTimeConnection)
	fc.Result = res
	return ec.marshalOCountOverTimeConnection2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋgraphᚋmodelᚐCountOverTimeConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Activity_organizationsTotalCount(ctx context.Context, field graphql.CollectedField, obj *model.Activity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Activity",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Activity_organizationsTotalCount_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Activity().OrganizationsTotalCount(rctx, obj, args["period"].(*model.Period))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Activity_organizationsCount(ctx context.Context, field graphql.CollectedField, obj *model.Activity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Activity",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Activity_organizationsCount_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Activity().OrganizationsCount(rctx, obj, args["period"].(*model.Period), args["frequency"].(entity.Frequency))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CountOverTimeConnection)
	fc.Result = res
	return ec.marshalOCountOverTimeConnection2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋgraphᚋmodelᚐCountOverTimeConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Activity_commitsAnalyzedTotalCount(ctx context.Context, field graphql.CollectedField, obj *model.Activity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Activity",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Activity_commitsAnalyzedTotalCount_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Activity().CommitsAnalyzedTotalCount(rctx, obj, args["period"].(*model.Period))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Activity_commitsAnalyzedCount(ctx context.Context, field graphql.CollectedField, obj *model.Activity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Activity",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Activity_commitsAnalyzedCount_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Activity().CommitsAnalyzedCount(rctx, obj, args["period"].(*model.Period), args["frequency"].(entity.Frequency))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CountOverTimeConnection)
	fc.Result = res
	return ec.marshalOCountOverTimeConnection2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋgraphᚋmodelᚐCountOverTimeConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Activity_commitsPredictTotalCount(ctx context.Context, field graphql.CollectedField, obj *model.Activity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Activity",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Activity_commitsPredictTotalCount_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Activity().CommitsPredictTotalCount(rctx, obj, args["period"].(*model.Period))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Activity_commitsPredictCount(ctx context.Context, field graphql.CollectedField, obj *model.Activity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Activity",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Activity_commitsPredictCount_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Activity().CommitsPredictCount(rctx, obj, args["period"].(*model.Period), args["frequency"].(entity.Frequency))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CountOverTimeConnection)
	fc.Result = res
	return ec.marshalOCountOverTimeConnection2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋgraphᚋmodelᚐCountOverTimeConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Activity_jobsTotalCount(ctx context.Context, field graphql.CollectedField, obj *model.Activity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Activity",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Activity_jobsTotalCount_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Activity().JobsTotalCount(rctx, obj, args["period"].(*model.Period))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Activity_jobsCount(ctx context.Context, field graphql.CollectedField, obj *model.Activity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Activity",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Activity_jobsCount_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Activity().JobsCount(rctx, obj, args["period"].(*model.Period), args["frequency"].(entity.Frequency))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CountOverTimeConnection)
	fc.Result = res
	return ec.marshalOCountOverTimeConnection2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋgraphᚋmodelᚐCountOverTimeConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Activity_pullRequestAnalyzedTotalCount(ctx context.Context, field graphql.CollectedField, obj *model.Activity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Activity",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Activity_pullRequestAnalyzedTotalCount_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Activity().PullRequestAnalyzedTotalCount(rctx, obj, args["period"].(*model.Period))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Activity_pullRequestAnalyzedCount(ctx context.Context, field graphql.CollectedField, obj *model.Activity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Activity",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Activity_pullRequestAnalyzedCount_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Activity().PullRequestAnalyzedCount(rctx, obj, args["period"].(*model.Period), args["frequency"].(entity.Frequency))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CountOverTimeConnection)
	fc.Result = res
	return ec.marshalOCountOverTimeConnection2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋgraphᚋmodelᚐCountOverTimeConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Activity_viewsTotalCount(ctx context.Context, field graphql.CollectedField, obj *model.Activity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Activity",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Activity_viewsTotalCount_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Activity().ViewsTotalCount(rctx, obj, args["period"].(*model.Period))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Activity_visitorsTotalCount(ctx context.Context, field graphql.CollectedField, obj *model.Activity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Activity",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Activity_visitorsTotalCount_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Activity().VisitorsTotalCount(rctx, obj, args["period"].(*model.Period))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Activity_visitCount(ctx context.Context, field graphql.CollectedField, obj *model.Activity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Activity",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Activity_visitCount_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Activity().VisitCount(rctx, obj, args["period"].(*model.Period), args["frequency"].(entity.Frequency))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VisitOverTimeConnection)
	fc.Result = res
	return ec.marshalOVisitOverTimeConnection2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋgraphᚋmodelᚐVisitOverTimeConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _AddPublicRepositoryPayload_repository(ctx context.Context, field graphql.CollectedField, obj *model.AddPublicRepositoryPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AddPublicRepositoryPayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Repository, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Repository)
	fc.Result = res
	return ec.marshalORepository2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐRepository(ctx, field.Selections, res)
}

func (ec *executionContext) _AddPublicRepositoryPayload_errors(ctx context.Context, field graphql.CollectedField, obj *model.AddPublicRepositoryPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AddPublicRepositoryPayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Errors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _AvgOverTime_date(ctx context.Context, field graphql.CollectedField, obj *entity.AvgOverTime) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AvgOverTime",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AvgOverTime_avg(ctx context.Context, field graphql.CollectedField, obj *entity.AvgOverTime) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AvgOverTime",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _AvgOverTimeConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *model.AvgOverTimeConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AvgOverTimeConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*entity.AvgOverTime)
	fc.Result = res
	return ec.marshalOAvgOverTime2ᚕᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐAvgOverTimeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Branch_name(ctx context.Context, field graphql.CollectedField, obj *entity.Branch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Branch",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Branch_sha(ctx context.Context, field graphql.CollectedField, obj *entity.Branch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Branch",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SHA, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Branch_cloneURL(ctx context.Context, field graphql.CollectedField, obj *entity.Branch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Branch",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CloneURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BugIndicators_experience(ctx context.Context, field graphql.CollectedField, obj *entity.BugIndicators) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BugIndicators",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Experience, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(float32)
	fc.Result = res
	return ec.marshalOFloat2float32(ctx, field.Selections, res)
}

func (ec *executionContext) _BugIndicators_history(ctx context.Context, field graphql.CollectedField, obj *entity.BugIndicators) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BugIndicators",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.History, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(float32)
	fc.Result = res
	return ec.marshalOFloat2float32(ctx, field.Selections, res)
}

func (ec *executionContext) _BugIndicators_size(ctx context.Context, field graphql.CollectedField, obj *entity.BugIndicators) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BugIndicators",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Size, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(float32)
	fc.Result = res
	return ec.marshalOFloat2float32(ctx, field.Selections, res)
}

func (ec *executionContext) _BugIndicators_diffusion(ctx context.Context, field graphql.CollectedField, obj *entity.BugIndicators) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BugIndicators",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Diffusion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(float32)
	fc.Result = res
	return ec.marshalOFloat2float32(ctx, field.Selections, res)
}

func (ec *executionContext) _ChangeMeasures_ns(ctx context.Context, field graphql.CollectedField, obj *metrics.ChangeMeasures) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ChangeMeasures",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NS, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _ChangeMeasures_nd(ctx context.Context, field graphql.CollectedField, obj *metrics.ChangeMeasures) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ChangeMeasures",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ND, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _ChangeMeasures_nf(ctx context.Context, field graphql.CollectedField, obj *metrics.ChangeMeasures) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ChangeMeasures",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NF, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _ChangeMeasures_entropy(ctx context.Context, field graphql.CollectedField, obj *metrics.ChangeMeasures) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ChangeMeasures",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Entropy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _ChangeMeasures_la(ctx context.Context, field graphql.CollectedField, obj *metrics.ChangeMeasures) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ChangeMeasures",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LA, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _ChangeMeasures_ld(ctx context.Context, field graphql.CollectedField, obj *metrics.ChangeMeasures) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ChangeMeasures",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LD, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _ChangeMeasures_ha(ctx context.Context, field graphql.CollectedField, obj *metrics.ChangeMeasures) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ChangeMeasures",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HA, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _ChangeMeasures_hd(ctx context.Context, field graphql.CollectedField, obj *metrics.ChangeMeasures) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ChangeMeasures",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HD, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _ChangeMeasures_lt(ctx context.Context, field graphql.CollectedField, obj *metrics.ChangeMeasures) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ChangeMeasures",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LT, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _ChangeMeasures_ndev(ctx context.Context, field graphql.CollectedField, obj *metrics.ChangeMeasures) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ChangeMeasures",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NDEV, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _ChangeMeasures_age(ctx context.Context, field graphql.CollectedField, obj *metrics.ChangeMeasures) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ChangeMeasures",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AGE, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _ChangeMeasures_nuc(ctx context.Context, field graphql.CollectedField, obj *metrics.ChangeMeasures) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ChangeMeasures",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NUC, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _ChangeMeasures_exp(ctx context.Context, field graphql.CollectedField, obj *metrics.ChangeMeasures) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ChangeMeasures",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EXP, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _ChangeMeasures_rexp(ctx context.Context, field graphql.CollectedField, obj *metrics.ChangeMeasures) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ChangeMeasures",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.REXP, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _ChangeMeasures_sexp(ctx context.Context, field graphql.CollectedField, obj *metrics.ChangeMeasures) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ChangeMeasures",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SEXP, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _ChecksConfig_enable(ctx context.Context, field graphql.CollectedField, obj *entity.ChecksConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ChecksConfig",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commit_id(ctx context.Context, field graphql.CollectedField, obj *entity.Commit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Commit",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*identifier.CommitID)
	fc.Result = res
	return ec.marshalNID2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋpkgᚋidentifierᚐCommitID(ctx, field.Selections, res)
}

func (ec *executionContext) _Commit_hash(ctx context.Context, field graphql.CollectedField, obj *entity.Commit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Commit",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Commit().Hash(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commit_author(ctx context.Context, field graphql.CollectedField, obj *entity.Commit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Commit",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Author, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*engine.Signature)
	fc.Result = res
	return ec.marshalNSignature2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋpkgᚋengineᚐSignature(ctx, field.Selections, res)
}

func (ec *executionContext) _Commit_message(ctx context.Context, field graphql.CollectedField, obj *entity.Commit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Commit",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commit_metrics(ctx context.Context, field graphql.CollectedField, obj *entity.Commit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Commit",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metrics, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*metrics.ChangeMeasures)
	fc.Result = res
	return ec.marshalOChangeMeasures2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑcommonᚋmetricsᚐChangeMeasures(ctx, field.Selections, res)
}

func (ec *executionContext) _Commit_analysis(ctx context.Context, field graphql.CollectedField, obj *entity.Commit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Commit",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Analysis, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.CommitAnalysis)
	fc.Result = res
	return ec.marshalOCommitAnalysis2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐCommitAnalysis(ctx, field.Selections, res)
}

func (ec *executionContext) _Commit_tags(ctx context.Context, field graphql.CollectedField, obj *entity.Commit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Commit",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Commit().Tags(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Commit_deletedTags(ctx context.Context, field graphql.CollectedField, obj *entity.Commit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Commit",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Commit().DeletedTags(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Commit_files(ctx context.Context, field graphql.CollectedField, obj *entity.Commit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Commit",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Files, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*entity.File)
	fc.Result = res
	return ec.marshalNCommitFile2ᚕᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐFileᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Commit_fix(ctx context.Context, field graphql.CollectedField, obj *entity.Commit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Commit",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fix, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commit_fixed(ctx context.Context, field graphql.CollectedField, obj *entity.Commit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Commit",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fixed(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commit_fixes(ctx context.Context, field graphql.CollectedField, obj *entity.Commit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Commit",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Commit_fixes_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Commit().Fixes(rctx, obj, args["first"].(*int), args["after"].(*string), args["last"].(*int), args["before"].(*string), args["direction"].(*entity.OrderDirection))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(entity.CommitConnection)
	fc.Result = res
	return ec.marshalOCommitConnection2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐCommitConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Commit_issues(ctx context.Context, field graphql.CollectedField, obj *entity.Commit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Commit",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Issues, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]common.Issue)
	fc.Result = res
	return ec.marshalOIssue2ᚕgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑcommonᚋcommonᚐIssueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Commit_repository(ctx context.Context, field graphql.CollectedField, obj *entity.Commit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Commit",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Commit().Repository(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*entity.Repository)
	fc.Result = res
	return ec.marshalNRepository2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐRepository(ctx, field.Selections, res)
}

func (ec *executionContext) _CommitAnalysis_bugPotential(ctx context.Context, field graphql.CollectedField, obj *entity.CommitAnalysis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CommitAnalysis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BugPotential, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float32)
	fc.Result = res
	return ec.marshalNFloat2float32(ctx, field.Selections, res)
}

func (ec *executionContext) _CommitAnalysis_indicators(ctx context.Context, field graphql.CollectedField, obj *entity.CommitAnalysis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CommitAnalysis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Indicators, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entity.BugIndicators)
	fc.Result = res
	return ec.marshalNBugIndicators2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐBugIndicators(ctx, field.Selections, res)
}

func (ec *executionContext) _CommitAnalysis_insights(ctx context.Context, field graphql.CollectedField, obj *entity.CommitAnalysis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CommitAnalysis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Insights, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]insights.Reason)
	fc.Result = res
	return ec.marshalOInsight2ᚕgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋpkgᚋinsightsᚐReasonᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _CommitConnection_edges(ctx context.Context, field graphql.CollectedField, obj entity.CommitConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CommitConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*entity.CommitEdge)
	fc.Result = res
	return ec.marshalOCommitEdge2ᚕᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐCommitEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _CommitConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj entity.CommitConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CommitConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*entity.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _CommitConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj entity.CommitConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CommitConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _CommitConnection_nodes(ctx context.Context, field graphql.CollectedField, obj entity.CommitConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CommitConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*entity.Commit)
	fc.Result = res
	return ec.marshalOCommit2ᚕᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐCommit(ctx, field.Selections, res)
}

func (ec *executionContext) _CommitEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *entity.CommitEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CommitEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalNString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CommitEdge_node(ctx context.Context, field graphql.CollectedField, obj *entity.CommitEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CommitEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(entity.Commit)
	fc.Result = res
	return ec.marshalOCommit2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐCommit(ctx, field.Selections, res)
}

func (ec *executionContext) _CommitFile_path(ctx context.Context, field graphql.CollectedField, obj *entity.File) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CommitFile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Path, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CommitFile_oldPath(ctx context.Context, field graphql.CollectedField, obj *entity.File) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CommitFile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OldPath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CommitFile_subsystem(ctx context.Context, field graphql.CollectedField, obj *entity.File) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CommitFile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subsystem, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CommitFile_fix(ctx context.Context, field graphql.CollectedField, obj *entity.File) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CommitFile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fix, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _CommitFile_action(ctx context.Context, field graphql.CollectedField, obj *entity.File) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CommitFile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Action, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(engine.DeltaType)
	fc.Result = res
	return ec.marshalNDeltaType2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋpkgᚋengineᚐDeltaType(ctx, field.Selections, res)
}

func (ec *executionContext) _CommitFile_type(ctx context.Context, field graphql.CollectedField, obj *entity.File) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CommitFile",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CommitFile().Type(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CommitFile_language(ctx context.Context, field graphql.CollectedField, obj *entity.File) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CommitFile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Language, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CommitFile_fixing(ctx context.Context, field graphql.CollectedField, obj *entity.File) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CommitFile",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CommitFile().Fixing(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*entity.Commit)
	fc.Result = res
	return ec.marshalOCommit2ᚕᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐCommitᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _CommitFile_metrics(ctx context.Context, field graphql.CollectedField, obj *entity.File) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CommitFile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metrics, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*metrics.FileMeasures)
	fc.Result = res
	return ec.marshalOFileMeasures2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑcommonᚋmetricsᚐFileMeasures(ctx, field.Selections, res)
}

func (ec *executionContext) _CommitFile_insights(ctx context.Context, field graphql.CollectedField, obj *entity.File) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CommitFile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Insights, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]insights.Reason)
	fc.Result = res
	return ec.marshalOInsight2ᚕgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋpkgᚋinsightsᚐReasonᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _CountOverTime_date(ctx context.Context, field graphql.CollectedField, obj *entity.CountOverTime) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CountOverTime",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CountOverTime_count(ctx context.Context, field graphql.CollectedField, obj *entity.CountOverTime) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CountOverTime",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _CountOverTimeConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *model.CountOverTimeConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CountOverTimeConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*entity.CountOverTime)
	fc.Result = res
	return ec.marshalOCountOverTime2ᚕᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐCountOverTimeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _DeleteCommitTagPayload_commit(ctx context.Context, field graphql.CollectedField, obj *model.DeleteCommitTagPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeleteCommitTagPayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Commit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Commit)
	fc.Result = res
	return ec.marshalOCommit2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐCommit(ctx, field.Selections, res)
}

func (ec *executionContext) _DeleteRepositoryPayload_repository(ctx context.Context, field graphql.CollectedField, obj *model.DeleteRepositoryPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeleteRepositoryPayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Repository, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Repository)
	fc.Result = res
	return ec.marshalORepository2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐRepository(ctx, field.Selections, res)
}

func (ec *executionContext) _Developer_name(ctx context.Context, field graphql.CollectedField, obj *entity.Developer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Developer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Developer_email(ctx context.Context, field graphql.CollectedField, obj *entity.Developer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Developer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Feedback_id(ctx context.Context, field graphql.CollectedField, obj *entity.Feedback) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Feedback",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(identifier.FeedbackID)
	fc.Result = res
	return ec.marshalNID2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋpkgᚋidentifierᚐFeedbackID(ctx, field.Selections, res)
}

func (ec *executionContext) _Feedback_sender(ctx context.Context, field graphql.CollectedField, obj *entity.Feedback) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Feedback",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Feedback().Sender(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalNUser2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Feedback_message(ctx context.Context, field graphql.CollectedField, obj *entity.Feedback) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Feedback",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Feedback_target(ctx context.Context, field graphql.CollectedField, obj *entity.Feedback) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Feedback",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Feedback().Target(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Commit)
	fc.Result = res
	return ec.marshalOCommit2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐCommit(ctx, field.Selections, res)
}

func (ec *executionContext) _Feedback_createdAt(ctx context.Context, field graphql.CollectedField, obj *entity.Feedback) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Feedback",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNDateTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _FeedbackConnection_edges(ctx context.Context, field graphql.CollectedField, obj entity.FeedbackConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FeedbackConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*entity.FeedbackEdge)
	fc.Result = res
	return ec.marshalOFeedbackEdge2ᚕᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐFeedbackEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _FeedbackConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj entity.FeedbackConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FeedbackConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*entity.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _FeedbackConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj entity.FeedbackConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FeedbackConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _FeedbackConnection_nodes(ctx context.Context, field graphql.CollectedField, obj entity.FeedbackConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FeedbackConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*entity.Feedback)
	fc.Result = res
	return ec.marshalOFeedback2ᚕᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐFeedback(ctx, field.Selections, res)
}

func (ec *executionContext) _FeedbackEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *entity.FeedbackEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FeedbackEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalNString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FeedbackEdge_node(ctx context.Context, field graphql.CollectedField, obj *entity.FeedbackEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FeedbackEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(entity.Feedback)
	fc.Result = res
	return ec.marshalOFeedback2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐFeedback(ctx, field.Selections, res)
}

func (ec *executionContext) _FileMeasures_la(ctx context.Context, field graphql.CollectedField, obj *metrics.FileMeasures) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FileMeasures",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LA, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _FileMeasures_ld(ctx context.Context, field graphql.CollectedField, obj *metrics.FileMeasures) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FileMeasures",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LD, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _FileMeasures_ha(ctx context.Context, field graphql.CollectedField, obj *metrics.FileMeasures) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FileMeasures",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HA, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _FileMeasures_hd(ctx context.Context, field graphql.CollectedField, obj *metrics.FileMeasures) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FileMeasures",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HD, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _FileMeasures_lt(ctx context.Context, field graphql.CollectedField, obj *metrics.FileMeasures) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FileMeasures",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LT, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _FileMeasures_ndev(ctx context.Context, field graphql.CollectedField, obj *metrics.FileMeasures) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FileMeasures",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NDEV, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _FileMeasures_age(ctx context.Context, field graphql.CollectedField, obj *metrics.FileMeasures) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FileMeasures",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AGE, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _FileMeasures_nuc(ctx context.Context, field graphql.CollectedField, obj *metrics.FileMeasures) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FileMeasures",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NUC, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _Insight_icon(ctx context.Context, field graphql.CollectedField, obj *insights.Reason) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Insight",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Icon(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Insight_name(ctx context.Context, field graphql.CollectedField, obj *insights.Reason) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Insight",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Insight_description(ctx context.Context, field graphql.CollectedField, obj *insights.Reason) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Insight",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Insight_color(ctx context.Context, field graphql.CollectedField, obj *insights.Reason) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Insight",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Color(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_id(ctx context.Context, field graphql.CollectedField, obj *common.Issue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Issue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Id, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_bug(ctx context.Context, field graphql.CollectedField, obj *common.Issue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Issue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Bug, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_fetched(ctx context.Context, field graphql.CollectedField, obj *common.Issue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Issue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fetched, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_createdAt(ctx context.Context, field graphql.CollectedField, obj *common.Issue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Issue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalODateTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Job_id(ctx context.Context, field graphql.CollectedField, obj *entity.Job) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Job",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(identifier.JobID)
	fc.Result = res
	return ec.marshalNID2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋpkgᚋidentifierᚐJobID(ctx, field.Selections, res)
}

func (ec *executionContext) _Job_invoker(ctx context.Context, field graphql.CollectedField, obj *entity.Job) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Job",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Invoker, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(invoke.Action)
	fc.Result = res
	return ec.marshalNJobInvoker2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋpkgᚋinvokeᚐAction(ctx, field.Selections, res)
}

func (ec *executionContext) _Job_statusLog(ctx context.Context, field graphql.CollectedField, obj *entity.Job) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Job",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StatusLog, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]entity.Update)
	fc.Result = res
	return ec.marshalOJobLogEntry2ᚕgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐUpdateᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Job_error(ctx context.Context, field graphql.CollectedField, obj *entity.Job) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Job",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Job_createdAt(ctx context.Context, field graphql.CollectedField, obj *entity.Job) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Job",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNDateTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _JobConnection_edges(ctx context.Context, field graphql.CollectedField, obj entity.JobConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JobConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*entity.JobEdge)
	fc.Result = res
	return ec.marshalOJobEdge2ᚕᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐJobEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _JobConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj entity.JobConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JobConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*entity.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _JobConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj entity.JobConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JobConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _JobConnection_nodes(ctx context.Context, field graphql.CollectedField, obj entity.JobConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JobConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*entity.Job)
	fc.Result = res
	return ec.marshalOJob2ᚕᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐJob(ctx, field.Selections, res)
}

func (ec *executionContext) _JobEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *entity.JobEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JobEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalNString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _JobEdge_node(ctx context.Context, field graphql.CollectedField, obj *entity.JobEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JobEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(entity.Job)
	fc.Result = res
	return ec.marshalOJob2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐJob(ctx, field.Selections, res)
}

func (ec *executionContext) _JobLogEntry_status(ctx context.Context, field graphql.CollectedField, obj *entity.Update) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JobLogEntry",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(status.Stage)
	fc.Result = res
	return ec.marshalNStage2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋpkgᚋstatusᚐStage(ctx, field.Selections, res)
}

func (ec *executionContext) _JobLogEntry_statusText(ctx context.Context, field graphql.CollectedField, obj *entity.Update) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JobLogEntry",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StatusText(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _JobLogEntry_startedAt(ctx context.Context, field graphql.CollectedField, obj *entity.Update) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JobLogEntry",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNDateTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MonitorRepositoryPayload_repository(ctx context.Context, field graphql.CollectedField, obj *model.MonitorRepositoryPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MonitorRepositoryPayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Repository, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Repository)
	fc.Result = res
	return ec.marshalORepository2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐRepository(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateRepository(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateRepository_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateRepository(rctx, args["input"].(model.UpdateRepositoryInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UpdateRepositoryPayload)
	fc.Result = res
	return ec.marshalOUpdateRepositoryPayload2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋgraphᚋmodelᚐUpdateRepositoryPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_sendCommitFeedback(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_sendCommitFeedback_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SendCommitFeedback(rctx, args["input"].(model.SendCommitFeedbackInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Feedback)
	fc.Result = res
	return ec.marshalOFeedback2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐFeedback(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addPublicRepository(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addPublicRepository_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddPublicRepository(rctx, args["input"].(model.AddPublicRepositoryInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AddPublicRepositoryPayload)
	fc.Result = res
	return ec.marshalOAddPublicRepositoryPayload2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋgraphᚋmodelᚐAddPublicRepositoryPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_stopRepositoryMonitoring(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_stopRepositoryMonitoring_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().StopRepositoryMonitoring(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.StopRepositoryMonitoringPayload)
	fc.Result = res
	return ec.marshalOStopRepositoryMonitoringPayload2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋgraphᚋmodelᚐStopRepositoryMonitoringPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_monitorRepository(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_monitorRepository_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().MonitorRepository(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MonitorRepositoryPayload)
	fc.Result = res
	return ec.marshalOMonitorRepositoryPayload2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋgraphᚋmodelᚐMonitorRepositoryPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteRepository(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteRepository_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteRepository(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeleteRepositoryPayload)
	fc.Result = res
	return ec.marshalODeleteRepositoryPayload2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋgraphᚋmodelᚐDeleteRepositoryPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteCommitTag(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteCommitTag_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteCommitTag(rctx, args["input"].(model.DeleteCommitTagInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeleteCommitTagPayload)
	fc.Result = res
	return ec.marshalODeleteCommitTagPayload2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋgraphᚋmodelᚐDeleteCommitTagPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_id(ctx context.Context, field graphql.CollectedField, obj *entity.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(identifier.OrganizationID)
	fc.Result = res
	return ec.marshalNID2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋpkgᚋidentifierᚐOrganizationID(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_owner(ctx context.Context, field graphql.CollectedField, obj *entity.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(common.Account)
	fc.Result = res
	return ec.marshalNOwner2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑcommonᚋcommonᚐAccount(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_providerSCM(ctx context.Context, field graphql.CollectedField, obj *entity.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProviderSCM, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_avatarURL(ctx context.Context, field graphql.CollectedField, obj *entity.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AvatarURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_providerSetupURL(ctx context.Context, field graphql.CollectedField, obj *entity.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Organization().ProviderSetupURL(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_repositories(ctx context.Context, field graphql.CollectedField, obj *entity.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Organization_repositories_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Organization().Repositories(rctx, obj, args["first"].(*int), args["after"].(*string), args["last"].(*int), args["before"].(*string), args["direction"].(*entity.OrderDirection))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entity.RepositoryConnection)
	fc.Result = res
	return ec.marshalNRepositoryConnection2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐRepositoryConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_viewerCanAdminister(ctx context.Context, field graphql.CollectedField, obj *entity.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Organization().ViewerCanAdminister(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_createdAt(ctx context.Context, field graphql.CollectedField, obj *entity.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNDateTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_updatedAt(ctx context.Context, field graphql.CollectedField, obj *entity.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNDateTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationConnection_edges(ctx context.Context, field graphql.CollectedField, obj entity.OrganizationConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*entity.OrganizationEdge)
	fc.Result = res
	return ec.marshalOOrganizationEdge2ᚕᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐOrganizationEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj entity.OrganizationConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*entity.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj entity.OrganizationConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationConnection_nodes(ctx context.Context, field graphql.CollectedField, obj entity.OrganizationConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*entity.Organization)
	fc.Result = res
	return ec.marshalOOrganization2ᚕᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *entity.OrganizationEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalNString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationEdge_node(ctx context.Context, field graphql.CollectedField, obj *entity.OrganizationEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(entity.Organization)
	fc.Result = res
	return ec.marshalOOrganization2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) _Owner_id(ctx context.Context, field graphql.CollectedField, obj *common.Account) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Owner",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Owner_slug(ctx context.Context, field graphql.CollectedField, obj *common.Account) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Owner",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Slug, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PageInfo_hasNextPage(ctx context.Context, field graphql.CollectedField, obj *entity.PageInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasNextPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _PageInfo_hasPreviousPage(ctx context.Context, field graphql.CollectedField, obj *entity.PageInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasPreviousPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _PageInfo_startCursor(ctx context.Context, field graphql.CollectedField, obj *entity.PageInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartCursor(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PageInfo_endCursor(ctx context.Context, field graphql.CollectedField, obj *entity.PageInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndCursor(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Progress_status(ctx context.Context, field graphql.CollectedField, obj *manage.Progress) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Progress",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(status.Stage)
	fc.Result = res
	return ec.marshalNStage2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋpkgᚋstatusᚐStage(ctx, field.Selections, res)
}

func (ec *executionContext) _Progress_total(ctx context.Context, field graphql.CollectedField, obj *manage.Progress) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Progress",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Progress_current(ctx context.Context, field graphql.CollectedField, obj *manage.Progress) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Progress",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Current, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProgressEvent_target(ctx context.Context, field graphql.CollectedField, obj *manage.ProgressObservable) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProgressEvent",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Target(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProgressEvent_progress(ctx context.Context, field graphql.CollectedField, obj *manage.ProgressObservable) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProgressEvent",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Progress(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*manage.Progress)
	fc.Result = res
	return ec.marshalNProgress2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋpkgᚋmanageᚐProgress(ctx, field.Selections, res)
}

func (ec *executionContext) _PullRequest_id(ctx context.Context, field graphql.CollectedField, obj *entity.PullRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PullRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(identifier.PullRequestID)
	fc.Result = res
	return ec.marshalNID2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋpkgᚋidentifierᚐPullRequestID(ctx, field.Selections, res)
}

func (ec *executionContext) _PullRequest_status(ctx context.Context, field graphql.CollectedField, obj *entity.PullRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PullRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(status.Stage)
	fc.Result = res
	return ec.marshalNStage2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋpkgᚋstatusᚐStage(ctx, field.Selections, res)
}

func (ec *executionContext) _PullRequest_progress(ctx context.Context, field graphql.CollectedField, obj *entity.PullRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PullRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PullRequest().Progress(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*manage.Progress)
	fc.Result = res
	return ec.marshalOProgress2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋpkgᚋmanageᚐProgress(ctx, field.Selections, res)
}

func (ec *executionContext) _PullRequest_source(ctx context.Context, field graphql.CollectedField, obj *entity.PullRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PullRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(common.PullRequest)
	fc.Result = res
	return ec.marshalNPullRequestSource2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑcommonᚋcommonᚐPullRequest(ctx, field.Selections, res)
}

func (ec *executionContext) _PullRequest_commits(ctx context.Context, field graphql.CollectedField, obj *entity.PullRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PullRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_PullRequest_commits_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PullRequest().Commits(rctx, obj, args["first"].(*int), args["after"].(*string), args["last"].(*int), args["before"].(*string), args["direction"].(*entity.OrderDirection))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entity.CommitConnection)
	fc.Result = res
	return ec.marshalNCommitConnection2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐCommitConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _PullRequest_createdAt(ctx context.Context, field graphql.CollectedField, obj *entity.PullRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PullRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNDateTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _PullRequest_updatedAt(ctx context.Context, field graphql.CollectedField, obj *entity.PullRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PullRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNDateTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _PullRequestConnection_edges(ctx context.Context, field graphql.CollectedField, obj entity.PullRequestConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PullRequestConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*entity.PullRequestEdge)
	fc.Result = res
	return ec.marshalOPullRequestEdge2ᚕᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐPullRequestEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _PullRequestConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj entity.PullRequestConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PullRequestConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*entity.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _PullRequestConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj entity.PullRequestConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PullRequestConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _PullRequestConnection_nodes(ctx context.Context, field graphql.CollectedField, obj entity.PullRequestConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PullRequestConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*entity.PullRequest)
	fc.Result = res
	return ec.marshalOPullRequest2ᚕᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐPullRequest(ctx, field.Selections, res)
}

func (ec *executionContext) _PullRequestEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *entity.PullRequestEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PullRequestEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalNString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PullRequestEdge_node(ctx context.Context, field graphql.CollectedField, obj *entity.PullRequestEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PullRequestEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(entity.PullRequest)
	fc.Result = res
	return ec.marshalOPullRequest2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐPullRequest(ctx, field.Selections, res)
}

func (ec *executionContext) _PullRequestSource_id(ctx context.Context, field graphql.CollectedField, obj *common.PullRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PullRequestSource",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PullRequestSource_number(ctx context.Context, field graphql.CollectedField, obj *common.PullRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PullRequestSource",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Number, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _PullRequestSource_title(ctx context.Context, field graphql.CollectedField, obj *common.PullRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PullRequestSource",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PullRequestSource_body(ctx context.Context, field graphql.CollectedField, obj *common.PullRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PullRequestSource",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Body, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PullRequestSource_closed(ctx context.Context, field graphql.CollectedField, obj *common.PullRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PullRequestSource",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Closed(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _PullRequestSource_closedAt(ctx context.Context, field graphql.CollectedField, obj *common.PullRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PullRequestSource",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClosedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalODateTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _PullRequestSource_mergedAt(ctx context.Context, field graphql.CollectedField, obj *common.PullRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PullRequestSource",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MergedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalODateTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _PullRequestSource_merged(ctx context.Context, field graphql.CollectedField, obj *common.PullRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PullRequestSource",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Merged(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _PullRequestSource_head(ctx context.Context, field graphql.CollectedField, obj *common.PullRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PullRequestSource",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PullRequestSource().Head(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Branch)
	fc.Result = res
	return ec.marshalOBranch2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐBranch(ctx, field.Selections, res)
}

func (ec *executionContext) _PullRequestSource_base(ctx context.Context, field graphql.CollectedField, obj *common.PullRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PullRequestSource",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PullRequestSource().Base(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Branch)
	fc.Result = res
	return ec.marshalOBranch2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐBranch(ctx, field.Selections, res)
}

func (ec *executionContext) _PullRequestSource_createdAt(ctx context.Context, field graphql.CollectedField, obj *common.PullRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PullRequestSource",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNDateTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _PullRequestSource_updatedAt(ctx context.Context, field graphql.CollectedField, obj *common.PullRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PullRequestSource",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNDateTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_viewer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Viewer(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalNUser2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_repository(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_repository_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Repository(rctx, args["provider"].(string), args["owner"].(string), args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Repository)
	fc.Result = res
	return ec.marshalORepository2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐRepository(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_repositories(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_repositories_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Repositories(rctx, args["first"].(*int), args["after"].(*string), args["last"].(*int), args["before"].(*string), args["direction"].(*entity.OrderDirection))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entity.RepositoryConnection)
	fc.Result = res
	return ec.marshalNRepositoryConnection2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐRepositoryConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_organizations(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_organizations_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Organizations(rctx, args["first"].(*int), args["after"].(*string), args["last"].(*int), args["before"].(*string), args["direction"].(*entity.OrderDirection))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entity.OrganizationConnection)
	fc.Result = res
	return ec.marshalNOrganizationConnection2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐOrganizationConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_organization(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_organization_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Organization(rctx, args["provider"].(string), args["owner"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Organization)
	fc.Result = res
	return ec.marshalOOrganization2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_node(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_node_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Node(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(model.Node)
	fc.Result = res
	return ec.marshalONode2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋgraphᚋmodelᚐNode(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_activity(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Activity(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Activity)
	fc.Result = res
	return ec.marshalOActivity2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋgraphᚋmodelᚐActivity(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_feedback(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_feedback_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Feedback(rctx, args["first"].(*int), args["after"].(*string), args["last"].(*int), args["before"].(*string), args["direction"].(*entity.OrderDirection))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(entity.FeedbackConnection)
	fc.Result = res
	return ec.marshalOFeedbackConnection2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐFeedbackConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _Repository_id(ctx context.Context, field graphql.CollectedField, obj *entity.Repository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Repository",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(identifier.RepositoryID)
	fc.Result = res
	return ec.marshalNID2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋpkgᚋidentifierᚐRepositoryID(ctx, field.Selections, res)
}

func (ec *executionContext) _Repository_databaseId(ctx context.Context, field graphql.CollectedField, obj *entity.Repository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Repository",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Repository().DatabaseID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Repository_name(ctx context.Context, field graphql.CollectedField, obj *entity.Repository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Repository",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Repository().Name(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Repository_status(ctx context.Context, field graphql.CollectedField, obj *entity.Repository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Repository",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(status.Stage)
	fc.Result = res
	return ec.marshalNStage2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋpkgᚋstatusᚐStage(ctx, field.Selections, res)
}

func (ec *executionContext) _Repository_providerSCM(ctx context.Context, field graphql.CollectedField, obj *entity.Repository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Repository",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProviderSCM, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Repository_source(ctx context.Context, field graphql.CollectedField, obj *entity.Repository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Repository",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(common.Repository)
	fc.Result = res
	return ec.marshalNRepositorySource2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑcommonᚋcommonᚐRepository(ctx, field.Selections, res)
}

func (ec *executionContext) _Repository_commit(ctx context.Context, field graphql.CollectedField, obj *entity.Repository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Repository",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Repository_commit_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Repository().Commit(rctx, obj, args["hash"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Commit)
	fc.Result = res
	return ec.marshalOCommit2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐCommit(ctx, field.Selections, res)
}

func (ec *executionContext) _Repository_pullRequest(ctx context.Context, field graphql.CollectedField, obj *entity.Repository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Repository",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Repository_pullRequest_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Repository().PullRequest(rctx, obj, args["number"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.PullRequest)
	fc.Result = res
	return ec.marshalOPullRequest2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐPullRequest(ctx, field.Selections, res)
}

func (ec *executionContext) _Repository_owner(ctx context.Context, field graphql.CollectedField, obj *entity.Repository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Repository",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(common.Account)
	fc.Result = res
	return ec.marshalNOwner2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑcommonᚋcommonᚐAccount(ctx, field.Selections, res)
}

func (ec *executionContext) _Repository_progress(ctx context.Context, field graphql.CollectedField, obj *entity.Repository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Repository",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Repository().Progress(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*manage.Progress)
	fc.Result = res
	return ec.marshalOProgress2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋpkgᚋmanageᚐProgress(ctx, field.Selections, res)
}

func (ec *executionContext) _Repository_checksConfig(ctx context.Context, field graphql.CollectedField, obj *entity.Repository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Repository",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChecksConfig, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.ChecksConfig)
	fc.Result = res
	return ec.marshalOChecksConfig2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐChecksConfig(ctx, field.Selections, res)
}

func (ec *executionContext) _Repository_viewerIsMonitor(ctx context.Context, field graphql.CollectedField, obj *entity.Repository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Repository",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Repository().ViewerIsMonitor(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Repository_monitorCount(ctx context.Context, field graphql.CollectedField, obj *entity.Repository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Repository",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Repository().MonitorCount(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Repository_commits(ctx context.Context, field graphql.CollectedField, obj *entity.Repository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Repository",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Repository_commits_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Repository().Commits(rctx, obj, args["first"].(*int), args["after"].(*string), args["last"].(*int), args["before"].(*string), args["direction"].(*entity.OrderDirection), args["filters"].(*entity.CommitFilters))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entity.CommitConnection)
	fc.Result = res
	return ec.marshalNCommitConnection2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐCommitConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Repository_pullRequests(ctx context.Context, field graphql.CollectedField, obj *entity.Repository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Repository",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Repository_pullRequests_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Repository().PullRequests(rctx, obj, args["first"].(*int), args["after"].(*string), args["last"].(*int), args["before"].(*string), args["direction"].(*entity.OrderDirection))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entity.PullRequestConnection)
	fc.Result = res
	return ec.marshalNPullRequestConnection2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐPullRequestConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Repository_jobs(ctx context.Context, field graphql.CollectedField, obj *entity.Repository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Repository",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Repository_jobs_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Repository().Jobs(rctx, obj, args["first"].(*int), args["after"].(*string), args["last"].(*int), args["before"].(*string), args["direction"].(*entity.OrderDirection))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entity.JobConnection)
	fc.Result = res
	return ec.marshalNJobConnection2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐJobConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Repository_branches(ctx context.Context, field graphql.CollectedField, obj *entity.Repository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Repository",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Repository().Branches(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*entity.Branch)
	fc.Result = res
	return ec.marshalNBranch2ᚕᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐBranchᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Repository_developerEmails(ctx context.Context, field graphql.CollectedField, obj *entity.Repository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Repository",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Repository().DeveloperEmails(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Repository_developerNames(ctx context.Context, field graphql.CollectedField, obj *entity.Repository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Repository",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Repository().DeveloperNames(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Repository_Confidence(ctx context.Context, field graphql.CollectedField, obj *entity.Repository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Repository",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Confidence, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(float32)
	fc.Result = res
	return ec.marshalOFloat2float32(ctx, field.Selections, res)
}

func (ec *executionContext) _Repository_PredictionStatus(ctx context.Context, field graphql.CollectedField, obj *entity.Repository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Repository",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Repository().PredictionStatus(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Repository_commitsCount(ctx context.Context, field graphql.CollectedField, obj *entity.Repository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Repository",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommitsCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Repository_commitPredictionsCount(ctx context.Context, field graphql.CollectedField, obj *entity.Repository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Repository",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Repository().CommitPredictionsCount(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Repository_buggyCommitsCount(ctx context.Context, field graphql.CollectedField, obj *entity.Repository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Repository",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Repository().BuggyCommitsCount(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Repository_fixCommitsCount(ctx context.Context, field graphql.CollectedField, obj *entity.Repository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Repository",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Repository().FixCommitsCount(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Repository_branchesCount(ctx context.Context, field graphql.CollectedField, obj *entity.Repository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Repository",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Repository().BranchesCount(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Repository_contributorsCount(ctx context.Context, field graphql.CollectedField, obj *entity.Repository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Repository",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Repository().ContributorsCount(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Repository_collaboratorsCount(ctx context.Context, field graphql.CollectedField, obj *entity.Repository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Repository",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CollaboratorsCount(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Repository_buggyCommitsOverTime(ctx context.Context, field graphql.CollectedField, obj *entity.Repository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Repository",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Repository().BuggyCommitsOverTime(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CountOverTimeConnection)
	fc.Result = res
	return ec.marshalOCountOverTimeConnection2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋgraphᚋmodelᚐCountOverTimeConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Repository_commitsOverTime(ctx context.Context, field graphql.CollectedField, obj *entity.Repository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Repository",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Repository().CommitsOverTime(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CountOverTimeConnection)
	fc.Result = res
	return ec.marshalOCountOverTimeConnection2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋgraphᚋmodelᚐCountOverTimeConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Repository_tagsCount(ctx context.Context, field graphql.CollectedField, obj *entity.Repository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Repository",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Repository().TagsCount(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TagsCountConnection)
	fc.Result = res
	return ec.marshalOTagsCountConnection2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋgraphᚋmodelᚐTagsCountConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Repository_avgEntropyOverTime(ctx context.Context, field graphql.CollectedField, obj *entity.Repository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Repository",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Repository().AvgEntropyOverTime(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AvgOverTimeConnection)
	fc.Result = res
	return ec.marshalOAvgOverTimeConnection2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋgraphᚋmodelᚐAvgOverTimeConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Repository_avgCommitFilesOverTime(ctx context.Context, field graphql.CollectedField, obj *entity.Repository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Repository",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Repository().AvgCommitFilesOverTime(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AvgOverTimeConnection)
	fc.Result = res
	return ec.marshalOAvgOverTimeConnection2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋgraphᚋmodelᚐAvgOverTimeConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Repository_viewerCanAdminister(ctx context.Context, field graphql.CollectedField, obj *entity.Repository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Repository",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Repository().ViewerCanAdminister(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Repository_createdAt(ctx context.Context, field graphql.CollectedField, obj *entity.Repository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Repository",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNDateTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Repository_updatedAt(ctx context.Context, field graphql.CollectedField, obj *entity.Repository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Repository",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNDateTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RepositoryConnection_edges(ctx context.Context, field graphql.CollectedField, obj entity.RepositoryConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RepositoryConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*entity.RepositoryEdge)
	fc.Result = res
	return ec.marshalORepositoryEdge2ᚕᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐRepositoryEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _RepositoryConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj entity.RepositoryConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RepositoryConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*entity.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _RepositoryConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj entity.RepositoryConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RepositoryConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _RepositoryConnection_nodes(ctx context.Context, field graphql.CollectedField, obj entity.RepositoryConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RepositoryConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*entity.Repository)
	fc.Result = res
	return ec.marshalORepository2ᚕᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐRepository(ctx, field.Selections, res)
}

func (ec *executionContext) _RepositoryEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *entity.RepositoryEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RepositoryEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalNString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RepositoryEdge_node(ctx context.Context, field graphql.CollectedField, obj *entity.RepositoryEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RepositoryEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(entity.Repository)
	fc.Result = res
	return ec.marshalORepository2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐRepository(ctx, field.Selections, res)
}

func (ec *executionContext) _RepositorySource_id(ctx context.Context, field graphql.CollectedField, obj *common.Repository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RepositorySource",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RepositorySource_repoName(ctx context.Context, field graphql.CollectedField, obj *common.Repository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RepositorySource",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RepoName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RepositorySource_url(ctx context.Context, field graphql.CollectedField, obj *common.Repository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RepositorySource",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.RepositorySource().URL(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RepositorySource_defaultBranch(ctx context.Context, field graphql.CollectedField, obj *common.Repository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RepositorySource",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultBranch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RepositorySource_description(ctx context.Context, field graphql.CollectedField, obj *common.Repository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RepositorySource",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RepositorySource_private(ctx context.Context, field graphql.CollectedField, obj *common.Repository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RepositorySource",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Private, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _RepositorySource_createdAt(ctx context.Context, field graphql.CollectedField, obj *common.Repository) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RepositorySource",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNDateTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Signature_name(ctx context.Context, field graphql.CollectedField, obj *engine.Signature) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Signature",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Signature_email(ctx context.Context, field graphql.CollectedField, obj *engine.Signature) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Signature",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Signature_date(ctx context.Context, field graphql.CollectedField, obj *engine.Signature) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Signature",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.When, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNDateTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _StopRepositoryMonitoringPayload_repository(ctx context.Context, field graphql.CollectedField, obj *model.StopRepositoryMonitoringPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StopRepositoryMonitoringPayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Repository, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Repository)
	fc.Result = res
	return ec.marshalORepository2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐRepository(ctx, field.Selections, res)
}

func (ec *executionContext) _Subscription_changeProgress(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_changeProgress_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().ChangeProgress(rctx, args["ids"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *manage.ProgressObservable)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNProgressEvent2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋpkgᚋmanageᚐProgressObservable(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _TagCount_tag(ctx context.Context, field graphql.CollectedField, obj *entity.TagCount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TagCount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tag, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(classify.Tag)
	fc.Result = res
	return ec.marshalNTag2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋpkgᚋclassifyᚐTag(ctx, field.Selections, res)
}

func (ec *executionContext) _TagCount_count(ctx context.Context, field graphql.CollectedField, obj *entity.TagCount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TagCount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _TagsCountConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *model.TagsCountConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TagsCountConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*entity.TagCount)
	fc.Result = res
	return ec.marshalOTagCount2ᚕᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐTagCountᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _UpdateRepositoryPayload_repository(ctx context.Context, field graphql.CollectedField, obj *model.UpdateRepositoryPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UpdateRepositoryPayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Repository, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Repository)
	fc.Result = res
	return ec.marshalORepository2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐRepository(ctx, field.Selections, res)
}

func (ec *executionContext) _UpdateRepositoryPayload_errors(ctx context.Context, field graphql.CollectedField, obj *model.UpdateRepositoryPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UpdateRepositoryPayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Errors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _User_id(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(identifier.UserID)
	fc.Result = res
	return ec.marshalNID2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋpkgᚋidentifierᚐUserID(ctx, field.Selections, res)
}

func (ec *executionContext) _User_username(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Username, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_firstName(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_lastName(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_avatarUrl(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AvatarURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_role(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Role, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(permission.Role)
	fc.Result = res
	return ec.marshalORole2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑaccountsᚋpkgᚋpermissionᚐRole(ctx, field.Selections, res)
}

func (ec *executionContext) _User_providers(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Providers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*common.User)
	fc.Result = res
	return ec.marshalOUserProviderInfo2ᚕᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑcommonᚋcommonᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _User_repositories(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_User_repositories_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.User().Repositories(rctx, obj, args["first"].(*int), args["after"].(*string), args["last"].(*int), args["before"].(*string), args["direction"].(*entity.OrderDirection), args["ownerAffiliations"].([]entity.RepositoryAffiliation))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entity.RepositoryConnection)
	fc.Result = res
	return ec.marshalNRepositoryConnection2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐRepositoryConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _UserProviderInfo_provider(ctx context.Context, field graphql.CollectedField, obj *common.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserProviderInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Provider, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserProviderInfo_id(ctx context.Context, field graphql.CollectedField, obj *common.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserProviderInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserProviderInfo_username(ctx context.Context, field graphql.CollectedField, obj *common.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserProviderInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Username, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserProviderInfo_fullName(ctx context.Context, field graphql.CollectedField, obj *common.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserProviderInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FullName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserProviderInfo_avatarURL(ctx context.Context, field graphql.CollectedField, obj *common.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserProviderInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AvatarURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserProviderInfo_location(ctx context.Context, field graphql.CollectedField, obj *common.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserProviderInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Location, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserProviderInfo_homePage(ctx context.Context, field graphql.CollectedField, obj *common.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserProviderInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HomePage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VisitOverTime_date(ctx context.Context, field graphql.CollectedField, obj *entity.VisitOverTime) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VisitOverTime",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VisitOverTime_visitors(ctx context.Context, field graphql.CollectedField, obj *entity.VisitOverTime) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VisitOverTime",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Visitors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _VisitOverTime_views(ctx context.Context, field graphql.CollectedField, obj *entity.VisitOverTime) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VisitOverTime",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Views, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _VisitOverTimeConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *model.VisitOverTimeConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VisitOverTimeConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*entity.VisitOverTime)
	fc.Result = res
	return ec.marshalOVisitOverTime2ᚕᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐVisitOverTimeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputAddPublicRepositoryInput(ctx context.Context, obj interface{}) (model.AddPublicRepositoryInput, error) {
	var it model.AddPublicRepositoryInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "provider":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provider"))
			it.Provider, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameWithOwner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameWithOwner"))
			it.NameWithOwner, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputChecksConfigInput(ctx context.Context, obj interface{}) (model.ChecksConfigInput, error) {
	var it model.ChecksConfigInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "enable":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enable"))
			it.Enable, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCommitFilters(ctx context.Context, obj interface{}) (entity.CommitFilters, error) {
	var it entity.CommitFilters
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "branch":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("branch"))
			it.Branch, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "developerName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("developerName"))
			it.DeveloperName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "minRisk":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("minRisk"))
			it.MinRisk, err = ec.unmarshalOFloat2ᚖfloat32(ctx, v)
			if err != nil {
				return it, err
			}
		case "maxRisk":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxRisk"))
			it.MaxRisk, err = ec.unmarshalOFloat2ᚖfloat32(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteCommitTagInput(ctx context.Context, obj interface{}) (model.DeleteCommitTagInput, error) {
	var it model.DeleteCommitTagInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "commitID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commitID"))
			it.CommitID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "tag":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag"))
			it.Tag, err = ec.unmarshalNTag2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋpkgᚋclassifyᚐTag(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSendCommitFeedbackInput(ctx context.Context, obj interface{}) (model.SendCommitFeedbackInput, error) {
	var it model.SendCommitFeedbackInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "commitID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commitID"))
			it.CommitID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "message":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message"))
			it.Message, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateRepositoryInput(ctx context.Context, obj interface{}) (model.UpdateRepositoryInput, error) {
	var it model.UpdateRepositoryInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "checksConfig":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("checksConfig"))
			it.ChecksConfig, err = ec.unmarshalOChecksConfigInput2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋgraphᚋmodelᚐChecksConfigInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _Node(ctx context.Context, sel ast.SelectionSet, obj model.Node) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case *model.User:
		if obj == nil {
			return graphql.Null
		}
		return ec._User(ctx, sel, obj)
	case *entity.Organization:
		if obj == nil {
			return graphql.Null
		}
		return ec._Organization(ctx, sel, obj)
	case *entity.Repository:
		if obj == nil {
			return graphql.Null
		}
		return ec._Repository(ctx, sel, obj)
	case *entity.PullRequest:
		if obj == nil {
			return graphql.Null
		}
		return ec._PullRequest(ctx, sel, obj)
	case *entity.Commit:
		if obj == nil {
			return graphql.Null
		}
		return ec._Commit(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _Progressable(ctx context.Context, sel ast.SelectionSet, obj model.Progressable) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case *entity.Repository:
		if obj == nil {
			return graphql.Null
		}
		return ec._Repository(ctx, sel, obj)
	case *entity.PullRequest:
		if obj == nil {
			return graphql.Null
		}
		return ec._PullRequest(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var activityImplementors = []string{"Activity"}

func (ec *executionContext) _Activity(ctx context.Context, sel ast.SelectionSet, obj *model.Activity) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, activityImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Activity")
		case "repositoriesTotalCount":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Activity_repositoriesTotalCount(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "repositoriesCount":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Activity_repositoriesCount(ctx, field, obj)
				return res
			})
		case "organizationsTotalCount":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Activity_organizationsTotalCount(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "organizationsCount":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Activity_organizationsCount(ctx, field, obj)
				return res
			})
		case "commitsAnalyzedTotalCount":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Activity_commitsAnalyzedTotalCount(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "commitsAnalyzedCount":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Activity_commitsAnalyzedCount(ctx, field, obj)
				return res
			})
		case "commitsPredictTotalCount":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Activity_commitsPredictTotalCount(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "commitsPredictCount":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Activity_commitsPredictCount(ctx, field, obj)
				return res
			})
		case "jobsTotalCount":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Activity_jobsTotalCount(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "jobsCount":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Activity_jobsCount(ctx, field, obj)
				return res
			})
		case "pullRequestAnalyzedTotalCount":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Activity_pullRequestAnalyzedTotalCount(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "pullRequestAnalyzedCount":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Activity_pullRequestAnalyzedCount(ctx, field, obj)
				return res
			})
		case "viewsTotalCount":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Activity_viewsTotalCount(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "visitorsTotalCount":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Activity_visitorsTotalCount(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "visitCount":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Activity_visitCount(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var addPublicRepositoryPayloadImplementors = []string{"AddPublicRepositoryPayload"}

func (ec *executionContext) _AddPublicRepositoryPayload(ctx context.Context, sel ast.SelectionSet, obj *model.AddPublicRepositoryPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, addPublicRepositoryPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AddPublicRepositoryPayload")
		case "repository":
			out.Values[i] = ec._AddPublicRepositoryPayload_repository(ctx, field, obj)
		case "errors":
			out.Values[i] = ec._AddPublicRepositoryPayload_errors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var avgOverTimeImplementors = []string{"AvgOverTime"}

func (ec *executionContext) _AvgOverTime(ctx context.Context, sel ast.SelectionSet, obj *entity.AvgOverTime) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, avgOverTimeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AvgOverTime")
		case "date":
			out.Values[i] = ec._AvgOverTime_date(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "avg":
			out.Values[i] = ec._AvgOverTime_avg(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var avgOverTimeConnectionImplementors = []string{"AvgOverTimeConnection"}

func (ec *executionContext) _AvgOverTimeConnection(ctx context.Context, sel ast.SelectionSet, obj *model.AvgOverTimeConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, avgOverTimeConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AvgOverTimeConnection")
		case "nodes":
			out.Values[i] = ec._AvgOverTimeConnection_nodes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var branchImplementors = []string{"Branch"}

func (ec *executionContext) _Branch(ctx context.Context, sel ast.SelectionSet, obj *entity.Branch) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, branchImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Branch")
		case "name":
			out.Values[i] = ec._Branch_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sha":
			out.Values[i] = ec._Branch_sha(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cloneURL":
			out.Values[i] = ec._Branch_cloneURL(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var bugIndicatorsImplementors = []string{"BugIndicators"}

func (ec *executionContext) _BugIndicators(ctx context.Context, sel ast.SelectionSet, obj *entity.BugIndicators) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, bugIndicatorsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BugIndicators")
		case "experience":
			out.Values[i] = ec._BugIndicators_experience(ctx, field, obj)
		case "history":
			out.Values[i] = ec._BugIndicators_history(ctx, field, obj)
		case "size":
			out.Values[i] = ec._BugIndicators_size(ctx, field, obj)
		case "diffusion":
			out.Values[i] = ec._BugIndicators_diffusion(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var changeMeasuresImplementors = []string{"ChangeMeasures"}

func (ec *executionContext) _ChangeMeasures(ctx context.Context, sel ast.SelectionSet, obj *metrics.ChangeMeasures) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, changeMeasuresImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ChangeMeasures")
		case "ns":
			out.Values[i] = ec._ChangeMeasures_ns(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nd":
			out.Values[i] = ec._ChangeMeasures_nd(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nf":
			out.Values[i] = ec._ChangeMeasures_nf(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "entropy":
			out.Values[i] = ec._ChangeMeasures_entropy(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "la":
			out.Values[i] = ec._ChangeMeasures_la(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ld":
			out.Values[i] = ec._ChangeMeasures_ld(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ha":
			out.Values[i] = ec._ChangeMeasures_ha(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hd":
			out.Values[i] = ec._ChangeMeasures_hd(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lt":
			out.Values[i] = ec._ChangeMeasures_lt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ndev":
			out.Values[i] = ec._ChangeMeasures_ndev(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "age":
			out.Values[i] = ec._ChangeMeasures_age(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nuc":
			out.Values[i] = ec._ChangeMeasures_nuc(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "exp":
			out.Values[i] = ec._ChangeMeasures_exp(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "rexp":
			out.Values[i] = ec._ChangeMeasures_rexp(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sexp":
			out.Values[i] = ec._ChangeMeasures_sexp(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var checksConfigImplementors = []string{"ChecksConfig"}

func (ec *executionContext) _ChecksConfig(ctx context.Context, sel ast.SelectionSet, obj *entity.ChecksConfig) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, checksConfigImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ChecksConfig")
		case "enable":
			out.Values[i] = ec._ChecksConfig_enable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commitImplementors = []string{"Commit", "Node"}

func (ec *executionContext) _Commit(ctx context.Context, sel ast.SelectionSet, obj *entity.Commit) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commitImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commit")
		case "id":
			out.Values[i] = ec._Commit_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "hash":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Commit_hash(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "author":
			out.Values[i] = ec._Commit_author(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "message":
			out.Values[i] = ec._Commit_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "metrics":
			out.Values[i] = ec._Commit_metrics(ctx, field, obj)
		case "analysis":
			out.Values[i] = ec._Commit_analysis(ctx, field, obj)
		case "tags":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Commit_tags(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "deletedTags":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Commit_deletedTags(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "files":
			out.Values[i] = ec._Commit_files(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "fix":
			out.Values[i] = ec._Commit_fix(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "fixed":
			out.Values[i] = ec._Commit_fixed(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "fixes":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Commit_fixes(ctx, field, obj)
				return res
			})
		case "issues":
			out.Values[i] = ec._Commit_issues(ctx, field, obj)
		case "repository":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Commit_repository(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commitAnalysisImplementors = []string{"CommitAnalysis"}

func (ec *executionContext) _CommitAnalysis(ctx context.Context, sel ast.SelectionSet, obj *entity.CommitAnalysis) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commitAnalysisImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CommitAnalysis")
		case "bugPotential":
			out.Values[i] = ec._CommitAnalysis_bugPotential(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "indicators":
			out.Values[i] = ec._CommitAnalysis_indicators(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "insights":
			out.Values[i] = ec._CommitAnalysis_insights(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commitConnectionImplementors = []string{"CommitConnection"}

func (ec *executionContext) _CommitConnection(ctx context.Context, sel ast.SelectionSet, obj entity.CommitConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commitConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CommitConnection")
		case "edges":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CommitConnection_edges(ctx, field, obj)
				return res
			})
		case "pageInfo":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CommitConnection_pageInfo(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "totalCount":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CommitConnection_totalCount(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "nodes":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CommitConnection_nodes(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commitEdgeImplementors = []string{"CommitEdge"}

func (ec *executionContext) _CommitEdge(ctx context.Context, sel ast.SelectionSet, obj *entity.CommitEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commitEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CommitEdge")
		case "cursor":
			out.Values[i] = ec._CommitEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._CommitEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commitFileImplementors = []string{"CommitFile"}

func (ec *executionContext) _CommitFile(ctx context.Context, sel ast.SelectionSet, obj *entity.File) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commitFileImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CommitFile")
		case "path":
			out.Values[i] = ec._CommitFile_path(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "oldPath":
			out.Values[i] = ec._CommitFile_oldPath(ctx, field, obj)
		case "subsystem":
			out.Values[i] = ec._CommitFile_subsystem(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "fix":
			out.Values[i] = ec._CommitFile_fix(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "action":
			out.Values[i] = ec._CommitFile_action(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "type":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CommitFile_type(ctx, field, obj)
				return res
			})
		case "language":
			out.Values[i] = ec._CommitFile_language(ctx, field, obj)
		case "fixing":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CommitFile_fixing(ctx, field, obj)
				return res
			})
		case "metrics":
			out.Values[i] = ec._CommitFile_metrics(ctx, field, obj)
		case "insights":
			out.Values[i] = ec._CommitFile_insights(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var countOverTimeImplementors = []string{"CountOverTime"}

func (ec *executionContext) _CountOverTime(ctx context.Context, sel ast.SelectionSet, obj *entity.CountOverTime) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, countOverTimeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CountOverTime")
		case "date":
			out.Values[i] = ec._CountOverTime_date(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "count":
			out.Values[i] = ec._CountOverTime_count(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var countOverTimeConnectionImplementors = []string{"CountOverTimeConnection"}

func (ec *executionContext) _CountOverTimeConnection(ctx context.Context, sel ast.SelectionSet, obj *model.CountOverTimeConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, countOverTimeConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CountOverTimeConnection")
		case "nodes":
			out.Values[i] = ec._CountOverTimeConnection_nodes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteCommitTagPayloadImplementors = []string{"DeleteCommitTagPayload"}

func (ec *executionContext) _DeleteCommitTagPayload(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteCommitTagPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteCommitTagPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteCommitTagPayload")
		case "commit":
			out.Values[i] = ec._DeleteCommitTagPayload_commit(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteRepositoryPayloadImplementors = []string{"DeleteRepositoryPayload"}

func (ec *executionContext) _DeleteRepositoryPayload(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteRepositoryPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteRepositoryPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteRepositoryPayload")
		case "repository":
			out.Values[i] = ec._DeleteRepositoryPayload_repository(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var developerImplementors = []string{"Developer"}

func (ec *executionContext) _Developer(ctx context.Context, sel ast.SelectionSet, obj *entity.Developer) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, developerImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Developer")
		case "name":
			out.Values[i] = ec._Developer_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "email":
			out.Values[i] = ec._Developer_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var feedbackImplementors = []string{"Feedback"}

func (ec *executionContext) _Feedback(ctx context.Context, sel ast.SelectionSet, obj *entity.Feedback) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, feedbackImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Feedback")
		case "id":
			out.Values[i] = ec._Feedback_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "sender":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Feedback_sender(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "message":
			out.Values[i] = ec._Feedback_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "target":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Feedback_target(ctx, field, obj)
				return res
			})
		case "createdAt":
			out.Values[i] = ec._Feedback_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var feedbackConnectionImplementors = []string{"FeedbackConnection"}

func (ec *executionContext) _FeedbackConnection(ctx context.Context, sel ast.SelectionSet, obj entity.FeedbackConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, feedbackConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FeedbackConnection")
		case "edges":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._FeedbackConnection_edges(ctx, field, obj)
				return res
			})
		case "pageInfo":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._FeedbackConnection_pageInfo(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "totalCount":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._FeedbackConnection_totalCount(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "nodes":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._FeedbackConnection_nodes(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var feedbackEdgeImplementors = []string{"FeedbackEdge"}

func (ec *executionContext) _FeedbackEdge(ctx context.Context, sel ast.SelectionSet, obj *entity.FeedbackEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, feedbackEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FeedbackEdge")
		case "cursor":
			out.Values[i] = ec._FeedbackEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._FeedbackEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fileMeasuresImplementors = []string{"FileMeasures"}

func (ec *executionContext) _FileMeasures(ctx context.Context, sel ast.SelectionSet, obj *metrics.FileMeasures) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fileMeasuresImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FileMeasures")
		case "la":
			out.Values[i] = ec._FileMeasures_la(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ld":
			out.Values[i] = ec._FileMeasures_ld(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ha":
			out.Values[i] = ec._FileMeasures_ha(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hd":
			out.Values[i] = ec._FileMeasures_hd(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lt":
			out.Values[i] = ec._FileMeasures_lt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ndev":
			out.Values[i] = ec._FileMeasures_ndev(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "age":
			out.Values[i] = ec._FileMeasures_age(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nuc":
			out.Values[i] = ec._FileMeasures_nuc(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var insightImplementors = []string{"Insight"}

func (ec *executionContext) _Insight(ctx context.Context, sel ast.SelectionSet, obj *insights.Reason) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, insightImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Insight")
		case "icon":
			out.Values[i] = ec._Insight_icon(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Insight_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec._Insight_description(ctx, field, obj)
		case "color":
			out.Values[i] = ec._Insight_color(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var issueImplementors = []string{"Issue"}

func (ec *executionContext) _Issue(ctx context.Context, sel ast.SelectionSet, obj *common.Issue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, issueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Issue")
		case "id":
			out.Values[i] = ec._Issue_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bug":
			out.Values[i] = ec._Issue_bug(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fetched":
			out.Values[i] = ec._Issue_fetched(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Issue_createdAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var jobImplementors = []string{"Job"}

func (ec *executionContext) _Job(ctx context.Context, sel ast.SelectionSet, obj *entity.Job) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, jobImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Job")
		case "id":
			out.Values[i] = ec._Job_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "invoker":
			out.Values[i] = ec._Job_invoker(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "statusLog":
			out.Values[i] = ec._Job_statusLog(ctx, field, obj)
		case "error":
			out.Values[i] = ec._Job_error(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Job_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var jobConnectionImplementors = []string{"JobConnection"}

func (ec *executionContext) _JobConnection(ctx context.Context, sel ast.SelectionSet, obj entity.JobConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, jobConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JobConnection")
		case "edges":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._JobConnection_edges(ctx, field, obj)
				return res
			})
		case "pageInfo":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._JobConnection_pageInfo(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "totalCount":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._JobConnection_totalCount(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "nodes":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._JobConnection_nodes(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var jobEdgeImplementors = []string{"JobEdge"}

func (ec *executionContext) _JobEdge(ctx context.Context, sel ast.SelectionSet, obj *entity.JobEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, jobEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JobEdge")
		case "cursor":
			out.Values[i] = ec._JobEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._JobEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var jobLogEntryImplementors = []string{"JobLogEntry"}

func (ec *executionContext) _JobLogEntry(ctx context.Context, sel ast.SelectionSet, obj *entity.Update) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, jobLogEntryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JobLogEntry")
		case "status":
			out.Values[i] = ec._JobLogEntry_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "statusText":
			out.Values[i] = ec._JobLogEntry_statusText(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "startedAt":
			out.Values[i] = ec._JobLogEntry_startedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var monitorRepositoryPayloadImplementors = []string{"MonitorRepositoryPayload"}

func (ec *executionContext) _MonitorRepositoryPayload(ctx context.Context, sel ast.SelectionSet, obj *model.MonitorRepositoryPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, monitorRepositoryPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MonitorRepositoryPayload")
		case "repository":
			out.Values[i] = ec._MonitorRepositoryPayload_repository(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "updateRepository":
			out.Values[i] = ec._Mutation_updateRepository(ctx, field)
		case "sendCommitFeedback":
			out.Values[i] = ec._Mutation_sendCommitFeedback(ctx, field)
		case "addPublicRepository":
			out.Values[i] = ec._Mutation_addPublicRepository(ctx, field)
		case "stopRepositoryMonitoring":
			out.Values[i] = ec._Mutation_stopRepositoryMonitoring(ctx, field)
		case "monitorRepository":
			out.Values[i] = ec._Mutation_monitorRepository(ctx, field)
		case "deleteRepository":
			out.Values[i] = ec._Mutation_deleteRepository(ctx, field)
		case "deleteCommitTag":
			out.Values[i] = ec._Mutation_deleteCommitTag(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var organizationImplementors = []string{"Organization", "Node"}

func (ec *executionContext) _Organization(ctx context.Context, sel ast.SelectionSet, obj *entity.Organization) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organizationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Organization")
		case "id":
			out.Values[i] = ec._Organization_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "owner":
			out.Values[i] = ec._Organization_owner(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "providerSCM":
			out.Values[i] = ec._Organization_providerSCM(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "avatarURL":
			out.Values[i] = ec._Organization_avatarURL(ctx, field, obj)
		case "providerSetupURL":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Organization_providerSetupURL(ctx, field, obj)
				return res
			})
		case "repositories":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Organization_repositories(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "viewerCanAdminister":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Organization_viewerCanAdminister(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "createdAt":
			out.Values[i] = ec._Organization_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Organization_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var organizationConnectionImplementors = []string{"OrganizationConnection"}

func (ec *executionContext) _OrganizationConnection(ctx context.Context, sel ast.SelectionSet, obj entity.OrganizationConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organizationConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrganizationConnection")
		case "edges":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OrganizationConnection_edges(ctx, field, obj)
				return res
			})
		case "pageInfo":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OrganizationConnection_pageInfo(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "totalCount":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OrganizationConnection_totalCount(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "nodes":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OrganizationConnection_nodes(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var organizationEdgeImplementors = []string{"OrganizationEdge"}

func (ec *executionContext) _OrganizationEdge(ctx context.Context, sel ast.SelectionSet, obj *entity.OrganizationEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organizationEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrganizationEdge")
		case "cursor":
			out.Values[i] = ec._OrganizationEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._OrganizationEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ownerImplementors = []string{"Owner"}

func (ec *executionContext) _Owner(ctx context.Context, sel ast.SelectionSet, obj *common.Account) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ownerImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Owner")
		case "id":
			out.Values[i] = ec._Owner_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "slug":
			out.Values[i] = ec._Owner_slug(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pageInfoImplementors = []string{"PageInfo"}

func (ec *executionContext) _PageInfo(ctx context.Context, sel ast.SelectionSet, obj *entity.PageInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pageInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PageInfo")
		case "hasNextPage":
			out.Values[i] = ec._PageInfo_hasNextPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hasPreviousPage":
			out.Values[i] = ec._PageInfo_hasPreviousPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "startCursor":
			out.Values[i] = ec._PageInfo_startCursor(ctx, field, obj)
		case "endCursor":
			out.Values[i] = ec._PageInfo_endCursor(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var progressImplementors = []string{"Progress"}

func (ec *executionContext) _Progress(ctx context.Context, sel ast.SelectionSet, obj *manage.Progress) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, progressImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Progress")
		case "status":
			out.Values[i] = ec._Progress_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "total":
			out.Values[i] = ec._Progress_total(ctx, field, obj)
		case "current":
			out.Values[i] = ec._Progress_current(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var progressEventImplementors = []string{"ProgressEvent"}

func (ec *executionContext) _ProgressEvent(ctx context.Context, sel ast.SelectionSet, obj *manage.ProgressObservable) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, progressEventImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProgressEvent")
		case "target":
			out.Values[i] = ec._ProgressEvent_target(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "progress":
			out.Values[i] = ec._ProgressEvent_progress(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pullRequestImplementors = []string{"PullRequest", "Node", "Progressable"}

func (ec *executionContext) _PullRequest(ctx context.Context, sel ast.SelectionSet, obj *entity.PullRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pullRequestImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PullRequest")
		case "id":
			out.Values[i] = ec._PullRequest_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "status":
			out.Values[i] = ec._PullRequest_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "progress":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PullRequest_progress(ctx, field, obj)
				return res
			})
		case "source":
			out.Values[i] = ec._PullRequest_source(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "commits":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PullRequest_commits(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "createdAt":
			out.Values[i] = ec._PullRequest_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._PullRequest_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pullRequestConnectionImplementors = []string{"PullRequestConnection"}

func (ec *executionContext) _PullRequestConnection(ctx context.Context, sel ast.SelectionSet, obj entity.PullRequestConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pullRequestConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PullRequestConnection")
		case "edges":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PullRequestConnection_edges(ctx, field, obj)
				return res
			})
		case "pageInfo":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PullRequestConnection_pageInfo(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "totalCount":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PullRequestConnection_totalCount(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "nodes":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PullRequestConnection_nodes(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pullRequestEdgeImplementors = []string{"PullRequestEdge"}

func (ec *executionContext) _PullRequestEdge(ctx context.Context, sel ast.SelectionSet, obj *entity.PullRequestEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pullRequestEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PullRequestEdge")
		case "cursor":
			out.Values[i] = ec._PullRequestEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._PullRequestEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pullRequestSourceImplementors = []string{"PullRequestSource"}

func (ec *executionContext) _PullRequestSource(ctx context.Context, sel ast.SelectionSet, obj *common.PullRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pullRequestSourceImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PullRequestSource")
		case "id":
			out.Values[i] = ec._PullRequestSource_id(ctx, field, obj)
		case "number":
			out.Values[i] = ec._PullRequestSource_number(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "title":
			out.Values[i] = ec._PullRequestSource_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "body":
			out.Values[i] = ec._PullRequestSource_body(ctx, field, obj)
		case "closed":
			out.Values[i] = ec._PullRequestSource_closed(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "closedAt":
			out.Values[i] = ec._PullRequestSource_closedAt(ctx, field, obj)
		case "mergedAt":
			out.Values[i] = ec._PullRequestSource_mergedAt(ctx, field, obj)
		case "merged":
			out.Values[i] = ec._PullRequestSource_merged(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "head":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PullRequestSource_head(ctx, field, obj)
				return res
			})
		case "base":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PullRequestSource_base(ctx, field, obj)
				return res
			})
		case "createdAt":
			out.Values[i] = ec._PullRequestSource_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._PullRequestSource_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "viewer":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_viewer(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "repository":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_repository(ctx, field)
				return res
			})
		case "repositories":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_repositories(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "organizations":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_organizations(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "organization":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_organization(ctx, field)
				return res
			})
		case "node":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_node(ctx, field)
				return res
			})
		case "activity":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_activity(ctx, field)
				return res
			})
		case "feedback":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_feedback(ctx, field)
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var repositoryImplementors = []string{"Repository", "Node", "Progressable"}

func (ec *executionContext) _Repository(ctx context.Context, sel ast.SelectionSet, obj *entity.Repository) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, repositoryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Repository")
		case "id":
			out.Values[i] = ec._Repository_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "databaseId":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Repository_databaseId(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "name":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Repository_name(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "status":
			out.Values[i] = ec._Repository_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "providerSCM":
			out.Values[i] = ec._Repository_providerSCM(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "source":
			out.Values[i] = ec._Repository_source(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "commit":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Repository_commit(ctx, field, obj)
				return res
			})
		case "pullRequest":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Repository_pullRequest(ctx, field, obj)
				return res
			})
		case "owner":
			out.Values[i] = ec._Repository_owner(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "progress":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Repository_progress(ctx, field, obj)
				return res
			})
		case "checksConfig":
			out.Values[i] = ec._Repository_checksConfig(ctx, field, obj)
		case "viewerIsMonitor":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Repository_viewerIsMonitor(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "monitorCount":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Repository_monitorCount(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "commits":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Repository_commits(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "pullRequests":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Repository_pullRequests(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "jobs":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Repository_jobs(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "branches":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Repository_branches(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "developerEmails":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Repository_developerEmails(ctx, field, obj)
				return res
			})
		case "developerNames":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Repository_developerNames(ctx, field, obj)
				return res
			})
		case "Confidence":
			out.Values[i] = ec._Repository_Confidence(ctx, field, obj)
		case "PredictionStatus":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Repository_PredictionStatus(ctx, field, obj)
				return res
			})
		case "commitsCount":
			out.Values[i] = ec._Repository_commitsCount(ctx, field, obj)
		case "commitPredictionsCount":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Repository_commitPredictionsCount(ctx, field, obj)
				return res
			})
		case "buggyCommitsCount":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Repository_buggyCommitsCount(ctx, field, obj)
				return res
			})
		case "fixCommitsCount":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Repository_fixCommitsCount(ctx, field, obj)
				return res
			})
		case "branchesCount":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Repository_branchesCount(ctx, field, obj)
				return res
			})
		case "contributorsCount":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Repository_contributorsCount(ctx, field, obj)
				return res
			})
		case "collaboratorsCount":
			out.Values[i] = ec._Repository_collaboratorsCount(ctx, field, obj)
		case "buggyCommitsOverTime":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Repository_buggyCommitsOverTime(ctx, field, obj)
				return res
			})
		case "commitsOverTime":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Repository_commitsOverTime(ctx, field, obj)
				return res
			})
		case "tagsCount":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Repository_tagsCount(ctx, field, obj)
				return res
			})
		case "avgEntropyOverTime":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Repository_avgEntropyOverTime(ctx, field, obj)
				return res
			})
		case "avgCommitFilesOverTime":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Repository_avgCommitFilesOverTime(ctx, field, obj)
				return res
			})
		case "viewerCanAdminister":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Repository_viewerCanAdminister(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "createdAt":
			out.Values[i] = ec._Repository_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Repository_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var repositoryConnectionImplementors = []string{"RepositoryConnection"}

func (ec *executionContext) _RepositoryConnection(ctx context.Context, sel ast.SelectionSet, obj entity.RepositoryConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, repositoryConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RepositoryConnection")
		case "edges":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._RepositoryConnection_edges(ctx, field, obj)
				return res
			})
		case "pageInfo":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._RepositoryConnection_pageInfo(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "totalCount":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._RepositoryConnection_totalCount(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "nodes":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._RepositoryConnection_nodes(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var repositoryEdgeImplementors = []string{"RepositoryEdge"}

func (ec *executionContext) _RepositoryEdge(ctx context.Context, sel ast.SelectionSet, obj *entity.RepositoryEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, repositoryEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RepositoryEdge")
		case "cursor":
			out.Values[i] = ec._RepositoryEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._RepositoryEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var repositorySourceImplementors = []string{"RepositorySource"}

func (ec *executionContext) _RepositorySource(ctx context.Context, sel ast.SelectionSet, obj *common.Repository) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, repositorySourceImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RepositorySource")
		case "id":
			out.Values[i] = ec._RepositorySource_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "repoName":
			out.Values[i] = ec._RepositorySource_repoName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "url":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._RepositorySource_url(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "defaultBranch":
			out.Values[i] = ec._RepositorySource_defaultBranch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "description":
			out.Values[i] = ec._RepositorySource_description(ctx, field, obj)
		case "private":
			out.Values[i] = ec._RepositorySource_private(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._RepositorySource_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var signatureImplementors = []string{"Signature"}

func (ec *executionContext) _Signature(ctx context.Context, sel ast.SelectionSet, obj *engine.Signature) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, signatureImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Signature")
		case "name":
			out.Values[i] = ec._Signature_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "email":
			out.Values[i] = ec._Signature_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "date":
			out.Values[i] = ec._Signature_date(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var stopRepositoryMonitoringPayloadImplementors = []string{"StopRepositoryMonitoringPayload"}

func (ec *executionContext) _StopRepositoryMonitoringPayload(ctx context.Context, sel ast.SelectionSet, obj *model.StopRepositoryMonitoringPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, stopRepositoryMonitoringPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StopRepositoryMonitoringPayload")
		case "repository":
			out.Values[i] = ec._StopRepositoryMonitoringPayload_repository(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var subscriptionImplementors = []string{"Subscription"}

func (ec *executionContext) _Subscription(ctx context.Context, sel ast.SelectionSet) func() graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subscriptionImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Subscription",
	})
	if len(fields) != 1 {
		ec.Errorf(ctx, "must subscribe to exactly one stream")
		return nil
	}

	switch fields[0].Name {
	case "changeProgress":
		return ec._Subscription_changeProgress(ctx, fields[0])
	default:
		panic("unknown field " + strconv.Quote(fields[0].Name))
	}
}

var tagCountImplementors = []string{"TagCount"}

func (ec *executionContext) _TagCount(ctx context.Context, sel ast.SelectionSet, obj *entity.TagCount) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tagCountImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TagCount")
		case "tag":
			out.Values[i] = ec._TagCount_tag(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "count":
			out.Values[i] = ec._TagCount_count(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var tagsCountConnectionImplementors = []string{"TagsCountConnection"}

func (ec *executionContext) _TagsCountConnection(ctx context.Context, sel ast.SelectionSet, obj *model.TagsCountConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tagsCountConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TagsCountConnection")
		case "nodes":
			out.Values[i] = ec._TagsCountConnection_nodes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateRepositoryPayloadImplementors = []string{"UpdateRepositoryPayload"}

func (ec *executionContext) _UpdateRepositoryPayload(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateRepositoryPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateRepositoryPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateRepositoryPayload")
		case "repository":
			out.Values[i] = ec._UpdateRepositoryPayload_repository(ctx, field, obj)
		case "errors":
			out.Values[i] = ec._UpdateRepositoryPayload_errors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userImplementors = []string{"User", "Node"}

func (ec *executionContext) _User(ctx context.Context, sel ast.SelectionSet, obj *model.User) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("User")
		case "id":
			out.Values[i] = ec._User_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "username":
			out.Values[i] = ec._User_username(ctx, field, obj)
		case "firstName":
			out.Values[i] = ec._User_firstName(ctx, field, obj)
		case "lastName":
			out.Values[i] = ec._User_lastName(ctx, field, obj)
		case "avatarUrl":
			out.Values[i] = ec._User_avatarUrl(ctx, field, obj)
		case "role":
			out.Values[i] = ec._User_role(ctx, field, obj)
		case "providers":
			out.Values[i] = ec._User_providers(ctx, field, obj)
		case "repositories":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_repositories(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userProviderInfoImplementors = []string{"UserProviderInfo"}

func (ec *executionContext) _UserProviderInfo(ctx context.Context, sel ast.SelectionSet, obj *common.User) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userProviderInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserProviderInfo")
		case "provider":
			out.Values[i] = ec._UserProviderInfo_provider(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "id":
			out.Values[i] = ec._UserProviderInfo_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "username":
			out.Values[i] = ec._UserProviderInfo_username(ctx, field, obj)
		case "fullName":
			out.Values[i] = ec._UserProviderInfo_fullName(ctx, field, obj)
		case "avatarURL":
			out.Values[i] = ec._UserProviderInfo_avatarURL(ctx, field, obj)
		case "location":
			out.Values[i] = ec._UserProviderInfo_location(ctx, field, obj)
		case "homePage":
			out.Values[i] = ec._UserProviderInfo_homePage(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var visitOverTimeImplementors = []string{"VisitOverTime"}

func (ec *executionContext) _VisitOverTime(ctx context.Context, sel ast.SelectionSet, obj *entity.VisitOverTime) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, visitOverTimeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VisitOverTime")
		case "date":
			out.Values[i] = ec._VisitOverTime_date(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "visitors":
			out.Values[i] = ec._VisitOverTime_visitors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "views":
			out.Values[i] = ec._VisitOverTime_views(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var visitOverTimeConnectionImplementors = []string{"VisitOverTimeConnection"}

func (ec *executionContext) _VisitOverTimeConnection(ctx context.Context, sel ast.SelectionSet, obj *model.VisitOverTimeConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, visitOverTimeConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VisitOverTimeConnection")
		case "nodes":
			out.Values[i] = ec._VisitOverTimeConnection_nodes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNAddPublicRepositoryInput2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋgraphᚋmodelᚐAddPublicRepositoryInput(ctx context.Context, v interface{}) (model.AddPublicRepositoryInput, error) {
	res, err := ec.unmarshalInputAddPublicRepositoryInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAvgOverTime2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐAvgOverTime(ctx context.Context, sel ast.SelectionSet, v *entity.AvgOverTime) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AvgOverTime(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNBranch2ᚕᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐBranchᚄ(ctx context.Context, sel ast.SelectionSet, v []*entity.Branch) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNBranch2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐBranch(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNBranch2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐBranch(ctx context.Context, sel ast.SelectionSet, v *entity.Branch) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Branch(ctx, sel, v)
}

func (ec *executionContext) marshalNBugIndicators2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐBugIndicators(ctx context.Context, sel ast.SelectionSet, v entity.BugIndicators) graphql.Marshaler {
	return ec._BugIndicators(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommit2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐCommit(ctx context.Context, sel ast.SelectionSet, v *entity.Commit) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Commit(ctx, sel, v)
}

func (ec *executionContext) marshalNCommitConnection2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐCommitConnection(ctx context.Context, sel ast.SelectionSet, v entity.CommitConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CommitConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNCommitFile2ᚕᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐFileᚄ(ctx context.Context, sel ast.SelectionSet, v []*entity.File) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommitFile2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐFile(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNCommitFile2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐFile(ctx context.Context, sel ast.SelectionSet, v *entity.File) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CommitFile(ctx, sel, v)
}

func (ec *executionContext) marshalNCountOverTime2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐCountOverTime(ctx context.Context, sel ast.SelectionSet, v *entity.CountOverTime) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CountOverTime(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDateTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDateTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := graphql.MarshalTime(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNDeleteCommitTagInput2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋgraphᚋmodelᚐDeleteCommitTagInput(ctx context.Context, v interface{}) (model.DeleteCommitTagInput, error) {
	res, err := ec.unmarshalInputDeleteCommitTagInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDeltaType2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋpkgᚋengineᚐDeltaType(ctx context.Context, v interface{}) (engine.DeltaType, error) {
	var res engine.DeltaType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDeltaType2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋpkgᚋengineᚐDeltaType(ctx context.Context, sel ast.SelectionSet, v engine.DeltaType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNFloat2float32(ctx context.Context, v interface{}) (float32, error) {
	res, err := marshals.UnmarshalFloat32(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2float32(ctx context.Context, sel ast.SelectionSet, v float32) graphql.Marshaler {
	res := marshals.MarshalFloat32(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNFrequency2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐFrequency(ctx context.Context, v interface{}) (entity.Frequency, error) {
	var res entity.Frequency
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFrequency2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐFrequency(ctx context.Context, sel ast.SelectionSet, v entity.Frequency) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNID2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋpkgᚋidentifierᚐFeedbackID(ctx context.Context, v interface{}) (identifier.FeedbackID, error) {
	var res identifier.FeedbackID
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋpkgᚋidentifierᚐFeedbackID(ctx context.Context, sel ast.SelectionSet, v identifier.FeedbackID) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNID2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋpkgᚋidentifierᚐJobID(ctx context.Context, v interface{}) (identifier.JobID, error) {
	var res identifier.JobID
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋpkgᚋidentifierᚐJobID(ctx context.Context, sel ast.SelectionSet, v identifier.JobID) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNID2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋpkgᚋidentifierᚐOrganizationID(ctx context.Context, v interface{}) (identifier.OrganizationID, error) {
	var res identifier.OrganizationID
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋpkgᚋidentifierᚐOrganizationID(ctx context.Context, sel ast.SelectionSet, v identifier.OrganizationID) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNID2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋpkgᚋidentifierᚐPullRequestID(ctx context.Context, v interface{}) (identifier.PullRequestID, error) {
	var res identifier.PullRequestID
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋpkgᚋidentifierᚐPullRequestID(ctx context.Context, sel ast.SelectionSet, v identifier.PullRequestID) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNID2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋpkgᚋidentifierᚐRepositoryID(ctx context.Context, v interface{}) (identifier.RepositoryID, error) {
	var res identifier.RepositoryID
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋpkgᚋidentifierᚐRepositoryID(ctx context.Context, sel ast.SelectionSet, v identifier.RepositoryID) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNID2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋpkgᚋidentifierᚐUserID(ctx context.Context, v interface{}) (identifier.UserID, error) {
	var res identifier.UserID
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋpkgᚋidentifierᚐUserID(ctx context.Context, sel ast.SelectionSet, v identifier.UserID) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNID2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNID2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNID2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalNID2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋpkgᚋidentifierᚐCommitID(ctx context.Context, v interface{}) (*identifier.CommitID, error) {
	var res = new(identifier.CommitID)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋpkgᚋidentifierᚐCommitID(ctx context.Context, sel ast.SelectionSet, v *identifier.CommitID) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalNInsight2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋpkgᚋinsightsᚐReason(ctx context.Context, sel ast.SelectionSet, v insights.Reason) graphql.Marshaler {
	return ec._Insight(ctx, sel, &v)
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int64(ctx context.Context, v interface{}) (int64, error) {
	res, err := graphql.UnmarshalInt64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	res := graphql.MarshalInt64(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNIssue2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑcommonᚋcommonᚐIssue(ctx context.Context, sel ast.SelectionSet, v common.Issue) graphql.Marshaler {
	return ec._Issue(ctx, sel, &v)
}

func (ec *executionContext) marshalNJobConnection2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐJobConnection(ctx context.Context, sel ast.SelectionSet, v entity.JobConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._JobConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNJobInvoker2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋpkgᚋinvokeᚐAction(ctx context.Context, v interface{}) (invoke.Action, error) {
	var res invoke.Action
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNJobInvoker2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋpkgᚋinvokeᚐAction(ctx context.Context, sel ast.SelectionSet, v invoke.Action) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNJobLogEntry2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐUpdate(ctx context.Context, sel ast.SelectionSet, v entity.Update) graphql.Marshaler {
	return ec._JobLogEntry(ctx, sel, &v)
}

func (ec *executionContext) marshalNOrganizationConnection2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐOrganizationConnection(ctx context.Context, sel ast.SelectionSet, v entity.OrganizationConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._OrganizationConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNOwner2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑcommonᚋcommonᚐAccount(ctx context.Context, sel ast.SelectionSet, v common.Account) graphql.Marshaler {
	return ec._Owner(ctx, sel, &v)
}

func (ec *executionContext) marshalNPageInfo2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐPageInfo(ctx context.Context, sel ast.SelectionSet, v *entity.PageInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PageInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNProgress2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋpkgᚋmanageᚐProgress(ctx context.Context, sel ast.SelectionSet, v *manage.Progress) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Progress(ctx, sel, v)
}

func (ec *executionContext) marshalNProgressEvent2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋpkgᚋmanageᚐProgressObservable(ctx context.Context, sel ast.SelectionSet, v manage.ProgressObservable) graphql.Marshaler {
	return ec._ProgressEvent(ctx, sel, &v)
}

func (ec *executionContext) marshalNProgressEvent2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋpkgᚋmanageᚐProgressObservable(ctx context.Context, sel ast.SelectionSet, v *manage.ProgressObservable) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ProgressEvent(ctx, sel, v)
}

func (ec *executionContext) marshalNPullRequestConnection2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐPullRequestConnection(ctx context.Context, sel ast.SelectionSet, v entity.PullRequestConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PullRequestConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNPullRequestSource2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑcommonᚋcommonᚐPullRequest(ctx context.Context, sel ast.SelectionSet, v common.PullRequest) graphql.Marshaler {
	return ec._PullRequestSource(ctx, sel, &v)
}

func (ec *executionContext) marshalNRepository2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐRepository(ctx context.Context, sel ast.SelectionSet, v entity.Repository) graphql.Marshaler {
	return ec._Repository(ctx, sel, &v)
}

func (ec *executionContext) marshalNRepository2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐRepository(ctx context.Context, sel ast.SelectionSet, v *entity.Repository) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Repository(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRepositoryAffiliation2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐRepositoryAffiliation(ctx context.Context, v interface{}) (entity.RepositoryAffiliation, error) {
	var res entity.RepositoryAffiliation
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRepositoryAffiliation2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐRepositoryAffiliation(ctx context.Context, sel ast.SelectionSet, v entity.RepositoryAffiliation) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNRepositoryConnection2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐRepositoryConnection(ctx context.Context, sel ast.SelectionSet, v entity.RepositoryConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RepositoryConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNRepositorySource2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑcommonᚋcommonᚐRepository(ctx context.Context, sel ast.SelectionSet, v common.Repository) graphql.Marshaler {
	return ec._RepositorySource(ctx, sel, &v)
}

func (ec *executionContext) unmarshalNSendCommitFeedbackInput2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋgraphᚋmodelᚐSendCommitFeedbackInput(ctx context.Context, v interface{}) (model.SendCommitFeedbackInput, error) {
	res, err := ec.unmarshalInputSendCommitFeedbackInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSignature2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋpkgᚋengineᚐSignature(ctx context.Context, sel ast.SelectionSet, v *engine.Signature) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Signature(ctx, sel, v)
}

func (ec *executionContext) unmarshalNStage2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋpkgᚋstatusᚐStage(ctx context.Context, v interface{}) (status.Stage, error) {
	var res status.Stage
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNStage2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋpkgᚋstatusᚐStage(ctx context.Context, sel ast.SelectionSet, v status.Stage) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalNString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTag2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋpkgᚋclassifyᚐTag(ctx context.Context, v interface{}) (classify.Tag, error) {
	var res classify.Tag
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTag2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋpkgᚋclassifyᚐTag(ctx context.Context, sel ast.SelectionSet, v classify.Tag) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNTagCount2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐTagCount(ctx context.Context, sel ast.SelectionSet, v *entity.TagCount) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._TagCount(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdateRepositoryInput2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋgraphᚋmodelᚐUpdateRepositoryInput(ctx context.Context, v interface{}) (model.UpdateRepositoryInput, error) {
	res, err := ec.unmarshalInputUpdateRepositoryInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUser2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋgraphᚋmodelᚐUser(ctx context.Context, sel ast.SelectionSet, v model.User) graphql.Marshaler {
	return ec._User(ctx, sel, &v)
}

func (ec *executionContext) marshalNUser2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋgraphᚋmodelᚐUser(ctx context.Context, sel ast.SelectionSet, v *model.User) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) marshalNVisitOverTime2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐVisitOverTime(ctx context.Context, sel ast.SelectionSet, v *entity.VisitOverTime) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._VisitOverTime(ctx, sel, v)
}

func (ec *executionContext) unmarshalN_FieldSet2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN_FieldSet2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalOActivity2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋgraphᚋmodelᚐActivity(ctx context.Context, sel ast.SelectionSet, v *model.Activity) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Activity(ctx, sel, v)
}

func (ec *executionContext) marshalOAddPublicRepositoryPayload2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋgraphᚋmodelᚐAddPublicRepositoryPayload(ctx context.Context, sel ast.SelectionSet, v *model.AddPublicRepositoryPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AddPublicRepositoryPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOAvgOverTime2ᚕᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐAvgOverTimeᚄ(ctx context.Context, sel ast.SelectionSet, v []*entity.AvgOverTime) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAvgOverTime2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐAvgOverTime(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOAvgOverTimeConnection2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋgraphᚋmodelᚐAvgOverTimeConnection(ctx context.Context, sel ast.SelectionSet, v *model.AvgOverTimeConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AvgOverTimeConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) marshalOBranch2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐBranch(ctx context.Context, sel ast.SelectionSet, v *entity.Branch) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Branch(ctx, sel, v)
}

func (ec *executionContext) marshalOChangeMeasures2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑcommonᚋmetricsᚐChangeMeasures(ctx context.Context, sel ast.SelectionSet, v *metrics.ChangeMeasures) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ChangeMeasures(ctx, sel, v)
}

func (ec *executionContext) marshalOChecksConfig2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐChecksConfig(ctx context.Context, sel ast.SelectionSet, v *entity.ChecksConfig) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ChecksConfig(ctx, sel, v)
}

func (ec *executionContext) unmarshalOChecksConfigInput2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋgraphᚋmodelᚐChecksConfigInput(ctx context.Context, v interface{}) (*model.ChecksConfigInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputChecksConfigInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCommit2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐCommit(ctx context.Context, sel ast.SelectionSet, v entity.Commit) graphql.Marshaler {
	return ec._Commit(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommit2ᚕᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐCommit(ctx context.Context, sel ast.SelectionSet, v []*entity.Commit) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCommit2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐCommit(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCommit2ᚕᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐCommitᚄ(ctx context.Context, sel ast.SelectionSet, v []*entity.Commit) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommit2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐCommit(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCommit2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐCommit(ctx context.Context, sel ast.SelectionSet, v *entity.Commit) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commit(ctx, sel, v)
}

func (ec *executionContext) marshalOCommitAnalysis2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐCommitAnalysis(ctx context.Context, sel ast.SelectionSet, v *entity.CommitAnalysis) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CommitAnalysis(ctx, sel, v)
}

func (ec *executionContext) marshalOCommitConnection2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐCommitConnection(ctx context.Context, sel ast.SelectionSet, v entity.CommitConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CommitConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOCommitEdge2ᚕᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐCommitEdge(ctx context.Context, sel ast.SelectionSet, v []*entity.CommitEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCommitEdge2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐCommitEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCommitEdge2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐCommitEdge(ctx context.Context, sel ast.SelectionSet, v *entity.CommitEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CommitEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCommitFilters2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐCommitFilters(ctx context.Context, v interface{}) (*entity.CommitFilters, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCommitFilters(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCountOverTime2ᚕᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐCountOverTimeᚄ(ctx context.Context, sel ast.SelectionSet, v []*entity.CountOverTime) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCountOverTime2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐCountOverTime(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCountOverTimeConnection2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋgraphᚋmodelᚐCountOverTimeConnection(ctx context.Context, sel ast.SelectionSet, v *model.CountOverTimeConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CountOverTimeConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalODateTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODateTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	return graphql.MarshalTime(v)
}

func (ec *executionContext) marshalODeleteCommitTagPayload2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋgraphᚋmodelᚐDeleteCommitTagPayload(ctx context.Context, sel ast.SelectionSet, v *model.DeleteCommitTagPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeleteCommitTagPayload(ctx, sel, v)
}

func (ec *executionContext) marshalODeleteRepositoryPayload2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋgraphᚋmodelᚐDeleteRepositoryPayload(ctx context.Context, sel ast.SelectionSet, v *model.DeleteRepositoryPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeleteRepositoryPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOFeedback2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐFeedback(ctx context.Context, sel ast.SelectionSet, v entity.Feedback) graphql.Marshaler {
	return ec._Feedback(ctx, sel, &v)
}

func (ec *executionContext) marshalOFeedback2ᚕᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐFeedback(ctx context.Context, sel ast.SelectionSet, v []*entity.Feedback) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFeedback2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐFeedback(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOFeedback2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐFeedback(ctx context.Context, sel ast.SelectionSet, v *entity.Feedback) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Feedback(ctx, sel, v)
}

func (ec *executionContext) marshalOFeedbackConnection2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐFeedbackConnection(ctx context.Context, sel ast.SelectionSet, v entity.FeedbackConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FeedbackConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOFeedbackEdge2ᚕᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐFeedbackEdge(ctx context.Context, sel ast.SelectionSet, v []*entity.FeedbackEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFeedbackEdge2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐFeedbackEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOFeedbackEdge2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐFeedbackEdge(ctx context.Context, sel ast.SelectionSet, v *entity.FeedbackEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FeedbackEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOFileMeasures2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑcommonᚋmetricsᚐFileMeasures(ctx context.Context, sel ast.SelectionSet, v *metrics.FileMeasures) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FileMeasures(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFloat2float32(ctx context.Context, v interface{}) (float32, error) {
	res, err := marshals.UnmarshalFloat32(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2float32(ctx context.Context, sel ast.SelectionSet, v float32) graphql.Marshaler {
	return marshals.MarshalFloat32(v)
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat32(ctx context.Context, v interface{}) (*float32, error) {
	if v == nil {
		return nil, nil
	}
	res, err := marshals.UnmarshalFloat32(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat32(ctx context.Context, sel ast.SelectionSet, v *float32) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return marshals.MarshalFloat32(*v)
}

func (ec *executionContext) marshalOInsight2ᚕgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋpkgᚋinsightsᚐReasonᚄ(ctx context.Context, sel ast.SelectionSet, v []insights.Reason) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNInsight2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋpkgᚋinsightsᚐReason(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	return graphql.MarshalInt(v)
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*v)
}

func (ec *executionContext) marshalOIssue2ᚕgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑcommonᚋcommonᚐIssueᚄ(ctx context.Context, sel ast.SelectionSet, v []common.Issue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNIssue2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑcommonᚋcommonᚐIssue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOJob2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐJob(ctx context.Context, sel ast.SelectionSet, v entity.Job) graphql.Marshaler {
	return ec._Job(ctx, sel, &v)
}

func (ec *executionContext) marshalOJob2ᚕᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐJob(ctx context.Context, sel ast.SelectionSet, v []*entity.Job) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOJob2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐJob(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOJob2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐJob(ctx context.Context, sel ast.SelectionSet, v *entity.Job) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Job(ctx, sel, v)
}

func (ec *executionContext) marshalOJobEdge2ᚕᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐJobEdge(ctx context.Context, sel ast.SelectionSet, v []*entity.JobEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOJobEdge2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐJobEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOJobEdge2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐJobEdge(ctx context.Context, sel ast.SelectionSet, v *entity.JobEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._JobEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOJobLogEntry2ᚕgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐUpdateᚄ(ctx context.Context, sel ast.SelectionSet, v []entity.Update) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNJobLogEntry2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐUpdate(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOMonitorRepositoryPayload2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋgraphᚋmodelᚐMonitorRepositoryPayload(ctx context.Context, sel ast.SelectionSet, v *model.MonitorRepositoryPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MonitorRepositoryPayload(ctx, sel, v)
}

func (ec *executionContext) marshalONode2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋgraphᚋmodelᚐNode(ctx context.Context, sel ast.SelectionSet, v model.Node) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Node(ctx, sel, v)
}

func (ec *executionContext) unmarshalOOrderDirection2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐOrderDirection(ctx context.Context, v interface{}) (*entity.OrderDirection, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(entity.OrderDirection)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOOrderDirection2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐOrderDirection(ctx context.Context, sel ast.SelectionSet, v *entity.OrderDirection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOOrganization2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐOrganization(ctx context.Context, sel ast.SelectionSet, v entity.Organization) graphql.Marshaler {
	return ec._Organization(ctx, sel, &v)
}

func (ec *executionContext) marshalOOrganization2ᚕᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐOrganization(ctx context.Context, sel ast.SelectionSet, v []*entity.Organization) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOOrganization2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐOrganization(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOOrganization2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐOrganization(ctx context.Context, sel ast.SelectionSet, v *entity.Organization) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Organization(ctx, sel, v)
}

func (ec *executionContext) marshalOOrganizationEdge2ᚕᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐOrganizationEdge(ctx context.Context, sel ast.SelectionSet, v []*entity.OrganizationEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOOrganizationEdge2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐOrganizationEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOOrganizationEdge2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐOrganizationEdge(ctx context.Context, sel ast.SelectionSet, v *entity.OrganizationEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OrganizationEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPeriod2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋgraphᚋmodelᚐPeriod(ctx context.Context, v interface{}) (*model.Period, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.Period)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPeriod2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋgraphᚋmodelᚐPeriod(ctx context.Context, sel ast.SelectionSet, v *model.Period) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOProgress2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋpkgᚋmanageᚐProgress(ctx context.Context, sel ast.SelectionSet, v *manage.Progress) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Progress(ctx, sel, v)
}

func (ec *executionContext) marshalOPullRequest2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐPullRequest(ctx context.Context, sel ast.SelectionSet, v entity.PullRequest) graphql.Marshaler {
	return ec._PullRequest(ctx, sel, &v)
}

func (ec *executionContext) marshalOPullRequest2ᚕᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐPullRequest(ctx context.Context, sel ast.SelectionSet, v []*entity.PullRequest) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPullRequest2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐPullRequest(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOPullRequest2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐPullRequest(ctx context.Context, sel ast.SelectionSet, v *entity.PullRequest) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PullRequest(ctx, sel, v)
}

func (ec *executionContext) marshalOPullRequestEdge2ᚕᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐPullRequestEdge(ctx context.Context, sel ast.SelectionSet, v []*entity.PullRequestEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPullRequestEdge2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐPullRequestEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOPullRequestEdge2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐPullRequestEdge(ctx context.Context, sel ast.SelectionSet, v *entity.PullRequestEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PullRequestEdge(ctx, sel, v)
}

func (ec *executionContext) marshalORepository2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐRepository(ctx context.Context, sel ast.SelectionSet, v entity.Repository) graphql.Marshaler {
	return ec._Repository(ctx, sel, &v)
}

func (ec *executionContext) marshalORepository2ᚕᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐRepository(ctx context.Context, sel ast.SelectionSet, v []*entity.Repository) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORepository2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐRepository(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalORepository2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐRepository(ctx context.Context, sel ast.SelectionSet, v *entity.Repository) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Repository(ctx, sel, v)
}

func (ec *executionContext) unmarshalORepositoryAffiliation2ᚕgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐRepositoryAffiliationᚄ(ctx context.Context, v interface{}) ([]entity.RepositoryAffiliation, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]entity.RepositoryAffiliation, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNRepositoryAffiliation2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐRepositoryAffiliation(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalORepositoryAffiliation2ᚕgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐRepositoryAffiliationᚄ(ctx context.Context, sel ast.SelectionSet, v []entity.RepositoryAffiliation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRepositoryAffiliation2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐRepositoryAffiliation(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalORepositoryEdge2ᚕᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐRepositoryEdge(ctx context.Context, sel ast.SelectionSet, v []*entity.RepositoryEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORepositoryEdge2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐRepositoryEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalORepositoryEdge2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐRepositoryEdge(ctx context.Context, sel ast.SelectionSet, v *entity.RepositoryEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RepositoryEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalORole2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑaccountsᚋpkgᚋpermissionᚐRole(ctx context.Context, v interface{}) (permission.Role, error) {
	var res permission.Role
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORole2githubᚗcomᚋsuhaibmujahidᚋrepofuelᚑaccountsᚋpkgᚋpermissionᚐRole(ctx context.Context, sel ast.SelectionSet, v permission.Role) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalOStopRepositoryMonitoringPayload2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋgraphᚋmodelᚐStopRepositoryMonitoringPayload(ctx context.Context, sel ast.SelectionSet, v *model.StopRepositoryMonitoringPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._StopRepositoryMonitoringPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) marshalOTagCount2ᚕᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐTagCountᚄ(ctx context.Context, sel ast.SelectionSet, v []*entity.TagCount) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTagCount2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐTagCount(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOTagsCountConnection2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋgraphᚋmodelᚐTagsCountConnection(ctx context.Context, sel ast.SelectionSet, v *model.TagsCountConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TagsCountConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOUpdateRepositoryPayload2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋgraphᚋmodelᚐUpdateRepositoryPayload(ctx context.Context, sel ast.SelectionSet, v *model.UpdateRepositoryPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdateRepositoryPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOUserProviderInfo2ᚕᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑcommonᚋcommonᚐUser(ctx context.Context, sel ast.SelectionSet, v []*common.User) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOUserProviderInfo2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑcommonᚋcommonᚐUser(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOUserProviderInfo2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑcommonᚋcommonᚐUser(ctx context.Context, sel ast.SelectionSet, v *common.User) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UserProviderInfo(ctx, sel, v)
}

func (ec *executionContext) marshalOVisitOverTime2ᚕᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐVisitOverTimeᚄ(ctx context.Context, sel ast.SelectionSet, v []*entity.VisitOverTime) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVisitOverTime2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋinternalᚋentityᚐVisitOverTime(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOVisitOverTimeConnection2ᚖgithubᚗcomᚋsuhaibmujahidᚋrepofuelᚑingestᚋgraphᚋmodelᚐVisitOverTimeConnection(ctx context.Context, sel ast.SelectionSet, v *model.VisitOverTimeConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VisitOverTimeConnection(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
