// Code generated by jsonenums -type=Tag; DO NOT EDIT.

package classify

import (
	"encoding/json"
	"fmt"
)

var (
	_TagNameToValue = map[string]Tag{
		"Code":                    Code,
		"NoneCode":                NoneCode,
		"Fix":                     Fix,
		"Bug":                     Bug,
		"Add":                     Add,
		"Update":                  Update,
		"Feature":                 Feature,
		"Tests":                   Tests,
		"Documentations":          Documentations,
		"Refactor":                Refactor,
		"License":                 License,
		"Build":                   Build,
		"CI":                      CI,
		"TechnicalDebt":           TechnicalDebt,
		"Style":                   Style,
		"Release":                 Release,
		"Dependencies":            Dependencies,
		"GeneratedCode":           GeneratedCode,
		"PerformanceImprovements": PerformanceImprovements,
		"Reverts":                 Reverts,
		"MiscellaneousChores":     MiscellaneousChores,
	}

	_TagValueToName = map[Tag]string{
		Code:                    "Code",
		NoneCode:                "NoneCode",
		Fix:                     "Fix",
		Bug:                     "Bug",
		Add:                     "Add",
		Update:                  "Update",
		Feature:                 "Feature",
		Tests:                   "Tests",
		Documentations:          "Documentations",
		Refactor:                "Refactor",
		License:                 "License",
		Build:                   "Build",
		CI:                      "CI",
		TechnicalDebt:           "TechnicalDebt",
		Style:                   "Style",
		Release:                 "Release",
		Dependencies:            "Dependencies",
		GeneratedCode:           "GeneratedCode",
		PerformanceImprovements: "PerformanceImprovements",
		Reverts:                 "Reverts",
		MiscellaneousChores:     "MiscellaneousChores",
	}
)

func init() {
	var v Tag
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_TagNameToValue = map[string]Tag{
			interface{}(Code).(fmt.Stringer).String():                    Code,
			interface{}(NoneCode).(fmt.Stringer).String():                NoneCode,
			interface{}(Fix).(fmt.Stringer).String():                     Fix,
			interface{}(Bug).(fmt.Stringer).String():                     Bug,
			interface{}(Add).(fmt.Stringer).String():                     Add,
			interface{}(Update).(fmt.Stringer).String():                  Update,
			interface{}(Feature).(fmt.Stringer).String():                 Feature,
			interface{}(Tests).(fmt.Stringer).String():                   Tests,
			interface{}(Documentations).(fmt.Stringer).String():          Documentations,
			interface{}(Refactor).(fmt.Stringer).String():                Refactor,
			interface{}(License).(fmt.Stringer).String():                 License,
			interface{}(Build).(fmt.Stringer).String():                   Build,
			interface{}(CI).(fmt.Stringer).String():                      CI,
			interface{}(TechnicalDebt).(fmt.Stringer).String():           TechnicalDebt,
			interface{}(Style).(fmt.Stringer).String():                   Style,
			interface{}(Release).(fmt.Stringer).String():                 Release,
			interface{}(Dependencies).(fmt.Stringer).String():            Dependencies,
			interface{}(GeneratedCode).(fmt.Stringer).String():           GeneratedCode,
			interface{}(PerformanceImprovements).(fmt.Stringer).String(): PerformanceImprovements,
			interface{}(Reverts).(fmt.Stringer).String():                 Reverts,
			interface{}(MiscellaneousChores).(fmt.Stringer).String():     MiscellaneousChores,
		}
	}
}

// MarshalJSON is generated so Tag satisfies json.Marshaler.
func (r Tag) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _TagValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Tag: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Tag satisfies json.Unmarshaler.
func (r *Tag) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Tag should be a string, got %s", data)
	}
	v, ok := _TagNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Tag %q", s)
	}
	*r = v
	return nil
}
