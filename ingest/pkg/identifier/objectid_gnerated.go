// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package identifier

import (
	"encoding/base64"
	"fmt"
	"io"
	"time"

	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/bsontype"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

const (
	_RepositoryIDPrefix = "Repository:"
	_RepositoryIDLen    = len(_RepositoryIDPrefix) + len(RepositoryID{})
)

type RepositoryID primitive.ObjectID

func (id RepositoryID) String() string {
	return id.Hex()
}

func (id *RepositoryID) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("repo ID must be a string")
	}

	b, err := base64.StdEncoding.DecodeString(str)
	if err != nil {
		return err
	}

	if len(b) != _RepositoryIDLen {
		return fmt.Errorf("incorrect CommitID bytes length, it shouhd be %d, got: %d", _RepositoryIDLen, len(b))
	}

	copy(id[:], b[len(_RepositoryIDPrefix):])

	return nil
}

func (id RepositoryID) MarshalGQL(w io.Writer) {
	b := make([]byte, 0, _RepositoryIDLen)
	b = append(b, _RepositoryIDPrefix...)
	b = append(b, id[:]...)

	res := make([]byte, base64.StdEncoding.EncodedLen(_RepositoryIDLen)+2)
	res[0] = '"'
	base64.StdEncoding.Encode(res[1:], b)
	res[len(res)-1] = '"'

	w.Write(res)
}

func (id RepositoryID) NodeID() string {
	b := make([]byte, 0, _RepositoryIDLen)
	b = append(b, _RepositoryIDPrefix...)
	b = append(b, id[:]...)

	res := make([]byte, base64.StdEncoding.EncodedLen(_RepositoryIDLen))
	base64.StdEncoding.Encode(res, b)

	return string(res)
}

func (id *RepositoryID) UnmarshalBSONValue(t bsontype.Type, data []byte) error {
	if t != bsontype.ObjectID {
		return fmt.Errorf("invalid RepositoryID")
	}

	copy(id[:], data)

	return nil
}

func (id RepositoryID) MarshalBSONValue() (bsontype.Type, []byte, error) {
	return bson.MarshalValue(primitive.ObjectID(id))
}

func (id RepositoryID) MarshalJSON() ([]byte, error) {
	return primitive.ObjectID(id).MarshalJSON()
}

func (id *RepositoryID) UnmarshalJSON(b []byte) error {
	return (*primitive.ObjectID)(id).UnmarshalJSON(b)
}

func (id RepositoryID) Hex() string {
	return primitive.ObjectID(id).Hex()
}

func (id RepositoryID) Base64() string {
	res := make([]byte, base64.StdEncoding.EncodedLen(len(id)))
	base64.StdEncoding.Encode(res, id[:])

	return string(res)
}

func (id RepositoryID) IsZero() bool {
	return primitive.ObjectID(id).IsZero()
}

func (id RepositoryID) Timestamp() time.Time {
	return primitive.ObjectID(id).Timestamp()
}

func RepositoryIDFromHex(s string) (RepositoryID, error) {
	oid, err := primitive.ObjectIDFromHex(s)
	return RepositoryID(oid), err
}

func RepositoryIDFromBytes(b []byte) RepositoryID {
	var id RepositoryID
	copy(id[:], b)
	return id
}

func RepositoryIDFromNodeID(s string) (RepositoryID, error) {
	var id RepositoryID
	err := id.UnmarshalGQL(s)
	return id, err
}

const (
	_PullRequestIDPrefix = "PullRequest:"
	_PullRequestIDLen    = len(_PullRequestIDPrefix) + len(PullRequestID{})
)

type PullRequestID primitive.ObjectID

func (id PullRequestID) String() string {
	return id.Hex()
}

func (id *PullRequestID) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("repo ID must be a string")
	}

	b, err := base64.StdEncoding.DecodeString(str)
	if err != nil {
		return err
	}

	if len(b) != _PullRequestIDLen {
		return fmt.Errorf("incorrect CommitID bytes length, it shouhd be %d, got: %d", _PullRequestIDLen, len(b))
	}

	copy(id[:], b[len(_PullRequestIDPrefix):])

	return nil
}

func (id PullRequestID) MarshalGQL(w io.Writer) {
	b := make([]byte, 0, _PullRequestIDLen)
	b = append(b, _PullRequestIDPrefix...)
	b = append(b, id[:]...)

	res := make([]byte, base64.StdEncoding.EncodedLen(_PullRequestIDLen)+2)
	res[0] = '"'
	base64.StdEncoding.Encode(res[1:], b)
	res[len(res)-1] = '"'

	w.Write(res)
}

func (id PullRequestID) NodeID() string {
	b := make([]byte, 0, _PullRequestIDLen)
	b = append(b, _PullRequestIDPrefix...)
	b = append(b, id[:]...)

	res := make([]byte, base64.StdEncoding.EncodedLen(_PullRequestIDLen))
	base64.StdEncoding.Encode(res, b)

	return string(res)
}

func (id *PullRequestID) UnmarshalBSONValue(t bsontype.Type, data []byte) error {
	if t != bsontype.ObjectID {
		return fmt.Errorf("invalid RepositoryID")
	}

	copy(id[:], data)

	return nil
}

func (id PullRequestID) MarshalBSONValue() (bsontype.Type, []byte, error) {
	return bson.MarshalValue(primitive.ObjectID(id))
}

func (id PullRequestID) MarshalJSON() ([]byte, error) {
	return primitive.ObjectID(id).MarshalJSON()
}

func (id *PullRequestID) UnmarshalJSON(b []byte) error {
	return (*primitive.ObjectID)(id).UnmarshalJSON(b)
}

func (id PullRequestID) Hex() string {
	return primitive.ObjectID(id).Hex()
}

func (id PullRequestID) Base64() string {
	res := make([]byte, base64.StdEncoding.EncodedLen(len(id)))
	base64.StdEncoding.Encode(res, id[:])

	return string(res)
}

func (id PullRequestID) IsZero() bool {
	return primitive.ObjectID(id).IsZero()
}

func (id PullRequestID) Timestamp() time.Time {
	return primitive.ObjectID(id).Timestamp()
}

func PullRequestIDFromHex(s string) (PullRequestID, error) {
	oid, err := primitive.ObjectIDFromHex(s)
	return PullRequestID(oid), err
}

func PullRequestIDFromBytes(b []byte) PullRequestID {
	var id PullRequestID
	copy(id[:], b)
	return id
}

func PullRequestIDFromNodeID(s string) (PullRequestID, error) {
	var id PullRequestID
	err := id.UnmarshalGQL(s)
	return id, err
}

const (
	_JobIDPrefix = "Job:"
	_JobIDLen    = len(_JobIDPrefix) + len(JobID{})
)

type JobID primitive.ObjectID

func (id JobID) String() string {
	return id.Hex()
}

func (id *JobID) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("repo ID must be a string")
	}

	b, err := base64.StdEncoding.DecodeString(str)
	if err != nil {
		return err
	}

	if len(b) != _JobIDLen {
		return fmt.Errorf("incorrect CommitID bytes length, it shouhd be %d, got: %d", _JobIDLen, len(b))
	}

	copy(id[:], b[len(_JobIDPrefix):])

	return nil
}

func (id JobID) MarshalGQL(w io.Writer) {
	b := make([]byte, 0, _JobIDLen)
	b = append(b, _JobIDPrefix...)
	b = append(b, id[:]...)

	res := make([]byte, base64.StdEncoding.EncodedLen(_JobIDLen)+2)
	res[0] = '"'
	base64.StdEncoding.Encode(res[1:], b)
	res[len(res)-1] = '"'

	w.Write(res)
}

func (id JobID) NodeID() string {
	b := make([]byte, 0, _JobIDLen)
	b = append(b, _JobIDPrefix...)
	b = append(b, id[:]...)

	res := make([]byte, base64.StdEncoding.EncodedLen(_JobIDLen))
	base64.StdEncoding.Encode(res, b)

	return string(res)
}

func (id *JobID) UnmarshalBSONValue(t bsontype.Type, data []byte) error {
	if t != bsontype.ObjectID {
		return fmt.Errorf("invalid RepositoryID")
	}

	copy(id[:], data)

	return nil
}

func (id JobID) MarshalBSONValue() (bsontype.Type, []byte, error) {
	return bson.MarshalValue(primitive.ObjectID(id))
}

func (id JobID) MarshalJSON() ([]byte, error) {
	return primitive.ObjectID(id).MarshalJSON()
}

func (id *JobID) UnmarshalJSON(b []byte) error {
	return (*primitive.ObjectID)(id).UnmarshalJSON(b)
}

func (id JobID) Hex() string {
	return primitive.ObjectID(id).Hex()
}

func (id JobID) Base64() string {
	res := make([]byte, base64.StdEncoding.EncodedLen(len(id)))
	base64.StdEncoding.Encode(res, id[:])

	return string(res)
}

func (id JobID) IsZero() bool {
	return primitive.ObjectID(id).IsZero()
}

func (id JobID) Timestamp() time.Time {
	return primitive.ObjectID(id).Timestamp()
}

func JobIDFromHex(s string) (JobID, error) {
	oid, err := primitive.ObjectIDFromHex(s)
	return JobID(oid), err
}

func JobIDFromBytes(b []byte) JobID {
	var id JobID
	copy(id[:], b)
	return id
}

func JobIDFromNodeID(s string) (JobID, error) {
	var id JobID
	err := id.UnmarshalGQL(s)
	return id, err
}

const (
	_UserIDPrefix = "User:"
	_UserIDLen    = len(_UserIDPrefix) + len(UserID{})
)

type UserID primitive.ObjectID

func (id UserID) String() string {
	return id.Hex()
}

func (id *UserID) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("repo ID must be a string")
	}

	b, err := base64.StdEncoding.DecodeString(str)
	if err != nil {
		return err
	}

	if len(b) != _UserIDLen {
		return fmt.Errorf("incorrect CommitID bytes length, it shouhd be %d, got: %d", _UserIDLen, len(b))
	}

	copy(id[:], b[len(_UserIDPrefix):])

	return nil
}

func (id UserID) MarshalGQL(w io.Writer) {
	b := make([]byte, 0, _UserIDLen)
	b = append(b, _UserIDPrefix...)
	b = append(b, id[:]...)

	res := make([]byte, base64.StdEncoding.EncodedLen(_UserIDLen)+2)
	res[0] = '"'
	base64.StdEncoding.Encode(res[1:], b)
	res[len(res)-1] = '"'

	w.Write(res)
}

func (id UserID) NodeID() string {
	b := make([]byte, 0, _UserIDLen)
	b = append(b, _UserIDPrefix...)
	b = append(b, id[:]...)

	res := make([]byte, base64.StdEncoding.EncodedLen(_UserIDLen))
	base64.StdEncoding.Encode(res, b)

	return string(res)
}

func (id *UserID) UnmarshalBSONValue(t bsontype.Type, data []byte) error {
	if t != bsontype.ObjectID {
		return fmt.Errorf("invalid RepositoryID")
	}

	copy(id[:], data)

	return nil
}

func (id UserID) MarshalBSONValue() (bsontype.Type, []byte, error) {
	return bson.MarshalValue(primitive.ObjectID(id))
}

func (id UserID) MarshalJSON() ([]byte, error) {
	return primitive.ObjectID(id).MarshalJSON()
}

func (id *UserID) UnmarshalJSON(b []byte) error {
	return (*primitive.ObjectID)(id).UnmarshalJSON(b)
}

func (id UserID) Hex() string {
	return primitive.ObjectID(id).Hex()
}

func (id UserID) Base64() string {
	res := make([]byte, base64.StdEncoding.EncodedLen(len(id)))
	base64.StdEncoding.Encode(res, id[:])

	return string(res)
}

func (id UserID) IsZero() bool {
	return primitive.ObjectID(id).IsZero()
}

func (id UserID) Timestamp() time.Time {
	return primitive.ObjectID(id).Timestamp()
}

func UserIDFromHex(s string) (UserID, error) {
	oid, err := primitive.ObjectIDFromHex(s)
	return UserID(oid), err
}

func UserIDFromBytes(b []byte) UserID {
	var id UserID
	copy(id[:], b)
	return id
}

func UserIDFromNodeID(s string) (UserID, error) {
	var id UserID
	err := id.UnmarshalGQL(s)
	return id, err
}

const (
	_FeedbackIDPrefix = "Feedback:"
	_FeedbackIDLen    = len(_FeedbackIDPrefix) + len(FeedbackID{})
)

type FeedbackID primitive.ObjectID

func (id FeedbackID) String() string {
	return id.Hex()
}

func (id *FeedbackID) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("repo ID must be a string")
	}

	b, err := base64.StdEncoding.DecodeString(str)
	if err != nil {
		return err
	}

	if len(b) != _FeedbackIDLen {
		return fmt.Errorf("incorrect CommitID bytes length, it shouhd be %d, got: %d", _FeedbackIDLen, len(b))
	}

	copy(id[:], b[len(_FeedbackIDPrefix):])

	return nil
}

func (id FeedbackID) MarshalGQL(w io.Writer) {
	b := make([]byte, 0, _FeedbackIDLen)
	b = append(b, _FeedbackIDPrefix...)
	b = append(b, id[:]...)

	res := make([]byte, base64.StdEncoding.EncodedLen(_FeedbackIDLen)+2)
	res[0] = '"'
	base64.StdEncoding.Encode(res[1:], b)
	res[len(res)-1] = '"'

	w.Write(res)
}

func (id FeedbackID) NodeID() string {
	b := make([]byte, 0, _FeedbackIDLen)
	b = append(b, _FeedbackIDPrefix...)
	b = append(b, id[:]...)

	res := make([]byte, base64.StdEncoding.EncodedLen(_FeedbackIDLen))
	base64.StdEncoding.Encode(res, b)

	return string(res)
}

func (id *FeedbackID) UnmarshalBSONValue(t bsontype.Type, data []byte) error {
	if t != bsontype.ObjectID {
		return fmt.Errorf("invalid RepositoryID")
	}

	copy(id[:], data)

	return nil
}

func (id FeedbackID) MarshalBSONValue() (bsontype.Type, []byte, error) {
	return bson.MarshalValue(primitive.ObjectID(id))
}

func (id FeedbackID) MarshalJSON() ([]byte, error) {
	return primitive.ObjectID(id).MarshalJSON()
}

func (id *FeedbackID) UnmarshalJSON(b []byte) error {
	return (*primitive.ObjectID)(id).UnmarshalJSON(b)
}

func (id FeedbackID) Hex() string {
	return primitive.ObjectID(id).Hex()
}

func (id FeedbackID) Base64() string {
	res := make([]byte, base64.StdEncoding.EncodedLen(len(id)))
	base64.StdEncoding.Encode(res, id[:])

	return string(res)
}

func (id FeedbackID) IsZero() bool {
	return primitive.ObjectID(id).IsZero()
}

func (id FeedbackID) Timestamp() time.Time {
	return primitive.ObjectID(id).Timestamp()
}

func FeedbackIDFromHex(s string) (FeedbackID, error) {
	oid, err := primitive.ObjectIDFromHex(s)
	return FeedbackID(oid), err
}

func FeedbackIDFromBytes(b []byte) FeedbackID {
	var id FeedbackID
	copy(id[:], b)
	return id
}

func FeedbackIDFromNodeID(s string) (FeedbackID, error) {
	var id FeedbackID
	err := id.UnmarshalGQL(s)
	return id, err
}

const (
	_OrganizationIDPrefix = "Organization:"
	_OrganizationIDLen    = len(_OrganizationIDPrefix) + len(OrganizationID{})
)

type OrganizationID primitive.ObjectID

func (id OrganizationID) String() string {
	return id.Hex()
}

func (id *OrganizationID) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("repo ID must be a string")
	}

	b, err := base64.StdEncoding.DecodeString(str)
	if err != nil {
		return err
	}

	if len(b) != _OrganizationIDLen {
		return fmt.Errorf("incorrect CommitID bytes length, it shouhd be %d, got: %d", _OrganizationIDLen, len(b))
	}

	copy(id[:], b[len(_OrganizationIDPrefix):])

	return nil
}

func (id OrganizationID) MarshalGQL(w io.Writer) {
	b := make([]byte, 0, _OrganizationIDLen)
	b = append(b, _OrganizationIDPrefix...)
	b = append(b, id[:]...)

	res := make([]byte, base64.StdEncoding.EncodedLen(_OrganizationIDLen)+2)
	res[0] = '"'
	base64.StdEncoding.Encode(res[1:], b)
	res[len(res)-1] = '"'

	w.Write(res)
}

func (id OrganizationID) NodeID() string {
	b := make([]byte, 0, _OrganizationIDLen)
	b = append(b, _OrganizationIDPrefix...)
	b = append(b, id[:]...)

	res := make([]byte, base64.StdEncoding.EncodedLen(_OrganizationIDLen))
	base64.StdEncoding.Encode(res, b)

	return string(res)
}

func (id *OrganizationID) UnmarshalBSONValue(t bsontype.Type, data []byte) error {
	if t != bsontype.ObjectID {
		return fmt.Errorf("invalid RepositoryID")
	}

	copy(id[:], data)

	return nil
}

func (id OrganizationID) MarshalBSONValue() (bsontype.Type, []byte, error) {
	return bson.MarshalValue(primitive.ObjectID(id))
}

func (id OrganizationID) MarshalJSON() ([]byte, error) {
	return primitive.ObjectID(id).MarshalJSON()
}

func (id *OrganizationID) UnmarshalJSON(b []byte) error {
	return (*primitive.ObjectID)(id).UnmarshalJSON(b)
}

func (id OrganizationID) Hex() string {
	return primitive.ObjectID(id).Hex()
}

func (id OrganizationID) Base64() string {
	res := make([]byte, base64.StdEncoding.EncodedLen(len(id)))
	base64.StdEncoding.Encode(res, id[:])

	return string(res)
}

func (id OrganizationID) IsZero() bool {
	return primitive.ObjectID(id).IsZero()
}

func (id OrganizationID) Timestamp() time.Time {
	return primitive.ObjectID(id).Timestamp()
}

func OrganizationIDFromHex(s string) (OrganizationID, error) {
	oid, err := primitive.ObjectIDFromHex(s)
	return OrganizationID(oid), err
}

func OrganizationIDFromBytes(b []byte) OrganizationID {
	var id OrganizationID
	copy(id[:], b)
	return id
}

func OrganizationIDFromNodeID(s string) (OrganizationID, error) {
	var id OrganizationID
	err := id.UnmarshalGQL(s)
	return id, err
}
