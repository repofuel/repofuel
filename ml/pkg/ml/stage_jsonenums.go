// Code generated by jsonenums -type=Stage; DO NOT EDIT.

package ml

import (
	"encoding/json"
	"fmt"
)

var (
	_StageNameToValue = map[string]Stage{
		"StageDataPreparation":     StageDataPreparation,
		"StageDataSplitting":       StageDataSplitting,
		"StageModelBuilding":       StageModelBuilding,
		"StagePredicting":          StagePredicting,
		"StageQuantileCalculation": StageQuantileCalculation,
	}

	_StageValueToName = map[Stage]string{
		StageDataPreparation:     "StageDataPreparation",
		StageDataSplitting:       "StageDataSplitting",
		StageModelBuilding:       "StageModelBuilding",
		StagePredicting:          "StagePredicting",
		StageQuantileCalculation: "StageQuantileCalculation",
	}
)

func init() {
	var v Stage
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_StageNameToValue = map[string]Stage{
			interface{}(StageDataPreparation).(fmt.Stringer).String():     StageDataPreparation,
			interface{}(StageDataSplitting).(fmt.Stringer).String():       StageDataSplitting,
			interface{}(StageModelBuilding).(fmt.Stringer).String():       StageModelBuilding,
			interface{}(StagePredicting).(fmt.Stringer).String():          StagePredicting,
			interface{}(StageQuantileCalculation).(fmt.Stringer).String(): StageQuantileCalculation,
		}
	}
}

// MarshalJSON is generated so Stage satisfies json.Marshaler.
func (r Stage) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _StageValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Stage: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Stage satisfies json.Unmarshaler.
func (r *Stage) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Stage should be a string, got %s", data)
	}
	v, ok := _StageNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Stage %q", s)
	}
	*r = v
	return nil
}
