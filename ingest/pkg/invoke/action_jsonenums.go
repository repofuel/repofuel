// Code generated by jsonenums -type=Action; DO NOT EDIT.

package invoke

import (
	"encoding/json"
	"fmt"
)

var (
	_ActionNameToValue = map[string]Action{
		"ActionRepositoryAdded":         ActionRepositoryAdded,
		"ActionRepositoryPush":          ActionRepositoryPush,
		"ActionRepositoryRecovering":    ActionRepositoryRecovering,
		"ActionRepositoryAdminTrigger":  ActionRepositoryAdminTrigger,
		"ActionRepositoryRefreshing":    ActionRepositoryRefreshing,
		"ActionPullRequestAdded":        ActionPullRequestAdded,
		"ActionPullRequestUpdate":       ActionPullRequestUpdate,
		"ActionPullRequestRecovering":   ActionPullRequestRecovering,
		"ActionPullRequestAdminTrigger": ActionPullRequestAdminTrigger,
		"ActionPullRequestRefreshing":   ActionPullRequestRefreshing,
		"ActionPushCheck":               ActionPushCheck,
		"ActionPullRequestCheck":        ActionPullRequestCheck,
		"ActionMonitorRepository":       ActionMonitorRepository,
	}

	_ActionValueToName = map[Action]string{
		ActionRepositoryAdded:         "ActionRepositoryAdded",
		ActionRepositoryPush:          "ActionRepositoryPush",
		ActionRepositoryRecovering:    "ActionRepositoryRecovering",
		ActionRepositoryAdminTrigger:  "ActionRepositoryAdminTrigger",
		ActionRepositoryRefreshing:    "ActionRepositoryRefreshing",
		ActionPullRequestAdded:        "ActionPullRequestAdded",
		ActionPullRequestUpdate:       "ActionPullRequestUpdate",
		ActionPullRequestRecovering:   "ActionPullRequestRecovering",
		ActionPullRequestAdminTrigger: "ActionPullRequestAdminTrigger",
		ActionPullRequestRefreshing:   "ActionPullRequestRefreshing",
		ActionPushCheck:               "ActionPushCheck",
		ActionPullRequestCheck:        "ActionPullRequestCheck",
		ActionMonitorRepository:       "ActionMonitorRepository",
	}
)

func init() {
	var v Action
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_ActionNameToValue = map[string]Action{
			interface{}(ActionRepositoryAdded).(fmt.Stringer).String():         ActionRepositoryAdded,
			interface{}(ActionRepositoryPush).(fmt.Stringer).String():          ActionRepositoryPush,
			interface{}(ActionRepositoryRecovering).(fmt.Stringer).String():    ActionRepositoryRecovering,
			interface{}(ActionRepositoryAdminTrigger).(fmt.Stringer).String():  ActionRepositoryAdminTrigger,
			interface{}(ActionRepositoryRefreshing).(fmt.Stringer).String():    ActionRepositoryRefreshing,
			interface{}(ActionPullRequestAdded).(fmt.Stringer).String():        ActionPullRequestAdded,
			interface{}(ActionPullRequestUpdate).(fmt.Stringer).String():       ActionPullRequestUpdate,
			interface{}(ActionPullRequestRecovering).(fmt.Stringer).String():   ActionPullRequestRecovering,
			interface{}(ActionPullRequestAdminTrigger).(fmt.Stringer).String(): ActionPullRequestAdminTrigger,
			interface{}(ActionPullRequestRefreshing).(fmt.Stringer).String():   ActionPullRequestRefreshing,
			interface{}(ActionPushCheck).(fmt.Stringer).String():               ActionPushCheck,
			interface{}(ActionPullRequestCheck).(fmt.Stringer).String():        ActionPullRequestCheck,
			interface{}(ActionMonitorRepository).(fmt.Stringer).String():       ActionMonitorRepository,
		}
	}
}

// MarshalJSON is generated so Action satisfies json.Marshaler.
func (r Action) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _ActionValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Action: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Action satisfies json.Unmarshaler.
func (r *Action) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Action should be a string, got %s", data)
	}
	v, ok := _ActionNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Action %q", s)
	}
	*r = v
	return nil
}
