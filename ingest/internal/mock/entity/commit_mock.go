// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/repofuel/repofuel/ingest/internal/entity (interfaces: CommitDataSource,RepositoryDataSource,CommitIter)

// Package mock_entity is a generated GoMock package.
package mock_entity

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	common "github.com/repofuel/repofuel/pkg/common"
	repofuel "github.com/repofuel/repofuel/pkg/repofuel"
	entity "github.com/repofuel/repofuel/ingest/internal/entity"
	classify "github.com/repofuel/repofuel/ingest/pkg/classify"
	identifier "github.com/repofuel/repofuel/ingest/pkg/identifier"
	status "github.com/repofuel/repofuel/ingest/pkg/status"
	options "go.mongodb.org/mongo-driver/mongo/options"
	reflect "reflect"
	time "time"
)

// MockCommitDataSource is a mock of CommitDataSource interface
type MockCommitDataSource struct {
	ctrl     *gomock.Controller
	recorder *MockCommitDataSourceMockRecorder
}

// MockCommitDataSourceMockRecorder is the mock recorder for MockCommitDataSource
type MockCommitDataSourceMockRecorder struct {
	mock *MockCommitDataSource
}

// NewMockCommitDataSource creates a new mock instance
func NewMockCommitDataSource(ctrl *gomock.Controller) *MockCommitDataSource {
	mock := &MockCommitDataSource{ctrl: ctrl}
	mock.recorder = &MockCommitDataSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommitDataSource) EXPECT() *MockCommitDataSourceMockRecorder {
	return m.recorder
}

// AnalyzedCountOverTime mocks base method
func (m *MockCommitDataSource) AnalyzedCountOverTime(arg0 context.Context, arg1 time.Time, arg2 entity.Frequency) ([]*entity.CountOverTime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnalyzedCountOverTime", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*entity.CountOverTime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AnalyzedCountOverTime indicates an expected call of AnalyzedCountOverTime
func (mr *MockCommitDataSourceMockRecorder) AnalyzedCountOverTime(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnalyzedCountOverTime", reflect.TypeOf((*MockCommitDataSource)(nil).AnalyzedCountOverTime), arg0, arg1, arg2)
}

// AnalyzedTotalCount mocks base method
func (m *MockCommitDataSource) AnalyzedTotalCount(arg0 context.Context, arg1 time.Time) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnalyzedTotalCount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AnalyzedTotalCount indicates an expected call of AnalyzedTotalCount
func (mr *MockCommitDataSourceMockRecorder) AnalyzedTotalCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnalyzedTotalCount", reflect.TypeOf((*MockCommitDataSource)(nil).AnalyzedTotalCount), arg0, arg1)
}

// AvgCommitFilesOverTime mocks base method
func (m *MockCommitDataSource) AvgCommitFilesOverTime(arg0 context.Context, arg1 identifier.RepositoryID) ([]*entity.AvgOverTime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AvgCommitFilesOverTime", arg0, arg1)
	ret0, _ := ret[0].([]*entity.AvgOverTime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AvgCommitFilesOverTime indicates an expected call of AvgCommitFilesOverTime
func (mr *MockCommitDataSourceMockRecorder) AvgCommitFilesOverTime(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AvgCommitFilesOverTime", reflect.TypeOf((*MockCommitDataSource)(nil).AvgCommitFilesOverTime), arg0, arg1)
}

// AvgEntropyOverTime mocks base method
func (m *MockCommitDataSource) AvgEntropyOverTime(arg0 context.Context, arg1 identifier.RepositoryID) ([]*entity.AvgOverTime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AvgEntropyOverTime", arg0, arg1)
	ret0, _ := ret[0].([]*entity.AvgOverTime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AvgEntropyOverTime indicates an expected call of AvgEntropyOverTime
func (mr *MockCommitDataSourceMockRecorder) AvgEntropyOverTime(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AvgEntropyOverTime", reflect.TypeOf((*MockCommitDataSource)(nil).AvgEntropyOverTime), arg0, arg1)
}

// BugFixingCount mocks base method
func (m *MockCommitDataSource) BugFixingCount(arg0 context.Context, arg1 identifier.RepositoryID) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BugFixingCount", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BugFixingCount indicates an expected call of BugFixingCount
func (mr *MockCommitDataSourceMockRecorder) BugFixingCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BugFixingCount", reflect.TypeOf((*MockCommitDataSource)(nil).BugFixingCount), arg0, arg1)
}

// BugInducingCount mocks base method
func (m *MockCommitDataSource) BugInducingCount(arg0 context.Context, arg1 identifier.RepositoryID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BugInducingCount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BugInducingCount indicates an expected call of BugInducingCount
func (mr *MockCommitDataSourceMockRecorder) BugInducingCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BugInducingCount", reflect.TypeOf((*MockCommitDataSource)(nil).BugInducingCount), arg0, arg1)
}

// BuggyCommitsOverTime mocks base method
func (m *MockCommitDataSource) BuggyCommitsOverTime(arg0 context.Context, arg1 identifier.RepositoryID) ([]*entity.CountOverTime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuggyCommitsOverTime", arg0, arg1)
	ret0, _ := ret[0].([]*entity.CountOverTime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuggyCommitsOverTime indicates an expected call of BuggyCommitsOverTime
func (mr *MockCommitDataSourceMockRecorder) BuggyCommitsOverTime(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuggyCommitsOverTime", reflect.TypeOf((*MockCommitDataSource)(nil).BuggyCommitsOverTime), arg0, arg1)
}

// CommitsOverTime mocks base method
func (m *MockCommitDataSource) CommitsOverTime(arg0 context.Context, arg1 identifier.RepositoryID) ([]*entity.CountOverTime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitsOverTime", arg0, arg1)
	ret0, _ := ret[0].([]*entity.CountOverTime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitsOverTime indicates an expected call of CommitsOverTime
func (mr *MockCommitDataSourceMockRecorder) CommitsOverTime(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitsOverTime", reflect.TypeOf((*MockCommitDataSource)(nil).CommitsOverTime), arg0, arg1)
}

// CommitsTagCount mocks base method
func (m *MockCommitDataSource) CommitsTagCount(arg0 context.Context, arg1 identifier.RepositoryID) ([]*entity.TagCount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitsTagCount", arg0, arg1)
	ret0, _ := ret[0].([]*entity.TagCount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitsTagCount indicates an expected call of CommitsTagCount
func (mr *MockCommitDataSourceMockRecorder) CommitsTagCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitsTagCount", reflect.TypeOf((*MockCommitDataSource)(nil).CommitsTagCount), arg0, arg1)
}

// ContributorsCount mocks base method
func (m *MockCommitDataSource) ContributorsCount(arg0 context.Context, arg1 identifier.RepositoryID) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContributorsCount", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContributorsCount indicates an expected call of ContributorsCount
func (mr *MockCommitDataSourceMockRecorder) ContributorsCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContributorsCount", reflect.TypeOf((*MockCommitDataSource)(nil).ContributorsCount), arg0, arg1)
}

// DeleteCommitTag mocks base method
func (m *MockCommitDataSource) DeleteCommitTag(arg0 context.Context, arg1 *identifier.CommitID, arg2 classify.Tag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCommitTag", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCommitTag indicates an expected call of DeleteCommitTag
func (mr *MockCommitDataSourceMockRecorder) DeleteCommitTag(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCommitTag", reflect.TypeOf((*MockCommitDataSource)(nil).DeleteCommitTag), arg0, arg1, arg2)
}

// DeleteRepoCommits mocks base method
func (m *MockCommitDataSource) DeleteRepoCommits(arg0 context.Context, arg1 identifier.RepositoryID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRepoCommits", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRepoCommits indicates an expected call of DeleteRepoCommits
func (mr *MockCommitDataSourceMockRecorder) DeleteRepoCommits(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepoCommits", reflect.TypeOf((*MockCommitDataSource)(nil).DeleteRepoCommits), arg0, arg1)
}

// DeveloperEmails mocks base method
func (m *MockCommitDataSource) DeveloperEmails(arg0 context.Context, arg1 identifier.RepositoryID) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeveloperEmails", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeveloperEmails indicates an expected call of DeveloperEmails
func (mr *MockCommitDataSourceMockRecorder) DeveloperEmails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeveloperEmails", reflect.TypeOf((*MockCommitDataSource)(nil).DeveloperEmails), arg0, arg1)
}

// DeveloperNames mocks base method
func (m *MockCommitDataSource) DeveloperNames(arg0 context.Context, arg1 identifier.RepositoryID) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeveloperNames", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeveloperNames indicates an expected call of DeveloperNames
func (mr *MockCommitDataSourceMockRecorder) DeveloperNames(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeveloperNames", reflect.TypeOf((*MockCommitDataSource)(nil).DeveloperNames), arg0, arg1)
}

// DevelopersAggregatedMetrics mocks base method
func (m *MockCommitDataSource) DevelopersAggregatedMetrics(arg0 context.Context, arg1 identifier.RepositoryID) (entity.ChangeMeasuresIter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DevelopersAggregatedMetrics", arg0, arg1)
	ret0, _ := ret[0].(entity.ChangeMeasuresIter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DevelopersAggregatedMetrics indicates an expected call of DevelopersAggregatedMetrics
func (mr *MockCommitDataSourceMockRecorder) DevelopersAggregatedMetrics(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DevelopersAggregatedMetrics", reflect.TypeOf((*MockCommitDataSource)(nil).DevelopersAggregatedMetrics), arg0, arg1)
}

// FileAggregatedMetrics mocks base method
func (m *MockCommitDataSource) FileAggregatedMetrics(arg0 context.Context, arg1 identifier.RepositoryID) (entity.FileMeasuresIter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileAggregatedMetrics", arg0, arg1)
	ret0, _ := ret[0].(entity.FileMeasuresIter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FileAggregatedMetrics indicates an expected call of FileAggregatedMetrics
func (mr *MockCommitDataSourceMockRecorder) FileAggregatedMetrics(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileAggregatedMetrics", reflect.TypeOf((*MockCommitDataSource)(nil).FileAggregatedMetrics), arg0, arg1)
}

// FindByID mocks base method
func (m *MockCommitDataSource) FindByID(arg0 context.Context, arg1 *identifier.CommitID) (*entity.Commit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", arg0, arg1)
	ret0, _ := ret[0].(*entity.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID
func (mr *MockCommitDataSourceMockRecorder) FindByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockCommitDataSource)(nil).FindByID), arg0, arg1)
}

// FindCommitsBetween mocks base method
func (m *MockCommitDataSource) FindCommitsBetween(arg0 context.Context, arg1 identifier.RepositoryID, arg2, arg3 identifier.JobID) (entity.CommitIter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCommitsBetween", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(entity.CommitIter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCommitsBetween indicates an expected call of FindCommitsBetween
func (mr *MockCommitDataSourceMockRecorder) FindCommitsBetween(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCommitsBetween", reflect.TypeOf((*MockCommitDataSource)(nil).FindCommitsBetween), arg0, arg1, arg2, arg3)
}

// FindCommitsByHash mocks base method
func (m *MockCommitDataSource) FindCommitsByHash(arg0 context.Context, arg1 identifier.RepositoryID, arg2 ...identifier.Hash) (entity.CommitIter, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindCommitsByHash", varargs...)
	ret0, _ := ret[0].(entity.CommitIter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCommitsByHash indicates an expected call of FindCommitsByHash
func (mr *MockCommitDataSourceMockRecorder) FindCommitsByHash(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCommitsByHash", reflect.TypeOf((*MockCommitDataSource)(nil).FindCommitsByHash), varargs...)
}

// FindCommitsUntil mocks base method
func (m *MockCommitDataSource) FindCommitsUntil(arg0 context.Context, arg1 identifier.RepositoryID, arg2 identifier.JobID) (entity.CommitIter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCommitsUntil", arg0, arg1, arg2)
	ret0, _ := ret[0].(entity.CommitIter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCommitsUntil indicates an expected call of FindCommitsUntil
func (mr *MockCommitDataSourceMockRecorder) FindCommitsUntil(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCommitsUntil", reflect.TypeOf((*MockCommitDataSource)(nil).FindCommitsUntil), arg0, arg1, arg2)
}

// FindJobCommits mocks base method
func (m *MockCommitDataSource) FindJobCommits(arg0 context.Context, arg1 identifier.RepositoryID, arg2 identifier.JobID) (entity.CommitIter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindJobCommits", arg0, arg1, arg2)
	ret0, _ := ret[0].(entity.CommitIter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindJobCommits indicates an expected call of FindJobCommits
func (mr *MockCommitDataSourceMockRecorder) FindJobCommits(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindJobCommits", reflect.TypeOf((*MockCommitDataSource)(nil).FindJobCommits), arg0, arg1, arg2)
}

// FindPullRequestCommits mocks base method
func (m *MockCommitDataSource) FindPullRequestCommits(arg0 context.Context, arg1 identifier.RepositoryID, arg2 identifier.PullRequestID, arg3 ...*options.FindOptions) (entity.CommitIter, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindPullRequestCommits", varargs...)
	ret0, _ := ret[0].(entity.CommitIter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPullRequestCommits indicates an expected call of FindPullRequestCommits
func (mr *MockCommitDataSourceMockRecorder) FindPullRequestCommits(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPullRequestCommits", reflect.TypeOf((*MockCommitDataSource)(nil).FindPullRequestCommits), varargs...)
}

// FindRepoCommits mocks base method
func (m *MockCommitDataSource) FindRepoCommits(arg0 context.Context, arg1 identifier.RepositoryID, arg2 ...*options.FindOptions) (entity.CommitIter, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindRepoCommits", varargs...)
	ret0, _ := ret[0].(entity.CommitIter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRepoCommits indicates an expected call of FindRepoCommits
func (mr *MockCommitDataSourceMockRecorder) FindRepoCommits(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRepoCommits", reflect.TypeOf((*MockCommitDataSource)(nil).FindRepoCommits), varargs...)
}

// InsertOrReplace mocks base method
func (m *MockCommitDataSource) InsertOrReplace(arg0 context.Context, arg1 *entity.Commit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrReplace", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOrReplace indicates an expected call of InsertOrReplace
func (mr *MockCommitDataSourceMockRecorder) InsertOrReplace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrReplace", reflect.TypeOf((*MockCommitDataSource)(nil).InsertOrReplace), arg0, arg1)
}

// MarkBuggy mocks base method
func (m *MockCommitDataSource) MarkBuggy(arg0 context.Context, arg1 identifier.RepositoryID, arg2 identifier.Hash, arg3 identifier.HashSet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkBuggy", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkBuggy indicates an expected call of MarkBuggy
func (mr *MockCommitDataSourceMockRecorder) MarkBuggy(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkBuggy", reflect.TypeOf((*MockCommitDataSource)(nil).MarkBuggy), arg0, arg1, arg2, arg3)
}

// PredictedCountOverTime mocks base method
func (m *MockCommitDataSource) PredictedCountOverTime(arg0 context.Context, arg1 time.Time, arg2 entity.Frequency) ([]*entity.CountOverTime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PredictedCountOverTime", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*entity.CountOverTime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PredictedCountOverTime indicates an expected call of PredictedCountOverTime
func (mr *MockCommitDataSourceMockRecorder) PredictedCountOverTime(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PredictedCountOverTime", reflect.TypeOf((*MockCommitDataSource)(nil).PredictedCountOverTime), arg0, arg1, arg2)
}

// PredictedTotalCount mocks base method
func (m *MockCommitDataSource) PredictedTotalCount(arg0 context.Context, arg1 time.Time) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PredictedTotalCount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PredictedTotalCount indicates an expected call of PredictedTotalCount
func (mr *MockCommitDataSourceMockRecorder) PredictedTotalCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PredictedTotalCount", reflect.TypeOf((*MockCommitDataSource)(nil).PredictedTotalCount), arg0, arg1)
}

// Prune mocks base method
func (m *MockCommitDataSource) Prune(arg0 context.Context, arg1 identifier.RepositoryID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prune", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Prune indicates an expected call of Prune
func (mr *MockCommitDataSourceMockRecorder) Prune(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prune", reflect.TypeOf((*MockCommitDataSource)(nil).Prune), arg0, arg1)
}

// PullRequestCommitConnection mocks base method
func (m *MockCommitDataSource) PullRequestCommitConnection(arg0 context.Context, arg1 identifier.RepositoryID, arg2 identifier.PullRequestID, arg3 *entity.OrderDirection, arg4 *entity.PaginationInput) (entity.CommitConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PullRequestCommitConnection", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(entity.CommitConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PullRequestCommitConnection indicates an expected call of PullRequestCommitConnection
func (mr *MockCommitDataSourceMockRecorder) PullRequestCommitConnection(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PullRequestCommitConnection", reflect.TypeOf((*MockCommitDataSource)(nil).PullRequestCommitConnection), arg0, arg1, arg2, arg3, arg4)
}

// ReTagBranch mocks base method
func (m *MockCommitDataSource) ReTagBranch(arg0 context.Context, arg1 identifier.RepositoryID, arg2 string, arg3 identifier.HashSet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReTagBranch", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReTagBranch indicates an expected call of ReTagBranch
func (mr *MockCommitDataSourceMockRecorder) ReTagBranch(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReTagBranch", reflect.TypeOf((*MockCommitDataSource)(nil).ReTagBranch), arg0, arg1, arg2, arg3)
}

// ReTagPullRequest mocks base method
func (m *MockCommitDataSource) ReTagPullRequest(arg0 context.Context, arg1 identifier.RepositoryID, arg2 identifier.PullRequestID, arg3 identifier.HashSet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReTagPullRequest", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReTagPullRequest indicates an expected call of ReTagPullRequest
func (mr *MockCommitDataSourceMockRecorder) ReTagPullRequest(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReTagPullRequest", reflect.TypeOf((*MockCommitDataSource)(nil).ReTagPullRequest), arg0, arg1, arg2, arg3)
}

// RemoveBranch mocks base method
func (m *MockCommitDataSource) RemoveBranch(arg0 context.Context, arg1 identifier.RepositoryID, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveBranch", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveBranch indicates an expected call of RemoveBranch
func (mr *MockCommitDataSourceMockRecorder) RemoveBranch(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBranch", reflect.TypeOf((*MockCommitDataSource)(nil).RemoveBranch), arg0, arg1, arg2)
}

// RepositoryCommitConnection mocks base method
func (m *MockCommitDataSource) RepositoryCommitConnection(arg0 context.Context, arg1 identifier.RepositoryID, arg2 *entity.OrderDirection, arg3 *entity.CommitFilters, arg4 *entity.PaginationInput) (entity.CommitConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RepositoryCommitConnection", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(entity.CommitConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RepositoryCommitConnection indicates an expected call of RepositoryCommitConnection
func (mr *MockCommitDataSourceMockRecorder) RepositoryCommitConnection(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepositoryCommitConnection", reflect.TypeOf((*MockCommitDataSource)(nil).RepositoryCommitConnection), arg0, arg1, arg2, arg3, arg4)
}

// RepositoryEngineFiles mocks base method
func (m *MockCommitDataSource) RepositoryEngineFiles(arg0 context.Context, arg1 identifier.RepositoryID) (entity.EngineFileIter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RepositoryEngineFiles", arg0, arg1)
	ret0, _ := ret[0].(entity.EngineFileIter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RepositoryEngineFiles indicates an expected call of RepositoryEngineFiles
func (mr *MockCommitDataSourceMockRecorder) RepositoryEngineFiles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepositoryEngineFiles", reflect.TypeOf((*MockCommitDataSource)(nil).RepositoryEngineFiles), arg0, arg1)
}

// RepositoryPredictionsTotalCount mocks base method
func (m *MockCommitDataSource) RepositoryPredictionsTotalCount(arg0 context.Context, arg1 identifier.RepositoryID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RepositoryPredictionsTotalCount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RepositoryPredictionsTotalCount indicates an expected call of RepositoryPredictionsTotalCount
func (mr *MockCommitDataSourceMockRecorder) RepositoryPredictionsTotalCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepositoryPredictionsTotalCount", reflect.TypeOf((*MockCommitDataSource)(nil).RepositoryPredictionsTotalCount), arg0, arg1)
}

// SaveCommitAnalysis mocks base method
func (m *MockCommitDataSource) SaveCommitAnalysis(arg0 context.Context, arg1 ...*entity.CommitAnalysisHolder) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveCommitAnalysis", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCommitAnalysis indicates an expected call of SaveCommitAnalysis
func (mr *MockCommitDataSourceMockRecorder) SaveCommitAnalysis(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCommitAnalysis", reflect.TypeOf((*MockCommitDataSource)(nil).SaveCommitAnalysis), varargs...)
}

// SelectedCommitConnection mocks base method
func (m *MockCommitDataSource) SelectedCommitConnection(arg0 context.Context, arg1 identifier.RepositoryID, arg2 []identifier.Hash, arg3 *entity.OrderDirection, arg4 *entity.PaginationInput) (entity.CommitConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectedCommitConnection", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(entity.CommitConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectedCommitConnection indicates an expected call of SelectedCommitConnection
func (mr *MockCommitDataSourceMockRecorder) SelectedCommitConnection(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectedCommitConnection", reflect.TypeOf((*MockCommitDataSource)(nil).SelectedCommitConnection), arg0, arg1, arg2, arg3, arg4)
}

// MockRepositoryDataSource is a mock of RepositoryDataSource interface
type MockRepositoryDataSource struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryDataSourceMockRecorder
}

// MockRepositoryDataSourceMockRecorder is the mock recorder for MockRepositoryDataSource
type MockRepositoryDataSourceMockRecorder struct {
	mock *MockRepositoryDataSource
}

// NewMockRepositoryDataSource creates a new mock instance
func NewMockRepositoryDataSource(ctrl *gomock.Controller) *MockRepositoryDataSource {
	mock := &MockRepositoryDataSource{ctrl: ctrl}
	mock.recorder = &MockRepositoryDataSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepositoryDataSource) EXPECT() *MockRepositoryDataSourceMockRecorder {
	return m.recorder
}

// AddCollaborator mocks base method
func (m *MockRepositoryDataSource) AddCollaborator(arg0 context.Context, arg1, arg2, arg3 string, arg4 common.Permissions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCollaborator", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCollaborator indicates an expected call of AddCollaborator
func (mr *MockRepositoryDataSourceMockRecorder) AddCollaborator(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCollaborator", reflect.TypeOf((*MockRepositoryDataSource)(nil).AddCollaborator), arg0, arg1, arg2, arg3, arg4)
}

// Branches mocks base method
func (m *MockRepositoryDataSource) Branches(arg0 context.Context, arg1 identifier.RepositoryID) (map[string]identifier.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Branches", arg0, arg1)
	ret0, _ := ret[0].(map[string]identifier.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Branches indicates an expected call of Branches
func (mr *MockRepositoryDataSourceMockRecorder) Branches(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Branches", reflect.TypeOf((*MockRepositoryDataSource)(nil).Branches), arg0, arg1)
}

// CountOverTime mocks base method
func (m *MockRepositoryDataSource) CountOverTime(arg0 context.Context, arg1 time.Time, arg2 entity.Frequency) ([]*entity.CountOverTime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountOverTime", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*entity.CountOverTime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountOverTime indicates an expected call of CountOverTime
func (mr *MockRepositoryDataSourceMockRecorder) CountOverTime(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountOverTime", reflect.TypeOf((*MockRepositoryDataSource)(nil).CountOverTime), arg0, arg1, arg2)
}

// Delete mocks base method
func (m *MockRepositoryDataSource) Delete(arg0 context.Context, arg1 identifier.RepositoryID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockRepositoryDataSourceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepositoryDataSource)(nil).Delete), arg0, arg1)
}

// DeleteCollaborator mocks base method
func (m *MockRepositoryDataSource) DeleteCollaborator(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollaborator", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollaborator indicates an expected call of DeleteCollaborator
func (mr *MockRepositoryDataSourceMockRecorder) DeleteCollaborator(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollaborator", reflect.TypeOf((*MockRepositoryDataSource)(nil).DeleteCollaborator), arg0, arg1, arg2, arg3)
}

// FindAllReposConnection mocks base method
func (m *MockRepositoryDataSource) FindAllReposConnection(arg0 context.Context, arg1 *entity.OrderDirection, arg2 *entity.PaginationInput) (entity.RepositoryConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllReposConnection", arg0, arg1, arg2)
	ret0, _ := ret[0].(entity.RepositoryConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllReposConnection indicates an expected call of FindAllReposConnection
func (mr *MockRepositoryDataSourceMockRecorder) FindAllReposConnection(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllReposConnection", reflect.TypeOf((*MockRepositoryDataSource)(nil).FindAllReposConnection), arg0, arg1, arg2)
}

// FindAndUpdateChecksConfig mocks base method
func (m *MockRepositoryDataSource) FindAndUpdateChecksConfig(arg0 context.Context, arg1 identifier.RepositoryID, arg2 *entity.ChecksConfig) (*entity.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAndUpdateChecksConfig", arg0, arg1, arg2)
	ret0, _ := ret[0].(*entity.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAndUpdateChecksConfig indicates an expected call of FindAndUpdateChecksConfig
func (mr *MockRepositoryDataSourceMockRecorder) FindAndUpdateChecksConfig(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAndUpdateChecksConfig", reflect.TypeOf((*MockRepositoryDataSource)(nil).FindAndUpdateChecksConfig), arg0, arg1, arg2)
}

// FindByCollaborator mocks base method
func (m *MockRepositoryDataSource) FindByCollaborator(arg0 context.Context, arg1 map[string]string) (entity.RepositoryIter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByCollaborator", arg0, arg1)
	ret0, _ := ret[0].(entity.RepositoryIter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByCollaborator indicates an expected call of FindByCollaborator
func (mr *MockRepositoryDataSourceMockRecorder) FindByCollaborator(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCollaborator", reflect.TypeOf((*MockRepositoryDataSource)(nil).FindByCollaborator), arg0, arg1)
}

// FindByID mocks base method
func (m *MockRepositoryDataSource) FindByID(arg0 context.Context, arg1 identifier.RepositoryID) (*entity.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", arg0, arg1)
	ret0, _ := ret[0].(*entity.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID
func (mr *MockRepositoryDataSourceMockRecorder) FindByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockRepositoryDataSource)(nil).FindByID), arg0, arg1)
}

// FindByName mocks base method
func (m *MockRepositoryDataSource) FindByName(arg0 context.Context, arg1, arg2, arg3 string) (*entity.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByName", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*entity.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByName indicates an expected call of FindByName
func (mr *MockRepositoryDataSourceMockRecorder) FindByName(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockRepositoryDataSource)(nil).FindByName), arg0, arg1, arg2, arg3)
}

// FindByOwnerID mocks base method
func (m *MockRepositoryDataSource) FindByOwnerID(arg0 context.Context, arg1, arg2 string) (entity.RepositoryIter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByOwnerID", arg0, arg1, arg2)
	ret0, _ := ret[0].(entity.RepositoryIter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByOwnerID indicates an expected call of FindByOwnerID
func (mr *MockRepositoryDataSourceMockRecorder) FindByOwnerID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByOwnerID", reflect.TypeOf((*MockRepositoryDataSource)(nil).FindByOwnerID), arg0, arg1, arg2)
}

// FindByProviderID mocks base method
func (m *MockRepositoryDataSource) FindByProviderID(arg0 context.Context, arg1, arg2 string) (*entity.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByProviderID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*entity.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByProviderID indicates an expected call of FindByProviderID
func (mr *MockRepositoryDataSourceMockRecorder) FindByProviderID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByProviderID", reflect.TypeOf((*MockRepositoryDataSource)(nil).FindByProviderID), arg0, arg1, arg2)
}

// FindByProviderIDs mocks base method
func (m *MockRepositoryDataSource) FindByProviderIDs(arg0 context.Context, arg1 string, arg2 []string) (entity.RepositoryIter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByProviderIDs", arg0, arg1, arg2)
	ret0, _ := ret[0].(entity.RepositoryIter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByProviderIDs indicates an expected call of FindByProviderIDs
func (mr *MockRepositoryDataSourceMockRecorder) FindByProviderIDs(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByProviderIDs", reflect.TypeOf((*MockRepositoryDataSource)(nil).FindByProviderIDs), arg0, arg1, arg2)
}

// FindOrgReposConnection mocks base method
func (m *MockRepositoryDataSource) FindOrgReposConnection(arg0 context.Context, arg1 identifier.OrganizationID, arg2 *entity.OrderDirection, arg3 *entity.PaginationInput) (entity.RepositoryConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrgReposConnection", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(entity.RepositoryConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrgReposConnection indicates an expected call of FindOrgReposConnection
func (mr *MockRepositoryDataSourceMockRecorder) FindOrgReposConnection(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrgReposConnection", reflect.TypeOf((*MockRepositoryDataSource)(nil).FindOrgReposConnection), arg0, arg1, arg2, arg3)
}

// FindUserRepos mocks base method
func (m *MockRepositoryDataSource) FindUserRepos(arg0 context.Context, arg1, arg2 string) (entity.RepositoryIter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserRepos", arg0, arg1, arg2)
	ret0, _ := ret[0].(entity.RepositoryIter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserRepos indicates an expected call of FindUserRepos
func (mr *MockRepositoryDataSourceMockRecorder) FindUserRepos(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserRepos", reflect.TypeOf((*MockRepositoryDataSource)(nil).FindUserRepos), arg0, arg1, arg2)
}

// FindUserReposByCollaborator mocks base method
func (m *MockRepositoryDataSource) FindUserReposByCollaborator(arg0 context.Context, arg1, arg2, arg3 string) (entity.RepositoryIter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserReposByCollaborator", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(entity.RepositoryIter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserReposByCollaborator indicates an expected call of FindUserReposByCollaborator
func (mr *MockRepositoryDataSourceMockRecorder) FindUserReposByCollaborator(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserReposByCollaborator", reflect.TypeOf((*MockRepositoryDataSource)(nil).FindUserReposByCollaborator), arg0, arg1, arg2, arg3)
}

// FindUserReposConnection mocks base method
func (m *MockRepositoryDataSource) FindUserReposConnection(arg0 context.Context, arg1 []*entity.UserAffiliationInput, arg2 *entity.OrderDirection, arg3 *entity.PaginationInput) (entity.RepositoryConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserReposConnection", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(entity.RepositoryConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserReposConnection indicates an expected call of FindUserReposConnection
func (mr *MockRepositoryDataSourceMockRecorder) FindUserReposConnection(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserReposConnection", reflect.TypeOf((*MockRepositoryDataSource)(nil).FindUserReposConnection), arg0, arg1, arg2, arg3)
}

// FindWhereStatusNot mocks base method
func (m *MockRepositoryDataSource) FindWhereStatusNot(arg0 context.Context, arg1 ...status.Stage) (entity.RepositoryIter, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindWhereStatusNot", varargs...)
	ret0, _ := ret[0].(entity.RepositoryIter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindWhereStatusNot indicates an expected call of FindWhereStatusNot
func (mr *MockRepositoryDataSourceMockRecorder) FindWhereStatusNot(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindWhereStatusNot", reflect.TypeOf((*MockRepositoryDataSource)(nil).FindWhereStatusNot), varargs...)
}

// InsertOrUpdate mocks base method
func (m *MockRepositoryDataSource) InsertOrUpdate(arg0 context.Context, arg1 *entity.Repository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrUpdate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOrUpdate indicates an expected call of InsertOrUpdate
func (mr *MockRepositoryDataSourceMockRecorder) InsertOrUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrUpdate", reflect.TypeOf((*MockRepositoryDataSource)(nil).InsertOrUpdate), arg0, arg1)
}

// SaveBranches mocks base method
func (m *MockRepositoryDataSource) SaveBranches(arg0 context.Context, arg1 identifier.RepositoryID, arg2 map[string]identifier.Hash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBranches", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBranches indicates an expected call of SaveBranches
func (mr *MockRepositoryDataSourceMockRecorder) SaveBranches(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBranches", reflect.TypeOf((*MockRepositoryDataSource)(nil).SaveBranches), arg0, arg1, arg2)
}

// SaveBuggyCount mocks base method
func (m *MockRepositoryDataSource) SaveBuggyCount(arg0 context.Context, arg1 identifier.RepositoryID, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBuggyCount", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBuggyCount indicates an expected call of SaveBuggyCount
func (mr *MockRepositoryDataSourceMockRecorder) SaveBuggyCount(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBuggyCount", reflect.TypeOf((*MockRepositoryDataSource)(nil).SaveBuggyCount), arg0, arg1, arg2)
}

// SaveCommitsCount mocks base method
func (m *MockRepositoryDataSource) SaveCommitsCount(arg0 context.Context, arg1 identifier.RepositoryID, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCommitsCount", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCommitsCount indicates an expected call of SaveCommitsCount
func (mr *MockRepositoryDataSourceMockRecorder) SaveCommitsCount(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCommitsCount", reflect.TypeOf((*MockRepositoryDataSource)(nil).SaveCommitsCount), arg0, arg1, arg2)
}

// SaveConfidence mocks base method
func (m *MockRepositoryDataSource) SaveConfidence(arg0 context.Context, arg1 identifier.RepositoryID, arg2 float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveConfidence", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveConfidence indicates an expected call of SaveConfidence
func (mr *MockRepositoryDataSourceMockRecorder) SaveConfidence(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveConfidence", reflect.TypeOf((*MockRepositoryDataSource)(nil).SaveConfidence), arg0, arg1, arg2)
}

// SaveQuality mocks base method
func (m *MockRepositoryDataSource) SaveQuality(arg0 context.Context, arg1 identifier.RepositoryID, arg2 repofuel.PredictionStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveQuality", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveQuality indicates an expected call of SaveQuality
func (mr *MockRepositoryDataSourceMockRecorder) SaveQuality(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveQuality", reflect.TypeOf((*MockRepositoryDataSource)(nil).SaveQuality), arg0, arg1, arg2)
}

// SaveStatus mocks base method
func (m *MockRepositoryDataSource) SaveStatus(arg0 context.Context, arg1 identifier.RepositoryID, arg2 status.Stage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveStatus indicates an expected call of SaveStatus
func (mr *MockRepositoryDataSourceMockRecorder) SaveStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveStatus", reflect.TypeOf((*MockRepositoryDataSource)(nil).SaveStatus), arg0, arg1, arg2)
}

// StatusByID mocks base method
func (m *MockRepositoryDataSource) StatusByID(arg0 context.Context, arg1 identifier.RepositoryID) (status.Stage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusByID", arg0, arg1)
	ret0, _ := ret[0].(status.Stage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StatusByID indicates an expected call of StatusByID
func (mr *MockRepositoryDataSourceMockRecorder) StatusByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusByID", reflect.TypeOf((*MockRepositoryDataSource)(nil).StatusByID), arg0, arg1)
}

// TotalCount mocks base method
func (m *MockRepositoryDataSource) TotalCount(arg0 context.Context, arg1 time.Time) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TotalCount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TotalCount indicates an expected call of TotalCount
func (mr *MockRepositoryDataSourceMockRecorder) TotalCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalCount", reflect.TypeOf((*MockRepositoryDataSource)(nil).TotalCount), arg0, arg1)
}

// UpdateCollaborators mocks base method
func (m *MockRepositoryDataSource) UpdateCollaborators(arg0 context.Context, arg1 identifier.RepositoryID, arg2 map[string]common.Permissions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCollaborators", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCollaborators indicates an expected call of UpdateCollaborators
func (mr *MockRepositoryDataSourceMockRecorder) UpdateCollaborators(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCollaborators", reflect.TypeOf((*MockRepositoryDataSource)(nil).UpdateCollaborators), arg0, arg1, arg2)
}

// UpdateOwner mocks base method
func (m *MockRepositoryDataSource) UpdateOwner(arg0 context.Context, arg1 identifier.OrganizationID, arg2 *common.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOwner", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOwner indicates an expected call of UpdateOwner
func (mr *MockRepositoryDataSourceMockRecorder) UpdateOwner(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOwner", reflect.TypeOf((*MockRepositoryDataSource)(nil).UpdateOwner), arg0, arg1, arg2)
}

// UpdateSource mocks base method
func (m *MockRepositoryDataSource) UpdateSource(arg0 context.Context, arg1 identifier.RepositoryID, arg2 *common.Repository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSource", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSource indicates an expected call of UpdateSource
func (mr *MockRepositoryDataSourceMockRecorder) UpdateSource(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSource", reflect.TypeOf((*MockRepositoryDataSource)(nil).UpdateSource), arg0, arg1, arg2)
}

// UpgradeDataVersion mocks base method
func (m *MockRepositoryDataSource) UpgradeDataVersion(arg0 context.Context, arg1 identifier.RepositoryID, arg2 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeDataVersion", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpgradeDataVersion indicates an expected call of UpgradeDataVersion
func (mr *MockRepositoryDataSourceMockRecorder) UpgradeDataVersion(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeDataVersion", reflect.TypeOf((*MockRepositoryDataSource)(nil).UpgradeDataVersion), arg0, arg1, arg2)
}

// MockCommitIter is a mock of CommitIter interface
type MockCommitIter struct {
	ctrl     *gomock.Controller
	recorder *MockCommitIterMockRecorder
}

// MockCommitIterMockRecorder is the mock recorder for MockCommitIter
type MockCommitIterMockRecorder struct {
	mock *MockCommitIter
}

// NewMockCommitIter creates a new mock instance
func NewMockCommitIter(ctrl *gomock.Controller) *MockCommitIter {
	mock := &MockCommitIter{ctrl: ctrl}
	mock.recorder = &MockCommitIterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommitIter) EXPECT() *MockCommitIterMockRecorder {
	return m.recorder
}

// ForEach mocks base method
func (m *MockCommitIter) ForEach(arg0 context.Context, arg1 func(*entity.Commit) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForEach", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForEach indicates an expected call of ForEach
func (mr *MockCommitIterMockRecorder) ForEach(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForEach", reflect.TypeOf((*MockCommitIter)(nil).ForEach), arg0, arg1)
}

// Slice mocks base method
func (m *MockCommitIter) Slice(arg0 context.Context) ([]*entity.Commit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Slice", arg0)
	ret0, _ := ret[0].([]*entity.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Slice indicates an expected call of Slice
func (mr *MockCommitIterMockRecorder) Slice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Slice", reflect.TypeOf((*MockCommitIter)(nil).Slice), arg0)
}
