// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"

	"github.com/repofuel/repofuel/ingest/internal/entity"
	"github.com/repofuel/repofuel/ingest/pkg/classify"
)

type Node interface {
	IsNode()
}

type Progressable interface {
	IsProgressable()
}

type AddPublicRepositoryInput struct {
	Provider      string `json:"provider"`
	NameWithOwner string `json:"nameWithOwner"`
}

type AddPublicRepositoryPayload struct {
	Repository *entity.Repository `json:"repository"`
	Errors     []string           `json:"errors"`
}

type AvgOverTimeConnection struct {
	Nodes []*entity.AvgOverTime `json:"nodes"`
}

type ChecksConfigInput struct {
	Enable bool `json:"enable"`
}

type CountOverTimeConnection struct {
	Nodes []*entity.CountOverTime `json:"nodes"`
}

type DeleteCommitTagInput struct {
	CommitID string       `json:"commitID"`
	Tag      classify.Tag `json:"tag"`
}

type DeleteCommitTagPayload struct {
	Commit *entity.Commit `json:"commit"`
}

type DeleteRepositoryPayload struct {
	Repository *entity.Repository `json:"repository"`
}

type MonitorRepositoryPayload struct {
	Repository *entity.Repository `json:"repository"`
}

type SendCommitFeedbackInput struct {
	CommitID string `json:"commitID"`
	Message  string `json:"message"`
}

type StopRepositoryMonitoringPayload struct {
	Repository *entity.Repository `json:"repository"`
}

type TagsCountConnection struct {
	Nodes []*entity.TagCount `json:"nodes"`
}

type UpdateRepositoryInput struct {
	ID           string             `json:"id"`
	ChecksConfig *ChecksConfigInput `json:"checksConfig"`
}

type UpdateRepositoryPayload struct {
	Repository *entity.Repository `json:"repository"`
	Errors     []string           `json:"errors"`
}

type VisitOverTimeConnection struct {
	Nodes []*entity.VisitOverTime `json:"nodes"`
}

type Period string

const (
	PeriodDay     Period = "DAY"
	PeriodWeek    Period = "WEEK"
	PeriodMonth   Period = "MONTH"
	PeriodYear    Period = "YEAR"
	PeriodAllTime Period = "ALL_TIME"
)

var AllPeriod = []Period{
	PeriodDay,
	PeriodWeek,
	PeriodMonth,
	PeriodYear,
	PeriodAllTime,
}

func (e Period) IsValid() bool {
	switch e {
	case PeriodDay, PeriodWeek, PeriodMonth, PeriodYear, PeriodAllTime:
		return true
	}
	return false
}

func (e Period) String() string {
	return string(e)
}

func (e *Period) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Period(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Period", str)
	}
	return nil
}

func (e Period) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PredictionStatus string

const (
	PredictionStatusUnknownState      PredictionStatus = "UnknownState"
	PredictionStatusLastModel         PredictionStatus = "LastModel"
	PredictionStatusOk                PredictionStatus = "Ok"
	PredictionStatusLowTrainingData   PredictionStatus = "LowTrainingData"
	PredictionStatusClassUnbalanced   PredictionStatus = "ClassUnbalanced"
	PredictionStatusLowModelQuality   PredictionStatus = "LowModelQuality"
	PredictionStatusFailDataPreparing PredictionStatus = "FailDataPreparing"
	PredictionStatusFailTraining      PredictionStatus = "FailTraining"
	PredictionStatusFailPredicting    PredictionStatus = "FailPredicting"
)

var AllPredictionStatus = []PredictionStatus{
	PredictionStatusUnknownState,
	PredictionStatusLastModel,
	PredictionStatusOk,
	PredictionStatusLowTrainingData,
	PredictionStatusClassUnbalanced,
	PredictionStatusLowModelQuality,
	PredictionStatusFailDataPreparing,
	PredictionStatusFailTraining,
	PredictionStatusFailPredicting,
}

func (e PredictionStatus) IsValid() bool {
	switch e {
	case PredictionStatusUnknownState, PredictionStatusLastModel, PredictionStatusOk, PredictionStatusLowTrainingData, PredictionStatusClassUnbalanced, PredictionStatusLowModelQuality, PredictionStatusFailDataPreparing, PredictionStatusFailTraining, PredictionStatusFailPredicting:
		return true
	}
	return false
}

func (e PredictionStatus) String() string {
	return string(e)
}

func (e *PredictionStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PredictionStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PredictionStatus", str)
	}
	return nil
}

func (e PredictionStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PullRequestState string

const (
	PullRequestStateOpen   PullRequestState = "OPEN"
	PullRequestStateClosed PullRequestState = "CLOSED"
	PullRequestStateMerged PullRequestState = "MERGED"
)

var AllPullRequestState = []PullRequestState{
	PullRequestStateOpen,
	PullRequestStateClosed,
	PullRequestStateMerged,
}

func (e PullRequestState) IsValid() bool {
	switch e {
	case PullRequestStateOpen, PullRequestStateClosed, PullRequestStateMerged:
		return true
	}
	return false
}

func (e PullRequestState) String() string {
	return string(e)
}

func (e *PullRequestState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PullRequestState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PullRequestState", str)
	}
	return nil
}

func (e PullRequestState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
